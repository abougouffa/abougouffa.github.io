[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":[],"contents":" Prepare your device In your Android phone, enter recovery mode and enable ADB (usually, you need a custom recovery like TWRP, OrangeFox or LineageOS\u0026#39; recovery… etc). On a Linux machine, forward a local TCP port to a remote port on the Android device (let say local 6789, remote 9876). adb forward tcp:6789 tcp:9876 adb shell Netcat your file Once connected to the device\u0026#39;s shell, start netcat in listen mode on port 9876, and redirect stdout to the partition block device:\nnc -l -p 9876 \u0026gt; /dev/block/sda16 Now on the Linux shell, dd the partition backup file and redirect the output to netcat:\ndd if=/path/to/backup.img | nc localhost 6789 \u0026amp; See progress information Using dd, you can check for the progress using the user defined signal USR1, you can see the progress information by sending a USR1 signal to the dd process (knowing it\u0026#39;s PID):\nkill -USR1 [PID] That\u0026#39;s it!\n","date":"January 23, 2022","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/push-partition-android/","summary":"Prepare your device In your Android phone, enter recovery mode and enable ADB (usually, you need a custom recovery like TWRP, OrangeFox or LineageOS\u0026#39; recovery… etc). On a Linux machine, forward a local TCP port to a remote port on the Android device (let say local 6789, remote 9876). adb forward tcp:6789 tcp:9876 adb shell Netcat your file Once connected to the device\u0026#39;s shell, start netcat in listen mode on port 9876, and redirect stdout to the partition block device:","tags":[],"title":"Push partition image to an Android phone"},{"categories":[],"contents":" Sometimes; when working with partimage, someone can create a backup of a 1TB partition which contains -for example- only 10GB of data; in this case, when we want to restore it, partimage will fail if the restore disk does not have enough space (1TB in this case).\nI faced this problem and here the trick I used to restore the backup image to a smaller disk image.\nCreate an image file Create an image file with the right size (with seek, we don\u0026#39;t need to actually have the whole space):\n# Make sure that the seek=[SIZE] is sufficient dd if=/dev/zero of=disk_image.img bs=1 count=1 seek=1TB Use image file as loopback Make the image looks like a disk, by making it as a loopback device.\nsudo losetup /dev/loop0 disk_image.img Restore! Restore the backup image to the loopback device.\nsudo partimage restore /dev/loop0 backup.partimage.000 Done! Done, now you can mount /dev/loop0 or delete the loopback device and mount the `disk_image.img` directly!\nsudo losetup -d /dev/loop0 # delete loopback device mount disk_image.img /mount/point This was a trick that I want to share!\n","date":"April 16, 2020","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/restore-partimage-small-disk/","summary":"Sometimes; when working with partimage, someone can create a backup of a 1TB partition which contains -for example- only 10GB of data; in this case, when we want to restore it, partimage will fail if the restore disk does not have enough space (1TB in this case).\nI faced this problem and here the trick I used to restore the backup image to a smaller disk image.\nCreate an image file Create an image file with the right size (with seek, we don\u0026#39;t need to actually have the whole space):","tags":[],"title":"Restore a partimage to a smaller disk"},{"categories":null,"contents":" This repository How to install Emacs stuff Intro This file Doom configuration files Pseudo early-init Fixes Check for external tools Doom modules (init.el) File skeleton Input (:input) General (:config) Completion (:completion) User interface (:ui) Editor (:editor) Emacs builtin stuff (:emacs) Terminals (:term) Checkers (:checkers) Tools (:tools) Operating system (:os) Language support (:lang) Email (:email) Apps (:app) Additional packages (packages.el) General Emacs settings User information Secrets Better defaults File deletion Window Messages buffer Split defaults Undo and auto-save Editing Emacs sources Frame Maximizing Focus created frame Margins Emacs daemon Initialization Tweaks Save recent files Package configuration User interface Font Theme Mode line Clock Battery Mode line customization Set transparency Dashboard Custom splash image Dashboard Which key Window title Fringe Vertico Company SVG tag Focus Smooth scrolling All the icons Editing Scratch buffer Mouse buttons Page break lines Binary files Very large files Evil Aggressive indent YASnippet Literate configuration Allow babel execution in doom CLI actions Asynchronous tangling IDE Centaur tabs Treemacs Projectile Tramp Eros-eval dir-locals.el Symbols Emojify Ligatures Checkers (spell \u0026amp; grammar) Install back-end Spell-Fu Guess language Grammarly Grammalecte LanguageTool Doom\u0026rsquo;s :checkers grammar LTeX Flycheck System tools Disk usage Chezmoi Aweshell Lemon eCryptfs Features Weather OpenStreetMap Islamic prayer times Info colors Zotero Zotxt CRDT The Silver Searcher Emacs Application Framework Bitwarden PDF tools Dark mode LTDR Fun Speed Type 2048 Game Snow xkcd Applications Calendar e-Books nov News feed elfeed VPN configuration NetExtender wrapper Launch NetExtender session from Emacs Email mu4e mbsync msmtp mu4e IRC Multimedia MPD, MPC, and MPV EMMS Elfeed ❤️ MPV Keybindings Cycle song information in mode line Maxima Maxima IMaxima FriCAS Programming File templates CSV rainbow ESS GNU Octave ROS Extensions ROS bags ros.el Scheme Embedded systems Embed.el Arduino Bitbake (Yocto) Debugging DAP Doom store The Grand \u0026ldquo;Cathedral\u0026rdquo; Debugger Additional commands RealGUD .dir-locals.el support (only for GDB) Record and replay rr GDB Emacs GDB Custom layout for gdb-many-windows Highlight current line Completion \u0026amp; IDE Eglot LSP mode Enable some useful UI stuff LSP mode with clangd LSP mode with ccls Enable lsp over tramp Python C/C++ with ccls C/C++ with clangd VHDL SonarLint Cppcheck Project CMake FZF Clang-format Git \u0026amp; VC Repo Blamer Assembly Disaster Devdocs Systemd Franca IDL LaTeX Flycheck + Projectile Graphviz Inspector Office Org mode additional packages Org mode Intro Behavior Tweaking defaults Org basics Babel Visual line / auto fill EVIL TODOs Agenda Super agenda Calendar Google calendar (org-gcal) TODO CalDAV Capture Roam Basic settings Mode line file name Org Roam Capture template Snippet Helpers Translate capital keywords to lower case Org notifier Custom links Sub-figures LaTeX inline markup Visuals Font display Headings Deadlines Font styling Inline blocks Org Modern Image previews List bullet sequence Symbols LaTeX fragments Prettier highlighting Prettier rendering Better equation numbering Fragtog Org plot Bibliography BibTeX Org-bib Org-cite Org-ref Citar Exporting General settings LaTeX export Compiling Org LaTeX packages Export PDFs with syntax highlighting Class templates Hugo Text editing Plain text Academic phrases Quarto System configuration Mime types Org mode files Registering org-protocol:// Configuring Chrome/Brave Git Git diffs Apache Tika App wrapper Emacs\u0026rsquo; Systemd daemon Emacs Client Desktop integration Command-line wrapper Useful aliases AppImage Oh-my-Zsh Path Themes and customization: Behavior Plugins Bootstrap Oh-my-Zsh Aliases Zsh user configuration pbcopy and pbpaste netpaste Sudo GUI! Neovim ESP-IDF CLI wttrin client Minicom Rust Clang-format CMake Node tmux Other stuff System dark theme trick Rust format eCryptfs Unlock and mount script Desktop integration GDB Early init Init WIP: Guile Scheme per program/project script GnuPG Packages KDE Plasma This repository This repository (abougouffa/dotfiles) contains my configuration files for Zsh, Emacs, Vim, Alacritty and other Linux related stuff.\nIf you want to reuse some of these configurations, you will need to modify some directories and add some user specific information (usernames, passwords\u0026hellip;)\nThis is the main configuration file .doom.d/config.org, (available also as a PDF file, it contains the literal configuration for Doom Emacs, and I use it to generate some other user configuration files (define aliases, environment variables, user tools, Git configuration\u0026hellip;).\nHow to install Since commit 55c92810, I\u0026rsquo;m using chezmoi to manage my Dotfiles.\nNow the Dotfiles can be installed using the following command; however, I don\u0026rsquo;t recommend to install all of my dotfiles, try instead to adapt them or to copy some interesting chunks.\nsudo pacman -S chezmoi chezmoi init --apply abougouffa Emacs stuff To install my Doom Emacs configuration:\nInstall Doom Emacs to ~/.config/emacs or .emacs.d: git clone https://github.com/doomemacs/doomemacs.git ~/.config/emacs ~/.config/emacs/bin/doom install Until 12b3d20e, I was using Chemacs2 to manage multiple Emacs profiles. Since I\u0026rsquo;m using only Doom Emacs and Doom recently introduced a new feature to bootstrap other Emacs configs, so I switched to a plain Doom Emacs config.\nIntro I\u0026rsquo;ve been using Linux exclusively since 2010, GNU Emacs was always installed on my machine, but I didn\u0026rsquo;t discover the real Emacs until 2020, in the beginning, I started my Vanilla Emacs configuration from scratch, but after a while, it becomes a mess. As a new Emacs user, I didn\u0026rsquo;t understand the in the beginning how to optimize my configuration and how to do things correctly. I discovered then Spacemacs, which made things much easier, but it was a little slow, and just after, I found the awesome Doom Emacs, and since, I didn\u0026rsquo;t quit my Emacs screen!\nIn the beginning, I was basically copying chunks of Emacs Lisp code from the internet, which quickly becomes a mess, specially because I was using a mixture of vanilla Emacs style configurations and Doom style ones.\nNow I decided to rewrite a cleaner version of my configuration which will be more Doom friendly, and for that, I found an excellent example in tecosaur\u0026rsquo;s emacs-config, so my current configuration is heavily inspired by tecosaur\u0026rsquo;s one.\nThis file This is my literate configuration file, I use it to generate Doom\u0026rsquo;s config files ($DOOMDIR/init.el, $DOOMDIR/packages.el and $DOOMDIR/config.el), as well as some other shell scripts, app installers, app launchers\u0026hellip; etc.\nMake config.el run (slightly) faster with lexical binding (see this blog post for more info).\n;;; config.el -*- lexical-binding: t; -*- Add the shebang and the description to the setup.sh file, which will be used to set system settings and install some missing dependencies.\n#!/bin/bash # This is an automatically generated setup file, it installes some missing # dependencies, configure system services, set system settings form better # desktop integration... etc. # Abdelhak BOUGOUFFA (c) 2022 Add the an initial comment to the ~/.zshrc file.\n# -*- mode: sh; -*- # This file is automatically generated from my Org literate configuration. # Abdelhak BOUGOUFFA (c) 2022 Doom configuration files Pseudo early-init This file will be loaded before the content of Doom\u0026rsquo;s private init.el, I add some special stuff which I want to load very early.\n;;; pseudo-early-init.el -*- lexical-binding: t; -*- Fixes ;; Fix for #2386 until further investigation ;; From https://git.sr.ht/~gagbo/doom-config (when noninteractive (after! undo-tree (global-undo-tree-mode -1))) Check for external tools Some of the added packages require external tools, I like to check for these tools and store the result in global constants.\n(defun bool (val) (not (null val))) ;; Convert a value to boolean (defconst AG-OK-P (bool (executable-find \u0026#34;ag\u0026#34;))) (defconst REPO-OK-P (bool (executable-find \u0026#34;repo\u0026#34;))) (defconst MAXIMA-OK-P (bool (executable-find \u0026#34;maxima\u0026#34;))) (defconst QUARTO-OK-P (bool (executable-find \u0026#34;quarto\u0026#34;))) (defconst ROSBAG-OK-P (bool (executable-find \u0026#34;rosbag\u0026#34;))) (defconst ZOTERO-OK-P (bool (executable-find \u0026#34;zotero\u0026#34;))) (defconst CHEZMOI-OK-P (bool (executable-find \u0026#34;chezmoi\u0026#34;))) (defconst BITWARDEN-OK-P (bool (executable-find \u0026#34;bw\u0026#34;))) (defconst LANGUAGETOOL-OK-P (bool (executable-find \u0026#34;languagetool\u0026#34;))) (defconst CLANG-FORMAT-OK-P (bool (executable-find \u0026#34;clang-format\u0026#34;))) (defconst EAF-OK-P (bool (and (file-directory-p (expand-file-name \u0026#34;emacs-application-framework\u0026#34; doom-etc-dir)) ;; EAF seems to not work with LUCID build. (not (string-search \u0026#34;LUCID\u0026#34; system-configuration-features))))) (defconst MPD-OK-P (let ((ok (bool (and (executable-find \u0026#34;mpc\u0026#34;) (executable-find \u0026#34;mpd\u0026#34;))))) (unless ok (warn \u0026#34;Missing MPD or MPC. Falling back to the EMMS default backend.\u0026#34;)) ok)) (defconst MPV-OK-P (let ((ok (bool (and MPD-OK-P (executable-find \u0026#34;mpv\u0026#34;) (executable-find \u0026#34;youtube-dl\u0026#34;))))) (unless ok (warn \u0026#34;Missing MPV or youtube-dl.\u0026#34;)) (and nil ok)) ;; NOTE: disabled) (defconst FRICAS-OK-P (bool (and (executable-find \u0026#34;fricas\u0026#34;) (file-directory-p \u0026#34;/usr/lib/fricas/emacs\u0026#34;)))) (defconst NETEXTENDER-OK-P (let ((ok (bool (and (executable-find \u0026#34;netExtender\u0026#34;) (file-exists-p \u0026#34;~/.local/bin/netextender\u0026#34;) (file-exists-p \u0026#34;~/.ssh/netExtender-params.gpg\u0026#34;))))) (unless ok (warn \u0026#34;Missing netExtender dependencies.\u0026#34;)) ok)) Doom modules (init.el) Here is the literate configuration which generates the Doom\u0026rsquo;s init.el file, this file contains all the enabled Doom modules with the appropriate flags.\nThis section defines the default source blocks arguments . All source blocks in this section inherits these headers, so they will not be tangled unless overwriting in the block\u0026rsquo;s header.\nFile skeleton This first section defines the template for the subsections, it uses the no-web syntax to include subsections specified as \u0026lt;\u0026lt;sub-section-name\u0026gt;\u0026gt;.\n;;; init.el -*- lexical-binding: t; -*- ;; This file controls what Doom modules are enabled and what order they load in. ;; Press \u0026#39;K\u0026#39; on a module to view its documentation, and \u0026#39;gd\u0026#39; to browse its directory. ;; I add some special stuff wich I want to load very early. (load! \u0026#34;pseudo-early-init.el\u0026#34;) (doom! :input \u0026lt;\u0026lt;doom-input\u0026gt;\u0026gt; :completion \u0026lt;\u0026lt;doom-completion\u0026gt;\u0026gt; :ui \u0026lt;\u0026lt;doom-ui\u0026gt;\u0026gt; :editor \u0026lt;\u0026lt;doom-editor\u0026gt;\u0026gt; :emacs \u0026lt;\u0026lt;doom-emacs\u0026gt;\u0026gt; :term \u0026lt;\u0026lt;doom-term\u0026gt;\u0026gt; :checkers \u0026lt;\u0026lt;doom-checkers\u0026gt;\u0026gt; :tools \u0026lt;\u0026lt;doom-tools\u0026gt;\u0026gt; :os \u0026lt;\u0026lt;doom-os\u0026gt;\u0026gt; :lang \u0026lt;\u0026lt;doom-lang\u0026gt;\u0026gt; :email \u0026lt;\u0026lt;doom-email\u0026gt;\u0026gt; :app \u0026lt;\u0026lt;doom-app\u0026gt;\u0026gt; :config \u0026lt;\u0026lt;doom-config\u0026gt;\u0026gt; ) Input (:input) Enable bidirectional languages support (bidi).\nbidi General (:config) Enable literate configuration (like this file!), and some defaults.\nliterate (default +bindings +smartparens) Completion (:completion) I\u0026rsquo;m lazy, I like Emacs to complete my writings.\n(vertico +icons) company User interface (:ui) Enables some user interface features for better user experience, the beautiful modeline, the treemacs project tree, better version control integration with vc-gutter\u0026hellip; and other useful stuff.\ndeft doom doom-dashboard hl-todo hydra modeline vc-gutter zen ophints nav-flash (window-select +numbers) (ligatures +extra) (popup +all +defaults) (emoji +ascii +unicode +github) (treemacs +lsp) workspaces Editor (:editor) Some editing modules, the most important feature is EVIL to enable Vim style editing in Emacs. I like also to edit with multiple cursors, enable yasnippet support, wrap long lines, auto format support.\n(evil +everywhere) file-templates fold format multiple-cursors parinfer snippets word-wrap Emacs builtin stuff (:emacs) Beautify Emacs builtin packages.\n(dired +dirvish +icons) (ibuffer +icons) (undo +tree) vc Terminals (:term) Run commands in terminal from Emacs. I use mainly vterm on my local machine, however, I like to have eshell, shell and term installed to use them for remote file editing (via Tramp).\neshell vterm shell term Checkers (:checkers) I like to check my documents for errors while I\u0026rsquo;m typing. The grammar module enables LanguageTool support.\n(syntax +childframe) (spell +aspell) grammar Tools (:tools) I enable some useful tools which facilitate my work flow, I like to enable Docker support, EditorConfig is a good feature to have. I like to enable lsp-mode and dap-mode for coding and debugging by enabling the lsp and debugger modules with +lsp support (further customization for lsp and dap below). pdf adds support through pdf-tools, which are great for viewing PDF files inside Emacs, I also enable some extra tools, like magit, lookup, tmux\u0026hellip; etc.\ndirenv editorconfig ein gist make pdf rgb tmux upload (lsp +peek) (debugger +lsp) (docker +lsp) (eval +overlay) (lookup +docsets +dictionary +offline) (magit +forge) tree-sitter Operating system (:os) I enable tty for better support of terminal editing.\n(tty +osc) Language support (:lang) Most of the projects I\u0026rsquo;m working on are mainly written in C/C++, Python, Rust and some Lisp stuff, I edit also a lot of configuration and data files in several formats (csv, yaml, xml, json, shell scripts\u0026hellip;). I use Org-mode to manage all my papers and notes, so I need to enable as many features as I need, I do enable plantuml also to quickly plot UML models withing Org documents.\nplantuml emacs-lisp common-lisp data qt coq (markdown +grip) (ocaml +tree-sitter) (cc +lsp +tree-sitter) (json +lsp +tree-sitter) (julia +lsp +tree-sitter) (latex +lsp +latexmk +fold) (rust +lsp +tree-sitter) (ess +lsp) (yaml +lsp) (sh +lsp +tree-sitter) (python +lsp +pyenv +conda +pyright +tree-sitter) (racket +lsp +xp) (scheme +guile +racket +chez +gambit +gauche) (org +dragndrop +gnuplot +jupyter +pandoc +noter +hugo +present +pomodoro +roam2) (web +tree-sitter) Email (:email) I like to use mu4e to manage mail mailboxes. The +org flag adds org-msg support and +gmail adds better management of Gmail accounts.\n(:if (executable-find \u0026#34;mu\u0026#34;) (mu4e +org +gmail)) Apps (:app) Emacs contains a ton of applications, some of them are supported by Doom, I like to use Emacs manage my calendar, chat on IRC, and receive news. I do use EMMS sometimes to play music without leaving Emacs, and I like to enable support for emacs-everywhere.\ncalendar irc emms everywhere (rss +org) Additional packages (packages.el) This section generates Doom\u0026rsquo;s packages.el, with the associated configurations (use-package! blocks).\nThis file shouldn\u0026rsquo;t be byte compiled.\n;; -*- no-byte-compile: t; -*- General Emacs settings User information (setq user-full-name \u0026#34;Abdelhak Bougouffa\u0026#34; user-mail-address \u0026#34;abougouffa@fedoraproject.org\u0026#34;) Secrets Set the path to my GPG encrypted secrets. I like to set the cache expiry to nil instead of the default 2 hours.\n(setq auth-sources \u0026#39;(\u0026#34;~/.authinfo.gpg\u0026#34;) auth-source-do-cache t auth-source-cache-expiry 86400 ; All day, defaut is 2h (7200) password-cache t password-cache-expiry 86400) ;; Set my GPG key as the default key (setq-default epa-file-encrypt-to \u0026#39;(\u0026#34;F808A020A3E1AC37\u0026#34;)) Better defaults File deletion Delete files by moving them to trash.\n(setq-default delete-by-moving-to-trash t trash-directory nil) ;; Use freedesktop.org trashcan Window Take new window space from all other windows (not just current).\n(setq-default window-combination-resize t) Messages buffer Stick to buffer tail, useful with *Messages* buffer. Derived from this answer.\n(defvar +messages-buffer-auto-tail--enabled nil) (defun +messages-buffer-auto-tail--advice (\u0026amp;rest arg) \u0026#34;Make *Messages* buffer auto-scroll to the end after each message.\u0026#34; (let* ((buf-name (buffer-name (messages-buffer))) ;; Create *Messages* buffer if it does not exist (buf (get-buffer-create buf-name))) ;; Activate this advice only if the point is _not_ in the *Messages* buffer ;; to begin with. This condition is required; otherwise you will not be ;; able to use `isearch\u0026#39; and other stuff within the *Messages* buffer as ;; the point will keep moving to the end of buffer :P (when (not (string= buf-name (buffer-name))) ;; Go to the end of buffer in all *Messages* buffer windows that are ;; *live* (`get-buffer-window-list\u0026#39; returns a list of only live windows). (dolist (win (get-buffer-window-list buf-name nil :all-frames)) (with-selected-window win (goto-char (point-max)))) ;; Go to the end of the *Messages* buffer even if it is not in one of ;; the live windows. (with-current-buffer buf (goto-char (point-max)))))) (defun +messages-buffer-toggle-auto-tail () \u0026#34;Auto tail the \u0026#39;*Messages*\u0026#39; buffer.\u0026#34; (interactive) ;; Add/remove an advice from the \u0026#39;message\u0026#39; function. (cond (+messages-buffer-auto-tail--enabled (advice-remove \u0026#39;message \u0026#39;+messages-buffer-auto-tail--advice) (setq +messages-buffer-auto-tail--enabled nil) (message \u0026#34;+messages-buffer-auto-tail: Disabled.\u0026#34;)) (t (advice-add \u0026#39;message :after \u0026#39;+messages-buffer-auto-tail--advice) (setq +messages-buffer-auto-tail--enabled t) (message \u0026#34;+messages-buffer-auto-tail: Enabled.\u0026#34;)))) Split defaults Split horizontally to right, vertically below the current window.\n(setq evil-vsplit-window-right t evil-split-window-below t) Show list of buffers when splitting.\n(defadvice! prompt-for-buffer (\u0026amp;rest _) :after \u0026#39;(evil-window-split evil-window-vsplit) (consult-buffer)) Undo and auto-save There is a package bbatsov/super-save, maybe better than the default auto-save-mode.\n(setq undo-limit 80000000 ;; Raise undo-limit to 80Mb evil-want-fine-undo t ;; By default while in insert all changes are one big blob. Be more granular auto-save-default t ;; Nobody likes to lose work, I certainly don\u0026#39;t scroll-preserve-screen-position \u0026#39;always ;; Don\u0026#39;t have `point\u0026#39; jump around scroll-margin 2) ;; It\u0026#39;s nice to maintain a little margin Editing ;; Stretch cursor to the glyph width (setq-default x-stretch-cursor t) ;; Enable relative line numbers (setq display-line-numbers-type \u0026#39;relative) ;; Iterate through CamelCase words (global-subword-mode 1) Emacs sources (setq source-directory (expand-file-name \u0026#34;~/Softwares/aur/emacs-git/src/emacs-git\u0026#34;)) Frame Maximizing ;; NOTE: Not tangled, replaced with params passed to emacsclient ;; start the initial frame maximized (add-to-list \u0026#39;initial-frame-alist \u0026#39;(fullscreen . maximized)) ;; start every frame maximized (add-to-list \u0026#39;default-frame-alist \u0026#39;(fullscreen . maximized)) To avoid conflict when launching Emacs in emacs-everywhere mode. I\u0026rsquo;m using it in command line when calling emacsclient, by adding this:\n--frame-parameters=\u0026#34;\u0026#39;(fullscreen . maximized)\u0026#34; Focus created frame The problem is, every time I launch an Emacs frame (from KDE), Emacs starts with no focus, I need each time to Alt-TAB to get Emacs under focus, and then start typing. I tried changing this behavior from Emacs by hooking raise-frame at startup, but it didn\u0026rsquo;t work.\nGot from this comment, not working on my Emacs version.\n;; NOTE: Not tangled, not working (add-hook \u0026#39;server-switch-hook #\u0026#39;raise-frame) After some investigations, I found that this issue is probably KDE specific, the issue goes away by setting: Window Management \u0026gt; Window Behavior \u0026gt; Focus \u0026gt; Focus stealing prevention to None in the KDE Settings.\nMargins ;; (set-frame-parameter nil \u0026#39;internal-border-width 15) ;; Add frame borders and window dividers (modify-all-frames-parameters \u0026#39;((right-divider-width . 10) (internal-border-width . 10))) (dolist (face \u0026#39;(window-divider window-divider-first-pixel window-divider-last-pixel)) (face-spec-reset-face face) (set-face-foreground face (face-attribute \u0026#39;default :background))) (set-face-background \u0026#39;fringe (face-attribute \u0026#39;default :background)) Emacs daemon Initialization When the daemon is running, I almost always want to do a few particular things with it, so I may as well eat the load time at startup. We also want to keep mu4e running.\nLastly, while I\u0026rsquo;m not sure quite why it happens, but after a bit it seems that new Emacs client frames start on the *scratch* buffer instead of the dashboard. I prefer the dashboard, so let\u0026rsquo;s ensure that\u0026rsquo;s always switched to in new frames.\n(defun +greedily-do-daemon-setup () (require \u0026#39;org) (when (and (featurep! :email mu4e) (require \u0026#39;mu4e nil t)) (setq mu4e-confirm-quit t +mu4e-lock-greedy t +mu4e-lock-relaxed t) (+mu4e-lock-start \u0026#39;mu4e--start)) (when (and (featurep! :app rss) (require \u0026#39;elfeed nil t)) (run-at-time nil (* 8 60 60) #\u0026#39;elfeed-update))) (when (daemonp) (add-hook \u0026#39;emacs-startup-hook #\u0026#39;+greedily-do-daemon-setup) (add-hook! \u0026#39;server-after-make-frame-hook (unless (string-match-p \u0026#34;\\\\*draft\\\\|\\\\*stdin\\\\|emacs-everywhere\u0026#34; (buffer-name)) (switch-to-buffer +doom-dashboard-name)))) Tweaks Save recent files When editing files with Emacs client, the files does not get stored by recentf, making Emacs forgets about recently opened files. A quick fix is to hook the recentf-save-list command to the delete-frame-functions and delete-terminal-functions which gets executed each time a frame/terminal is deleted.\n(when (daemonp) (add-hook! \u0026#39;(delete-frame-functions delete-terminal-functions) (lambda (arg) (recentf-save-list)))) Package configuration User interface Font Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones: doom-font, doom-unicode-font and doom-variable-pitch-font. The doom-big-font is used for doom-big-font-mode; use this for presentations or streaming.\nThey all accept either a font-spec, font string (\u0026quot;Input Mono-12\u0026quot;), or xlfd font string. You generally only need these two:\nSome good fonts:\nIosevka Fixed (THE FONT) Nerd fonts FantasqueSansMono Nerd Font Mono mononoki Nerd Font Mono CaskaydiaCove Nerd Font Mono Cascadia Code Fantasque Sans Mono JuliaMono (good Unicode support) IBM Plex Mono JetBrains Mono Roboto Mono Source Code Pro Input Mono Narrow Fira Code (setq doom-font (font-spec :family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; :size 22) doom-big-font (font-spec :family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; :size 32) doom-variable-pitch-font (font-spec :family \u0026#34;Andika\u0026#34;) ;; inherits the :size from doom-font doom-unicode-font (font-spec :family \u0026#34;JuliaMono\u0026#34;) doom-serif-font (font-spec :family \u0026#34;Input Serif\u0026#34; :weight \u0026#39;light)) Theme Set Doom\u0026rsquo;s theme, some good choices:\ndoom-palenight doom-one doom-vibrant doom-dark+ (VS Code like) doom-tomorrow-night doom-xcode doom-material doom-ayu-mirage doom-monokai-pro (setq doom-theme \u0026#39;doom-vibrant) (remove-hook \u0026#39;window-setup-hook #\u0026#39;doom-init-theme-h) (add-hook \u0026#39;after-init-hook #\u0026#39;doom-init-theme-h \u0026#39;append) (delq! t custom-theme-load-path) ;; By default \u0026#39;doom-vibrant\u0026#39; uses red faces to mark modified file in modeline, ;; lets change it to orange. (custom-set-faces! \u0026#39;(doom-modeline-buffer-modified :foreground \u0026#34;orange\u0026#34;)) Mode line Clock Display time and set the format to 24h.\n(after! doom-modeline (setq display-time-string-forms \u0026#39;((propertize (concat \u0026#34; ⌛ \u0026#34; 24-hours \u0026#34;:\u0026#34; minutes)))) (display-time-mode 1)) ; Enable time in the mode-line Battery Show battery level unless battery is not present or battery information is unknown.\n(after! doom-modeline (let ((battery-str (battery))) (unless (or (equal \u0026#34;Battery status not available\u0026#34; battery-str) (string-match-p (regexp-quote \u0026#34;unknown\u0026#34;) battery-str) (string-match-p (regexp-quote \u0026#34;N/A\u0026#34;) battery-str)) (display-battery-mode 1)))) Mode line customization (setq doom-modeline-major-mode-icon t doom-modeline-major-mode-color-icon t doom-modeline-buffer-state-icon t) Set transparency ;; NOTE: Not tangled (set-frame-parameter (selected-frame) \u0026#39;alpha \u0026#39;(98 100)) (add-to-list \u0026#39;default-frame-alist \u0026#39;(alpha 98 100)) Dashboard Custom splash image Change the logo to an image, a set of beautiful images can be found in assets.\nFile emacs-e.svg gnu-emacs-white.svg gnu-emacs-flat.svg blackhole-lines.svg doom-emacs-white.svg doom-emacs-dark.svg (setq fancy-splash-image (expand-file-name \u0026#34;assets/emacs-e.png\u0026#34; doom-private-dir)) Dashboard (remove-hook \u0026#39;+doom-dashboard-functions #\u0026#39;doom-dashboard-widget-shortmenu) (add-hook! \u0026#39;+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1)) (setq-hook! \u0026#39;+doom-dashboard-mode-hook evil-normal-state-cursor (list nil)) (defun +doom/open-private-config-org () (interactive) (when (file-directory-p doom-private-dir) (find-file (expand-file-name \u0026#34;config.org\u0026#34; doom-private-dir)))) ;; (setq +doom-dashboard-menu-sections ;; \u0026#39;((\u0026#34;Reload last session\u0026#34; ;; :icon (all-the-icons-octicon \u0026#34;history\u0026#34; :face \u0026#39;doom-dashboard-menu-title) ;; :when (cond ((featurep! :ui workspaces) ;; (file-exists-p (expand-file-name persp-auto-save-fname persp-save-dir))) ;; ((require \u0026#39;desktop nil t) ;; (file-exists-p (desktop-full-file-name)))) ;; :face (:inherit (doom-dashboard-menu-title bold)) ;; :action doom/quickload-session) ;; (\u0026#34;Open mailbox\u0026#34; ;; :icon (all-the-icons-octicon \u0026#34;mail\u0026#34; :face \u0026#39;doom-dashboard-menu-title) ;; :action =mu4e) ;; (\u0026#34;Open org-agenda\u0026#34; ;; :icon (all-the-icons-octicon \u0026#34;calendar\u0026#34; :face \u0026#39;doom-dashboard-menu-title) ;; :when (fboundp \u0026#39;org-agenda) ;; :action org-agenda) ;; (\u0026#34;Jump to bookmark\u0026#34; ;; :icon (all-the-icons-octicon \u0026#34;bookmark\u0026#34; :face \u0026#39;doom-dashboard-menu-title) ;; :action bookmark-jump) ;; (\u0026#34;Open config.org\u0026#34; ;; :icon (all-the-icons-fileicon \u0026#34;config\u0026#34; :face \u0026#39;doom-dashboard-menu-title) ;; :when (file-directory-p doom-private-dir) ;; :action +doom/open-private-config-org))) (defun +doom-dashboard-setup-modified-keymap () (setq +doom-dashboard-mode-map (make-sparse-keymap)) (map! :map +doom-dashboard-mode-map :desc \u0026#34;Find file\u0026#34; :ne \u0026#34;f\u0026#34; #\u0026#39;find-file :desc \u0026#34;Recent files\u0026#34; :ne \u0026#34;r\u0026#34; #\u0026#39;consult-recent-file :desc \u0026#34;Config dir\u0026#34; :ne \u0026#34;C\u0026#34; #\u0026#39;doom/open-private-config :desc \u0026#34;Open config.org\u0026#34; :ne \u0026#34;c\u0026#34; #\u0026#39;+doom/open-private-config-org :desc \u0026#34;Open dotfile\u0026#34; :ne \u0026#34;.\u0026#34; (cmd! (doom-project-find-file \u0026#34;~/.config/\u0026#34;)) :desc \u0026#34;Notes (roam)\u0026#34; :ne \u0026#34;n\u0026#34; #\u0026#39;org-roam-node-find :desc \u0026#34;Switch buffer\u0026#34; :ne \u0026#34;b\u0026#34; #\u0026#39;+vertico/switch-workspace-buffer :desc \u0026#34;Switch buffers (all)\u0026#34; :ne \u0026#34;B\u0026#34; #\u0026#39;consult-buffer :desc \u0026#34;IBuffer\u0026#34; :ne \u0026#34;i\u0026#34; #\u0026#39;ibuffer :desc \u0026#34;Previous buffer\u0026#34; :ne \u0026#34;p\u0026#34; #\u0026#39;previous-buffer :desc \u0026#34;Email\u0026#34; :ne \u0026#34;m\u0026#34; #\u0026#39;=mu4e :desc \u0026#34;Quit\u0026#34; :ne \u0026#34;Q\u0026#34; #\u0026#39;save-buffers-kill-terminal :desc \u0026#34;Show keybindings\u0026#34; :ne \u0026#34;h\u0026#34; (cmd! (which-key-show-keymap \u0026#39;+doom-dashboard-mode-map)))) (add-transient-hook! #\u0026#39;+doom-dashboard-mode (+doom-dashboard-setup-modified-keymap)) (add-transient-hook! #\u0026#39;+doom-dashboard-mode :append (+doom-dashboard-setup-modified-keymap)) (add-hook! \u0026#39;doom-init-ui-hook :append (+doom-dashboard-setup-modified-keymap)) (map! :leader :desc \u0026#34;Dashboard\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;+doom-dashboard/open) Which key Make which-key popup faster.\n(setq which-key-idle-delay 0.5 ;; Default is 1.0 which-key-idle-secondary-delay 0.05) ;; Default is nil I stol this chunk from tecosaur\u0026rsquo;s config, it helps replacing the evil- prefix with a unicode char, making which-key\u0026rsquo;s candidate list less verbose.\n(setq which-key-allow-multiple-replacements t) (after! which-key (pushnew! which-key-replacement-alist \u0026#39;((\u0026#34;\u0026#34; . \u0026#34;\\\\`+?evil[-:]?\\\\(?:a-\\\\)?\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;◂\\\\1\u0026#34;)) \u0026#39;((\u0026#34;\\\\`g s\u0026#34; . \u0026#34;\\\\`evilem--?motion-\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;◃\\\\1\u0026#34;)))) Window title I\u0026rsquo;d like to have just the buffer name, then if applicable the project folder.\n(setq frame-title-format \u0026#39;(\u0026#34;\u0026#34; (:eval (if (s-contains-p org-roam-directory (or buffer-file-name \u0026#34;\u0026#34;)) (replace-regexp-in-string \u0026#34;.*/[0-9]*-?\u0026#34; \u0026#34;☰ \u0026#34; (subst-char-in-string ?_ ? buffer-file-name)) \u0026#34;%b\u0026#34;)) (:eval (let ((project-name (projectile-project-name))) (unless (string= \u0026#34;-\u0026#34; project-name) (format (if (buffer-modified-p) \u0026#34; ◉ %s\u0026#34; \u0026#34; ● %s\u0026#34;) project-name)))))) Fringe Increase the left fringe width, to enable rendering breakpoints (in debug modes) correctly.\n;; (after! lsp-mode ;; (add-hook \u0026#39;lsp-mode-hook (lambda () (set-fringe-mode \u0026#39;(15 . 15))))) (setq-default left-fringe-width 25 right-fringe-width 25) Vertico Since doom-emacs@ece4a74, Doom supports the +childframe for :completion vertico. This can be used to adjust the left and right fringes.\n(after! vertico-posframe (setq vertico-posframe-parameters \u0026#39;((left-fringe . 12) (right-fringe . 14)) vertico-posframe-border-width 3)) Company I do not find company useful in Org files.\n(setq company-global-modes \u0026#39;(not erc-mode circe-mode message-mode help-mode gud-mode vterm-mode org-mode)) SVG tag (package! svg-tag-mode) (use-package! svg-tag-mode :commands svg-tag-mode :config (setq svg-tag-tags \u0026#39;((\u0026#34;^\\\\*.* .* \\\\(:[A-Za-z0-9]+\\\\)\u0026#34; . ((lambda (tag) (svg-tag-make) tag :beg 1 :font-family \u0026#34;Roboto Mono\u0026#34; :font-size 6 :height 0.6 :padding 0 :margin 0))) (\u0026#34;\\\\(:[A-Za-z0-9]+:\\\\)$\u0026#34; . ((lambda (tag) (svg-tag-make) tag :beg 1 :end -1 :font-family \u0026#34;Roboto Mono\u0026#34; :font-size 6 :height 0.6 :padding 0 :margin 0)))))) Focus Dim the font color of text in surrounding paragraphs, focus only on the current line.\n(package! focus) (use-package! focus :commands focus-mode) Smooth scrolling (when (\u0026lt;= emacs-major-version 28) (package! good-scroll)) (if (\u0026gt; emacs-major-version 28) (pixel-scroll-precision-mode 1) (use-package! good-scroll :config (good-scroll-mode 1))) All the icons Set some custom icons for some file extensions, basically for .m files.\n(after! all-the-icons (setcdr (assoc \u0026#34;m\u0026#34; all-the-icons-extension-icon-alist) (cdr (assoc \u0026#34;matlab\u0026#34; all-the-icons-extension-icon-alist)))) Editing Scratch buffer Tell the scratch buffer to start in emacs-lisp-mode.\n(setq doom-scratch-initial-major-mode \u0026#39;emacs-lisp-mode) Mouse buttons Map extra mouse buttons to jump between buffers\n(map! :n [mouse-8] #\u0026#39;better-jumper-jump-backward :n [mouse-9] #\u0026#39;better-jumper-jump-forward) Page break lines A feature that displays ugly form feed characters as tidy horizontal rules. Inspired by M-EMACS.\n(package! page-break-lines) (use-package! page-break-lines :diminish :init (global-page-break-lines-mode)) Binary files Taken from this answer.\n(defun +hexl/buffer-binary-p (\u0026amp;optional buffer) \u0026#34;Return whether BUFFER or the current buffer is binary. A binary buffer is defined as containing at least one null byte. Returns either nil, or the position of the first null byte.\u0026#34; (with-current-buffer (or buffer (current-buffer)) (save-excursion (goto-char (point-min)) (search-forward (string ?\\x00) nil t 1)))) (defun +hexl/hexl-if-binary () \u0026#34;If `hexl-mode\u0026#39; is not already active, and the current buffer is binary, activate `hexl-mode\u0026#39;.\u0026#34; (interactive) (unless (eq major-mode \u0026#39;hexl-mode) (when (+hexl/buffer-binary-p) (hexl-mode)))) (add-to-list \u0026#39;magic-fallback-mode-alist \u0026#39;(+hexl/buffer-binary-p . hexl-mode) t) Very large files The very large files mode loads large files in chunks, allowing one to open ridiculously large files.\n(package! vlf) To make VLF available without delaying startup, we\u0026rsquo;ll just load it in quiet moments.\n(use-package! vlf-setup :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf) Evil I\u0026rsquo;m not using evil-escape, lets disable it.\n(package! evil-escape :disable t) (after! evil (setq evil-kill-on-visual-paste nil)) ; Don\u0026#39;t put overwritten text in the kill ring Aggressive indent (package! aggressive-indent) (use-package! aggressive-indent :commands (aggressive-indent-mode)) YASnippet Nested snippets are good, enable that.\n(setq yas-triggers-in-field t) Literate configuration Allow babel execution in doom CLI actions This file generates all my Doom config files, it works nicely, but for it to work with doom sync et al. I need to make sure that Org doesn\u0026rsquo;t try to confirm that I want to allow evaluation (I do!).\nThankfully Doom supports $DOOMDIR/cli.el file which is sourced every time a CLI command is run, so we can just enable evaluation by setting org-confirm-babel-evaluate to nil there.\nWhile we\u0026rsquo;re at it, we should silence org-babel-execute-src-block to avoid polluting the output.\n;;; cli.el -*- lexical-binding: t; -*- (setq org-confirm-babel-evaluate nil) (defun doom-shut-up-a (orig-fn \u0026amp;rest args) (quiet! (apply orig-fn args))) (advice-add \u0026#39;org-babel-execute-src-block :around #\u0026#39;doom-shut-up-a) Asynchronous tangling Doom adds an org-mode hook +literate-enable-recompile-h. This is a nice idea, but it\u0026rsquo;s too blocking for my taste. Since I trust my tangling to be fairly straightforward, I\u0026rsquo;ll just redefine it to a simpler, async, function.\n(defvar +literate-tangle--proc nil) (defvar +literate-tangle--proc-start-time nil) (defadvice! +literate-tangle-async-h () \u0026#34;A very simplified version of `+literate-tangle-h\u0026#39;, but async.\u0026#34; :override #\u0026#39;+literate-tangle-h (unless (getenv \u0026#34;__NOTANGLE\u0026#34;) (let ((default-directory doom-private-dir)) (when +literate-tangle--proc (message \u0026#34;Killing outdated tangle process...\u0026#34;) (set-process-sentinel +literate-tangle--proc #\u0026#39;ignore) (kill-process +literate-tangle--proc) (sit-for 0.3)) ; ensure the message is seen for a bit (setq +literate-tangle--proc-start-time (float-time) +literate-tangle--proc (start-process \u0026#34;tangle-config\u0026#34; (get-buffer-create \u0026#34; *tangle config*\u0026#34;) \u0026#34;emacs\u0026#34; \u0026#34;--batch\u0026#34; \u0026#34;--eval\u0026#34; (format \u0026#34;(progn \\ (require \u0026#39;ox) \\ (require \u0026#39;ob-tangle) \\ (setq org-confirm-babel-evaluate nil \\ org-inhibit-startup t \\ org-mode-hook nil \\ write-file-functions nil \\ before-save-hook nil \\ after-save-hook nil \\ vc-handled-backends nil \\ org-startup-folded nil \\ org-startup-indented nil) \\ (org-babel-tangle-file \\\u0026#34;%s\\\u0026#34; \\\u0026#34;%s\\\u0026#34;))\u0026#34; +literate-config-file (expand-file-name (concat doom-module-config-file \u0026#34;.el\u0026#34;))))) (set-process-sentinel +literate-tangle--proc #\u0026#39;+literate-tangle--sentinel) (run-at-time nil nil (lambda () (message \u0026#34;Tangling config.org\u0026#34;))) ; ensure shown after a save message \u0026#34;Tangling config.org...\u0026#34;))) (defun +literate-tangle--sentinel (process signal) (cond ((and (eq \u0026#39;exit (process-status process)) (= 0 (process-exit-status process))) (message \u0026#34;Tangled config.org sucessfully (took %.1fs)\u0026#34; (- (float-time) +literate-tangle--proc-start-time)) (setq +literate-tangle--proc nil)) ((memq (process-status process) (list \u0026#39;exit \u0026#39;signal)) (pop-to-buffer (get-buffer \u0026#34; *tangle config*\u0026#34;)) (message \u0026#34;Failed to tangle config.org (after %.1fs)\u0026#34; (- (float-time) +literate-tangle--proc-start-time)) (setq +literate-tangle--proc nil)))) (defun +literate-tangle-check-finished () (when (and (process-live-p +literate-tangle--proc) (yes-or-no-p \u0026#34;Config is currently retangling, would you please wait a few seconds?\u0026#34;)) (switch-to-buffer \u0026#34; *tangle config*\u0026#34;) (signal \u0026#39;quit nil))) (add-hook! \u0026#39;kill-emacs-hook #\u0026#39;+literate-tangle-check-finished) IDE Centaur tabs Disabled, not working correctly with Emacs Daemon + EmacsClient.\n(after! centaur-tabs (centaur-tabs-mode -1) (setq centaur-tabs-set-icons t centaur-tabs-modified-marker \u0026#34;⭘\u0026#34; centaur-tabs-close-button \u0026#34;×\u0026#34; centaur-tabs-gray-out-icons \u0026#39;buffer)) Treemacs (unpin! treemacs) (unpin! lsp-treemacs) (after! treemacs (require \u0026#39;dired) ;; My custom stuff (from tecosaur\u0026#39;s config) (setq +treemacs-file-ignore-extensions \u0026#39;(;; LaTeX \u0026#34;aux\u0026#34; \u0026#34;ptc\u0026#34; \u0026#34;fdb_latexmk\u0026#34; \u0026#34;fls\u0026#34; \u0026#34;synctex.gz\u0026#34; \u0026#34;toc\u0026#34; ;; LaTeX - bibliography \u0026#34;bbl\u0026#34; ;; LaTeX - glossary \u0026#34;glg\u0026#34; \u0026#34;glo\u0026#34; \u0026#34;gls\u0026#34; \u0026#34;glsdefs\u0026#34; \u0026#34;ist\u0026#34; \u0026#34;acn\u0026#34; \u0026#34;acr\u0026#34; \u0026#34;alg\u0026#34; ;; LaTeX - pgfplots \u0026#34;mw\u0026#34; ;; LaTeX - pdfx \u0026#34;pdfa.xmpi\u0026#34; ;; Python \u0026#34;pyc\u0026#34;)) (setq +treemacs-file-ignore-globs \u0026#39;(;; LaTeX \u0026#34;*/_minted-*\u0026#34; ;; AucTeX \u0026#34;*/.auctex-auto\u0026#34; \u0026#34;*/_region_.log\u0026#34; \u0026#34;*/_region_.tex\u0026#34; ;; Python \u0026#34;*/__pycache__\u0026#34;)) ;; Reload treemacs theme (setq doom-themes-treemacs-enable-variable-pitch nil doom-themes-treemacs-theme \u0026#34;doom-colors\u0026#34;) (doom-themes-treemacs-config) (setq treemacs-show-hidden-files nil treemacs-hide-dot-git-directory t treemacs-width 30) (defvar +treemacs-file-ignore-extensions \u0026#39;() \u0026#34;File extension which `treemacs-ignore-filter\u0026#39; will ensure are ignored\u0026#34;) (defvar +treemacs-file-ignore-globs \u0026#39;() \u0026#34;Globs which will are transformed to `+treemacs-file-ignore-regexps\u0026#39; which `+treemacs-ignore-filter\u0026#39; will ensure are ignored\u0026#34;) (defvar +treemacs-file-ignore-regexps \u0026#39;() \u0026#34;RegExps to be tested to ignore files, generated from `+treeemacs-file-ignore-globs\u0026#39;\u0026#34;) (defun +treemacs-file-ignore-generate-regexps () \u0026#34;Generate `+treemacs-file-ignore-regexps\u0026#39; from `+treemacs-file-ignore-globs\u0026#39;\u0026#34; (setq +treemacs-file-ignore-regexps (mapcar \u0026#39;dired-glob-regexp +treemacs-file-ignore-globs))) (unless (equal +treemacs-file-ignore-globs \u0026#39;()) (+treemacs-file-ignore-generate-regexps)) (defun +treemacs-ignore-filter (file full-path) \u0026#34;Ignore files specified by `+treemacs-file-ignore-extensions\u0026#39;, and `+treemacs-file-ignore-regexps\u0026#39;\u0026#34; (or (member (file-name-extension file) +treemacs-file-ignore-extensions) (let ((ignore-file nil)) (dolist (regexp +treemacs-file-ignore-regexps ignore-file) (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil))))))) (add-to-list \u0026#39;treemacs-ignored-file-predicates #\u0026#39;+treemacs-ignore-filter)) Projectile ;; Run `M-x projectile-project-search-path\u0026#39; to reload paths from this variable (setq projectile-project-search-path \u0026#39;(\u0026#34;~/PhD/workspace\u0026#34; \u0026#34;~/PhD/workspace-no\u0026#34; \u0026#34;~/PhD/workspace-no/ez-wheel/swd-starter-kit-repo\u0026#34; \u0026#34;~/Projects/foss_projects\u0026#34;)) (setq projectile-ignored-projects \u0026#39;(\u0026#34;~/\u0026#34; \u0026#34;/tmp\u0026#34; \u0026#34;~/.cache\u0026#34; \u0026#34;~/.emacs.d/.local/straight/repos/\u0026#34;)) (defun projectile-ignored-project-function (filepath) \u0026#34;Return t if FILEPATH is within any of `projectile-ignored-projects\u0026#39;\u0026#34; (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects))) Tramp Let\u0026rsquo;s try to make tramp handle prompts better\n(after! tramp (setenv \u0026#34;SHELL\u0026#34; \u0026#34;/bin/bash\u0026#34;) (setq tramp-shell-prompt-pattern \u0026#34;\\\\(?:^\\\\| \\\\)[^]#$%\u0026gt;\\n]*#?[]#$%\u0026gt;] *\\\\(\u001b\\\\[[0-9;]*[a-zA-Z] *\\\\)*\u0026#34;)) ;; default +  Eros-eval This makes the result of evals slightly prettier.\n(setq eros-eval-result-prefix \u0026#34;⟹ \u0026#34;) dir-locals.el Reload dir-locals.el variables after modification. Taken from this answer.\n(defun +dir-locals-reload-for-current-buffer () \u0026#34;reload dir locals for the current buffer\u0026#34; (interactive) (let ((enable-local-variables :all)) (hack-dir-local-variables-non-file-buffer))) (defun +dir-locals-reload-for-all-buffers-in-this-directory () \u0026#34;For every buffer with the same `default-directory` as the current buffer\u0026#39;s, reload dir-locals.\u0026#34; (interactive) (let ((dir default-directory)) (dolist (buffer (buffer-list)) (with-current-buffer buffer (when (equal default-directory dir) (+dir-locals-reload-for-current-buffer)))))) (add-hook! \u0026#39;(emacs-lisp-mode-hook lisp-data-mode-hook) (defun enable-autoreload-for-dir-locals () (when (and (buffer-file-name) (equal dir-locals-file (file-name-nondirectory (buffer-file-name)))) (message \u0026#34;Dir-locals will be reloaded after saving.\u0026#34;) (add-hook \u0026#39;after-save-hook \u0026#39;+dir-locals-reload-for-all-buffers-in-this-directory nil t)))) Symbols Emojify For starters, twitter\u0026rsquo;s emojis look nicer than emoji-one. Other than that, this is pretty great OOTB 😀.\n(setq emojify-emoji-set \u0026#34;twemoji-v2\u0026#34;) One minor annoyance is the use of emojis over the default character when the default is actually preferred. This occurs with overlay symbols I use in Org mode, such as checkbox state, and a few other miscellaneous cases.\nWe can accommodate our preferences by deleting those entries from the emoji hash table\n(defvar emojify-disabled-emojis \u0026#39;(;; Org \u0026#34;◼\u0026#34; \u0026#34;☑\u0026#34; \u0026#34;☸\u0026#34; \u0026#34;⚙\u0026#34; \u0026#34;⏩\u0026#34; \u0026#34;⏪\u0026#34; \u0026#34;⬆\u0026#34; \u0026#34;⬇\u0026#34; \u0026#34;❓\u0026#34; \u0026#34;⏱\u0026#34; \u0026#34;®\u0026#34; \u0026#34;™\u0026#34; \u0026#34;🅱\u0026#34; \u0026#34;❌\u0026#34; \u0026#34;✳\u0026#34; ;; Terminal powerline \u0026#34;✔\u0026#34; ;; Box drawing \u0026#34;▶\u0026#34; \u0026#34;◀\u0026#34;) \u0026#34;Characters that should never be affected by `emojify-mode\u0026#39;.\u0026#34;) (defadvice! emojify-delete-from-data () \u0026#34;Ensure `emojify-disabled-emojis\u0026#39; don\u0026#39;t appear in `emojify-emojis\u0026#39;.\u0026#34; :after #\u0026#39;emojify-set-emoji-data (dolist (emoji emojify-disabled-emojis) (remhash emoji emojify-emojis))) Now, it would be good to have a minor mode which allowed you to type ascii/gh emojis and get them converted to unicode. Let’s make one.\n(defun emojify--replace-text-with-emoji (orig-fn emoji text buffer start end \u0026amp;optional target) \u0026#34;Modify `emojify--propertize-text-for-emoji\u0026#39; to replace ascii/github emoticons with unicode emojis, on the fly.\u0026#34; (if (or (not emoticon-to-emoji) (= 1 (length text))) (funcall orig-fn emoji text buffer start end target) (delete-region start end) (insert (ht-get emoji \u0026#34;unicode\u0026#34;)))) (define-minor-mode emoticon-to-emoji \u0026#34;Write ascii/gh emojis, and have them converted to unicode live.\u0026#34; :global nil :init-value nil (if emoticon-to-emoji (progn (setq-local emojify-emoji-styles \u0026#39;(ascii github unicode)) (advice-add \u0026#39;emojify--propertize-text-for-emoji :around #\u0026#39;emojify--replace-text-with-emoji) (unless emojify-mode (emojify-turn-on-emojify-mode))) (setq-local emojify-emoji-styles (default-value \u0026#39;emojify-emoji-styles)) (advice-remove \u0026#39;emojify--propertize-text-for-emoji #\u0026#39;emojify--replace-text-with-emoji))) This new minor mode of ours will be nice for messages, so let\u0026rsquo;s hook it in for Email and IRC.\n(add-hook! \u0026#39;(mu4e-compose-mode org-msg-edit-mode circe-channel-mode) (emoticon-to-emoji 1)) Ligatures Extra ligatures are good, however, I\u0026rsquo;d like to see my keywords! Lets disable them in C/C++, Rust and Python modes.\n(setq +ligatures-extras-in-modes \u0026#39;(not c-mode c++-mode rust-mode python-mode)) Checkers (spell \u0026amp; grammar) Install back-end For flyspell + hunspell\nsudo pacman -S hunspell hunspell-en_US hunspell-en_GB hunspell-fr For spell-fu\nsudo pacman -S aspell aspell-en aspell-fr Spell-Fu Now, spell-fu supports multiple languages! Lets add English, French and Arabic. So I can \u0026ldquo;mélanger les langues sans avoir de problèmes!\u0026rdquo;.\n(after! spell-fu (defun +spell-fu-register-dictionary (lang) \u0026#34;Add `LANG` to spell-fu multi-dict, with a personal dictionary.\u0026#34; ;; Add the dictionary (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary lang)) (let ((personal-dict-file (expand-file-name (format \u0026#34;aspell.%s.pws\u0026#34; lang) doom-private-dir))) ;; Create an empty personal dictionary if it doesn\u0026#39;t exists (unless (file-exists-p personal-dict-file) (write-region \u0026#34;\u0026#34; nil personal-dict-file)) ;; Add the personal dictionary (spell-fu-dictionary-add (spell-fu-get-personal-dictionary (format \u0026#34;%s-personal\u0026#34; lang) personal-dict-file)))) (add-hook \u0026#39;spell-fu-mode-hook (lambda () (+spell-fu-register-dictionary \u0026#34;en\u0026#34;) (+spell-fu-register-dictionary \u0026#34;fr\u0026#34;)))) Guess language (package! guess-language :recipe (:host github :repo \u0026#34;tmalsburg/guess-language.el\u0026#34;)) (use-package! guess-language :config (setq guess-language-languages \u0026#39;(en fr ar) guess-language-min-paragraph-length 35 guess-language-langcodes \u0026#39;((en . (\u0026#34;en_US\u0026#34; \u0026#34;English\u0026#34; \u0026#34;🇺🇸\u0026#34; \u0026#34;English\u0026#34;)) (fr . (\u0026#34;francais\u0026#34; \u0026#34;French\u0026#34; \u0026#34;🇫🇷\u0026#34; \u0026#34;Français\u0026#34;)) (ar . (\u0026#34;arabic\u0026#34; \u0026#34;Arabic\u0026#34; \u0026#34;🇩🇿\u0026#34; \u0026#34;Arabic\u0026#34;)))) ;; :hook (text-mode . guess-language-mode) :commands (guess-language guess-language-mode guess-language-region guess-language-mark-lines)) Grammarly Use either eglot-grammarly or lsp-grammarly.\n(package! grammarly :recipe (:host github :repo \u0026#34;emacs-grammarly/grammarly\u0026#34;)) ;; Install the suitable LSP frontend (Eglot / LSP Mode) (package! eglot-grammarly :disable (not (featurep! :tools lsp +eglot)) :recipe (:host github :repo \u0026#34;emacs-grammarly/eglot-grammarly\u0026#34;)) (package! lsp-grammarly :disable (and (featurep! :tools lsp) (not (featurep! :tools lsp +eglot))) :recipe (:host github :repo \u0026#34;emacs-grammarly/lsp-grammarly\u0026#34;)) (use-package! grammarly :config (grammarly-load-from-authinfo)) (use-package! eglot-grammarly :when (featurep! :tools lsp +eglot) :commands (+lsp-grammarly-load) :init (defun +lsp-grammarly-load () \u0026#34;Load Grammarly LSP server for Eglot.\u0026#34; (interactive) (require \u0026#39;eglot-grammarly) (call-interactively #\u0026#39;eglot))) (use-package! lsp-grammarly :when (and (featurep! :tools lsp) (not (featurep! :tools lsp +eglot))) :commands (+lsp-grammarly-load) :init (defun +lsp-grammarly-load () \u0026#34;Load Grammarly LSP server for LSP Mode.\u0026#34; (interactive) (require \u0026#39;lsp-grammarly) (lsp-deferred)) ;; or (lsp) :config (set-lsp-priority! \u0026#39;grammarly-ls 1)) Grammalecte (package! flycheck-grammalecte :recipe (:host github :repo \u0026#34;milouse/flycheck-grammalecte\u0026#34;)) (use-package! flycheck-grammalecte :commands (flycheck-grammalecte-correct-error-at-point grammalecte-conjugate-verb grammalecte-define grammalecte-define-at-point grammalecte-find-synonyms grammalecte-find-synonyms-at-point) :init (setq grammalecte-settings-file (expand-file-name \u0026#34;grammalecte/grammalecte-cache.el\u0026#34; doom-etc-dir) grammalecte-python-package-directory (expand-file-name \u0026#34;grammalecte/grammalecte\u0026#34; doom-etc-dir)) (setq flycheck-grammalecte-report-spellcheck t flycheck-grammalecte-report-grammar t flycheck-grammalecte-report-apos nil flycheck-grammalecte-report-esp nil flycheck-grammalecte-report-nbsp nil flycheck-grammalecte-filters \u0026#39;(\u0026#34;(?m)^# ?-*-.+$\u0026#34; ;; Ignore LaTeX equations (inline and block) \u0026#34;\\\\$.*?\\\\$\u0026#34; \u0026#34;(?s)\\\\\\\\begin{equation}.*?\\\\\\\\end{equation}\u0026#34;)) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:prefix-map (\u0026#34;g\u0026#34; . \u0026#34;grammalecte\u0026#34;) :desc \u0026#34;Correct error at point\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;flycheck-grammalecte-correct-error-at-point :desc \u0026#34;Conjugate a verb\u0026#34; \u0026#34;V\u0026#34; #\u0026#39;grammalecte-conjugate-verb :desc \u0026#34;Define a word\u0026#34; \u0026#34;W\u0026#34; #\u0026#39;grammalecte-define :desc \u0026#34;Conjugate a verb at point\u0026#34; \u0026#34;w\u0026#34; #\u0026#39;grammalecte-define-at-point :desc \u0026#34;Find synonyms\u0026#34; \u0026#34;S\u0026#34; #\u0026#39;grammalecte-find-synonyms :desc \u0026#34;Find synonyms at point\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;grammalecte-find-synonyms-at-point)) :config (grammalecte-download-grammalecte) (flycheck-grammalecte-setup) (add-to-list \u0026#39;flycheck-grammalecte-enabled-modes \u0026#39;fountain-mode)) LanguageTool Doom\u0026rsquo;s :checkers grammar This section defines some shortcuts to check the grammar.\n(setq langtool-default-language \u0026#34;auto\u0026#34;) ;; Keybinding for `langtool\u0026#39; (of module `:checkers grammar\u0026#39;) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :checkers grammar) :prefix-map (\u0026#34;l\u0026#34; . \u0026#34;langtool\u0026#34;) :desc \u0026#34;Check\u0026#34; \u0026#34;l\u0026#34; #\u0026#39;langtool-check :desc \u0026#34;Correct buffer\u0026#34; \u0026#34;b\u0026#34; #\u0026#39;langtool-correct-buffer :desc \u0026#34;Stop server\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;langtool-server-stop :desc \u0026#34;Done checking\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;langtool-check-done :desc \u0026#34;Show msg at point\u0026#34; \u0026#34;m\u0026#34; #\u0026#39;langtool-show-message-at-point :desc \u0026#34;Next error\u0026#34; \u0026#34;n\u0026#34; #\u0026#39;langtool-goto-next-error :desc \u0026#34;Previous error\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;langtool-goto-previous-error :desc \u0026#34;Switch default language\u0026#34; \u0026#34;L\u0026#34; #\u0026#39;langtool-switch-default-language)) LTeX Watch the LanguageTool LSP and Eglot implementations.\n;; Needed, but not installed automatically (package! github-tags :recipe (:host github :repo \u0026#34;jcs-elpa/github-tags\u0026#34;)) (package! lsp-ltex :disable (and (featurep! :tools lsp) (featurep! :tools lsp +eglot)) :recipe (:host github :repo \u0026#34;emacs-languagetool/lsp-ltex\u0026#34;)) (package! eglot-ltex :disable (not (featurep! :tools lsp +eglot)) :recipe (:host github :repo \u0026#34;emacs-languagetool/eglot-ltex\u0026#34;)) (use-package! lsp-ltex :commands (+lsp-ltex-load) :init (setq lsp-ltex-language \u0026#34;auto\u0026#34; lsp-ltex-mother-tongue \u0026#34;ar\u0026#34; lsp-ltex-disabled-rules \u0026#39;(:fr [\u0026#34;WHITESPACE\u0026#34; \u0026#34;FRENCH_WHITESPACE\u0026#34; \u0026#34;DEUX_POINTS_ESPACE\u0026#34;] :en [\u0026#34;WHITESPACE\u0026#34;])) (defun +lsp-ltex-load () \u0026#34;Load LTeX LSP server.\u0026#34; (interactive) (require \u0026#39;lsp-ltex) (lsp-deferred)) (defvar +languagetool-process-name \u0026#34;ltex-languagetool-server\u0026#34;) (defun +languagetool-server-start (\u0026amp;optional port) \u0026#34;Start LanguageTool server with PORT.\u0026#34; (interactive) (if (process-live-p (get-process +languagetool-process-name)) (message \u0026#34;LanguageTool server already running.\u0026#34;) (when (start-process +languagetool-process-name \u0026#34; *LanguageTool server*\u0026#34; \u0026#34;languagetool\u0026#34; \u0026#34;--http\u0026#34; \u0026#34;--port\u0026#34; (format \u0026#34;%s\u0026#34; (or port 8081)) \u0026#34;--languageModel\u0026#34; \u0026#34;/usr/share/ngrams\u0026#34;) (message \u0026#34;Started LanguageTool server.\u0026#34;)))) (defun +languagetool-server-stop () \u0026#34;Stop the LanguageTool server.\u0026#34; (interactive) (if (process-live-p (get-process +languagetool-process-name)) (when (kill-process +languagetool-process-name) (message \u0026#34;Stopped LanguageTool server.\u0026#34;)) (message \u0026#34;No LanguageTool server running.\u0026#34;))) (defun +languagetool-server-restart (\u0026amp;optional port) \u0026#34;Restart the LanguageTool server with PORT, start new instance if not running.\u0026#34; (interactive) (when (process-live-p (get-process +languagetool-process-name)) (+languagetool-server-stop)) (sit-for 5) (+languagetool-server-start port)) ;; If LanguageTool is installed, use it over the LT bundeled with ltex-ls ;; In this way, I can configure it to use the extra stuff installed from the ;; pacakge manager (like ngrams) (when LANGUAGETOOL-OK-P (setq lsp-ltex-languagetool-http-server-uri \u0026#34;http://localhost:8081\u0026#34;) (+languagetool-server-start)) :config (set-lsp-priority! \u0026#39;ltex-ls 2) (setq flycheck-checker-error-threshold 5000)) Flycheck (package! flycheck-languagetool :disable t ;; Disabled, using LTeX LSP :recipe (:host github :repo \u0026#34;abougouffa/flycheck-languagetool\u0026#34;)) ;; \u0026#34;emacs-languagetool/flycheck-languagetool\u0026#34; (use-package! flycheck-languagetool :when LANGUAGETOOL-OK-P :hook (text-mode . flycheck-languagetool-setup) :init (setq flycheck-languagetool-server-command \u0026#39;(\u0026#34;languagetool\u0026#34; \u0026#34;--http\u0026#34;) flycheck-languagetool-language \u0026#34;auto\u0026#34; ;; See https://languagetool.org/http-api/swagger-ui/#!/default/post_check flycheck-languagetool-check-params \u0026#39;((\u0026#34;disabledRules\u0026#34; . \u0026#34;FRENCH_WHITESPACE,WHITESPACE,DEUX_POINTS_ESPACE\u0026#34;) (\u0026#34;motherTongue\u0026#34; . \u0026#34;ar\u0026#34;)))) System tools Disk usage (package! disk-usage) (use-package! disk-usage :commands (disk-usage)) Chezmoi (package! chezmoi) (use-package! chezmoi :when CHEZMOI-OK-P :commands (chezmoi-write chezmoi-magit-status chezmoi-diff chezmoi-ediff chezmoi-find chezmoi-write-files chezmoi-open-other chezmoi-template-buffer-display chezmoi-mode) :config ;; Company integration (when (featurep! :completion company) (defun +chezmoi--company-backend-h () (require \u0026#39;chezmoi-company) (if chezmoi-mode (add-to-list \u0026#39;company-backends \u0026#39;chezmoi-company-backend) (delete \u0026#39;chezmoi-company-backend \u0026#39;company-backends))) (add-hook \u0026#39;chezmoi-mode-hook #\u0026#39;+chezmoi--company-backend-h)) ;; Integrate with evil mode by toggling template display when entering insert mode. (when (featurep! :editor evil) (defun +chezmoi--evil-insert-state-enter-h () \u0026#34;Run after evil-insert-state-entry.\u0026#34; (chezmoi-template-buffer-display nil (point)) (remove-hook \u0026#39;after-change-functions #\u0026#39;chezmoi-template--after-change 1)) (defun +chezmoi--evil-insert-state-exit-h () \u0026#34;Run after evil-insert-state-exit.\u0026#34; (chezmoi-template-buffer-display nil) (chezmoi-template-buffer-display t) (add-hook \u0026#39;after-change-functions #\u0026#39;chezmoi-template--after-change nil 1)) (defun +chezmoi--evil-h () (if chezmoi-mode (progn (add-hook \u0026#39;evil-insert-state-entry-hook #\u0026#39;+chezmoi--evil-insert-state-enter-h nil 1) (add-hook \u0026#39;evil-insert-state-exit-hook #\u0026#39;+chezmoi--evil-insert-state-exit-h nil 1)) (progn (remove-hook \u0026#39;evil-insert-state-entry-hook #\u0026#39;+chezmoi--evil-insert-state-enter-h 1) (remove-hook \u0026#39;evil-insert-state-exit-hook #\u0026#39;+chezmoi--evil-insert-state-exit-h 1)))) (add-hook \u0026#39;chezmoi-mode-hook #\u0026#39;+chezmoi--evil-h))) Aweshell (package! aweshell :recipe (:host github :repo \u0026#34;manateelazycat/aweshell\u0026#34;)) (use-package! aweshell :commands (aweshell-new aweshell-dedicated-open)) Lemon (package! lemon :recipe (:host nil :repo \u0026#34;https://codeberg.org/emacs-weirdware/lemon.git\u0026#34;)) (use-package! lemon :commands (lemon-mode lemon-display) :config (require \u0026#39;lemon-cpu) (require \u0026#39;lemon-memory) (require \u0026#39;lemon-network) (setq lemon-delay 5 lemon-refresh-rate 2 lemon-monitors (list \u0026#39;((lemon-cpufreq-linux :display-opts \u0026#39;(:sparkline (:type gridded))) (lemon-cpu-linux) (lemon-memory-linux) (lemon-linux-network-tx) (lemon-linux-network-rx))))) eCryptfs (defvar +ecryptfs-private-dir \u0026#34;Private\u0026#34;) (defvar +ecryptfs-buffer-name \u0026#34;*emacs-ecryptfs*\u0026#34;) (defvar +ecryptfs-config-dir (expand-file-name \u0026#34;~/.ecryptfs\u0026#34;)) (defvar +ecryptfs-passphrase-gpg (expand-file-name \u0026#34;~/.ecryptfs/my-pass.gpg\u0026#34;)) (defvar +ecryptfs--wrapping-independent-p (not (null (expand-file-name \u0026#34;wrapping-independent\u0026#34; +ecryptfs-config-dir)))) (defvar +ecryptfs--wrapped-passphrase-file (expand-file-name \u0026#34;wrapped-passphrase\u0026#34; +ecryptfs-config-dir)) (defvar +ecryptfs--mount-passphrase-sig-file (concat (expand-file-name +ecryptfs-private-dir +ecryptfs-config-dir) \u0026#34;.sig\u0026#34;)) (defvar +ecryptfs--mount-private-cmd \u0026#34;/sbin/mount.ecryptfs_private\u0026#34;) (defvar +ecryptfs--umount-private-cmd \u0026#34;/sbin/umount.ecryptfs_private\u0026#34;) (defvar +ecryptfs--passphrase (lambda () (s-trim-right ;; To remove the new line (epg-decrypt-file (epg-make-context) +ecryptfs-passphrase-gpg nil)))) (defvar +ecryptfs--encrypt-filenames-p (not (eq 1 (with-temp-buffer (insert-file-contents +ecryptfs--mount-passphrase-sig-file) (count-lines (point-min) (point-max)))))) (defvar +ecryptfs--command-format (if +ecryptfs--encrypt-filenames-p \u0026#34;ecryptfs-insert-wrapped-passphrase-into-keyring %s \u0026#39;%s\u0026#39;\u0026#34; \u0026#34;ecryptfs-unwrap-passphrase %s \u0026#39;%s\u0026#39; | ecryptfs-add-passphrase -\u0026#34;)) (defun +ecryptfs-mount-private () (interactive) (unless (and (file-exists-p +ecryptfs--wrapped-passphrase-file) (file-exists-p +ecryptfs--mount-passphrase-sig-file)) (error \u0026#34;Encrypted private directory \\\u0026#34;%s\\\u0026#34; is not setup properly.\u0026#34; +ecryptfs-private-dir) (return)) (let ((try-again t)) (while (and ;; In the first iteration, we try to silently mount the ecryptfs private directory, ;; this would succeed if the key is available in the keyring. (shell-command +ecryptfs--mount-private-cmd +ecryptfs-buffer-name) try-again) (setq try-again nil) (message \u0026#34;Encrypted filenames mode [%s].\u0026#34; (if +ecryptfs--encrypt-filenames-p \u0026#34;ENABLED\u0026#34; \u0026#34;DISABLED\u0026#34;)) (shell-command (format +ecryptfs--command-format +ecryptfs--wrapped-passphrase-file (funcall +ecryptfs--passphrase)) +ecryptfs-buffer-name)) (message \u0026#34;Ecryptfs mount private.\u0026#34;))) (defun +ecryptfs-umount-private () (interactive) (while (string-match-p \u0026#34;Sessions still open, not unmounting\u0026#34; (shell-command-to-string +ecryptfs--umount-private-cmd))) (message \u0026#34;Unmounted private directory.\u0026#34;)) Features Weather ;; lisp/wttrin/wttrin.el taken from: ;; https://raw.githubusercontent.com/tecosaur/emacs-config/master/lisp/wttrin/wttrin.el (package! wttrin :recipe (:local-repo \u0026#34;lisp/wttrin\u0026#34;)) (use-package! wttrin :commands wttrin) OpenStreetMap (package! osm) (use-package! osm :commands (osm-home osm-search osm-server osm-goto osm-gpx-show osm-bookmark-jump) :custom ;; Take a look at the customization group `osm\u0026#39; for more options. (osm-server \u0026#39;default) ;; Configure the tile server (osm-copyright t) ;; Display the copyright information :init (setq osm-tile-directory (expand-file-name \u0026#34;osm\u0026#34; doom-etc-dir)) ;; Load Org link support (with-eval-after-load \u0026#39;org (require \u0026#39;osm-ol))) Islamic prayer times (package! awqat :recipe (:host github :repo \u0026#34;zkry/awqat\u0026#34;)) (use-package! awqat :load-path \u0026#34;~/Projects/foss_projects/awqat\u0026#34; :commands (awqat-display-prayer-time-mode awqat-times-for-day) :config ;; Make sure `calendar-latitude\u0026#39; and `calendar-longitude\u0026#39; are set, ;; otherwise, set them here. (setq awqat-asr-hanafi nil awqat-mode-line-format \u0026#34; 🕌 ${prayer} (${hours}h${minutes}m) \u0026#34;) (awqat-set-preset-french-muslims)) Info colors Better colors for manual pages.\n(package! info-colors) (use-package! info-colors :commands (info-colors-fontify-node)) (add-hook \u0026#39;Info-selection-hook \u0026#39;info-colors-fontify-node) Zotero Zotxt (package! zotxt) (use-package! zotxt :when ZOTERO-OK-P :commands org-zotxt-mode) CRDT Collaborative editing for geeks! crdt.el adds support for Conflict-free Replicated Data Type.\n(package! crdt) (use-package! crdt :commands (crdt-share-buffer crdt-connect crdt-visualize-author-mode crdt-org-sync-overlay-mode)) The Silver Searcher An Emacs front-end to The Silver Searcher, first we need to install ag using sudo pacman -S the_silver_searcher.\n(package! ag) (use-package! ag :when AG-OK-P :commands (ag ag-files ag-regexp ag-project ag-project-files ag-project-regexp)) Emacs Application Framework EAF is presented as: A free/libre and open-source extensible framework that revolutionizes the graphical capabilities of Emacs. Or the key to ultimately Live in Emacs.\nFirst, install EAF as specified in the project\u0026rsquo;s readme. To update EAF, we need to run git pull ; ./install-eaf.py in lisp/emacs-application-framework and (M-x eaf-install-and-update) in Emacs. This updates EAF, applications and their dependencies.\n(defconst EAF-DIR (expand-file-name \u0026#34;emacs-application-framework\u0026#34; doom-etc-dir)) (use-package! eaf :when EAF-OK-P :load-path EAF-DIR :commands (eaf-open eaf-open-browser eaf-open-jupyter eaf-open-mail-as-html) :init (defvar +eaf-enabled-apps \u0026#39;(org mail browser mindmap jupyter org-previewer markdown-previewer)) ;; file-manager file-browser ;; file-sender music-player video-player ;; git image-viewer :config ;; Generic (setq eaf-start-python-process-when-require t eaf-kill-process-after-last-buffer-closed t eaf-fullscreen-p nil) ;; Debug (setq eaf-enable-debug nil) ;; Web engine (setq eaf-webengine-font-family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; eaf-webengine-fixed-font-family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; eaf-webengine-serif-font-family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; eaf-webengine-font-size 14 eaf-webengine-fixed-font-size 14 eaf-webengine-download-path \u0026#34;~/Downloads\u0026#34; eaf-webengine-enable-plugin t eaf-webengine-enable-javascript t eaf-webengine-enable-javascript-access-clipboard t eaf-webengine-enable-scrollbar t eaf-webengine-default-zoom 1.25 eaf-webengine-scroll-step 200) (when (display-graphic-p) (require \u0026#39;eaf-all-the-icons)) ;; Browser settings (when (member \u0026#39;browser +eaf-enabled-apps) (setq eaf-browser-continue-where-left-off t eaf-browser-dark-mode \u0026#34;follow\u0026#34; eaf-browser-enable-adblocker t eaf-browser-enable-autofill nil eaf-browser-remember-history t eaf-browser-ignore-history-list \u0026#39;(\u0026#34;google.com/search\u0026#34; \u0026#34;file://\u0026#34;) eaf-browser-text-selection-color \u0026#34;auto\u0026#34; eaf-browser-translate-language \u0026#34;fr\u0026#34; eaf-browser-blank-page-url \u0026#34;https://www.duckduckgo.com\u0026#34; eaf-browser-chrome-history-file \u0026#34;~/.config/google-chrome/Default/History\u0026#34; eaf-browser-default-search-engine \u0026#34;duckduckgo\u0026#34; eaf-browser-continue-where-left-off nil) (require \u0026#39;eaf-browser) ;; Make EAF Browser my default browser (setq browse-url-browser-function #\u0026#39;eaf-open-browser) (defalias \u0026#39;browse-web #\u0026#39;eaf-open-browser)) ;; File manager settings (when (member \u0026#39;file-manager +eaf-enabled-apps) (setq eaf-file-manager-show-preview nil eaf-find-alternate-file-in-dired t eaf-file-manager-show-hidden-file t eaf-file-manager-show-icon t) (require \u0026#39;eaf-file-manager)) ;; File Browser (when (member \u0026#39;file-browser +eaf-enabled-apps) (require \u0026#39;eaf-file-browser)) ;; PDF Viewer settings (when (member \u0026#39;pdf-viewer +eaf-enabled-apps) (setq eaf-pdf-dark-mode \u0026#34;follow\u0026#34; eaf-pdf-show-progress-on-page nil eaf-pdf-dark-exclude-image t eaf-pdf-notify-file-changed t) (require \u0026#39;eaf-pdf-viewer) (after! org ;; Use EAF PDF Viewer in Org (defun +eaf-org-open-file-fn (file \u0026amp;optional link) \u0026#34;An wrapper function on `eaf-open\u0026#39;.\u0026#34; (eaf-open file)) ;; use `emacs-application-framework\u0026#39; to open PDF file: link (add-to-list \u0026#39;org-file-apps \u0026#39;(\u0026#34;\\\\.pdf\\\\\u0026#39;\u0026#34; . +eaf-org-open-file-fn))) (after! latex ;; Link EAF with the LaTeX compiler in emacs. When a .tex file is open, ;; the Command\u0026gt;Compile and view (C-c C-a) option will compile the .tex ;; file into a .pdf file and display it using EAF. Double clicking on the ;; PDF side jumps to editing the clicked section. (add-to-list \u0026#39;TeX-command-list \u0026#39;(\u0026#34;XeLaTeX\u0026#34; \u0026#34;%`xelatex --synctex=1%(mode)%\u0026#39; %t\u0026#34; TeX-run-TeX nil t)) (add-to-list \u0026#39;TeX-view-program-list \u0026#39;(\u0026#34;eaf\u0026#34; eaf-pdf-synctex-forward-view)) (add-to-list \u0026#39;TeX-view-program-selection \u0026#39;(output-pdf \u0026#34;eaf\u0026#34;)))) ;; Org (when (member \u0026#39;rss-reader +eaf-enabled-apps) (setq eaf-rss-reader-split-horizontally nil eaf-rss-reader-web-page-other-window t) (require \u0026#39;eaf-org)) ;; Org (when (member \u0026#39;org +eaf-enabled-apps) (require \u0026#39;eaf-org)) ;; Mail (when (member \u0026#39;mail +eaf-enabled-apps) (require \u0026#39;eaf-mail)) ;; Org Previewer (when (member \u0026#39;org-previewer +eaf-enabled-apps) (setq eaf-org-dark-mode \u0026#34;follow\u0026#34;) (require \u0026#39;eaf-org-previewer)) ;; Markdown Previewer (when (member \u0026#39;markdown-previewer +eaf-enabled-apps) (setq eaf-markdown-dark-mode \u0026#34;follow\u0026#34;) (require \u0026#39;eaf-markdown-previewer)) ;; Jupyter (when (member \u0026#39;jupyter +eaf-enabled-apps) (setq eaf-jupyter-dark-mode \u0026#34;follow\u0026#34; eaf-jupyter-font-family \u0026#34;JuliaMono\u0026#34; eaf-jupyter-font-size 13) (require \u0026#39;eaf-jupyter)) ;; Mindmap (when (member \u0026#39;mindmap +eaf-enabled-apps) (setq eaf-mindmap-dark-mode \u0026#34;follow\u0026#34; eaf-mindmap-save-path \u0026#34;~/Dropbox/Mindmap\u0026#34;) (require \u0026#39;eaf-mindmap)) ;; File Sender (when (member \u0026#39;file-sender +eaf-enabled-apps) (require \u0026#39;eaf-file-sender)) ;; Music Player (when (member \u0026#39;music-player +eaf-enabled-apps) (require \u0026#39;eaf-music-player)) ;; Video Player (when (member \u0026#39;video-player +eaf-enabled-apps) (require \u0026#39;eaf-video-player)) ;; Image Viewer (when (member \u0026#39;image-viewer +eaf-enabled-apps) (require \u0026#39;eaf-image-viewer)) ;; Git (when (member \u0026#39;git +eaf-enabled-apps) (require \u0026#39;eaf-git)) ;; EVIL keybindings for Doom (after! evil (require \u0026#39;eaf-evil) (define-key key-translation-map (kbd \u0026#34;SPC\u0026#34;) (lambda (prompt) (if (derived-mode-p \u0026#39;eaf-mode) (pcase eaf--buffer-app-name (\u0026#34;browser\u0026#34; (if (eaf-call-sync \u0026#34;execute_function\u0026#34; eaf--buffer-id \u0026#34;is_focus\u0026#34;) (kbd \u0026#34;SPC\u0026#34;) (kbd eaf-evil-leader-key))) (\u0026#34;pdf-viewer\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;image-viewer\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;music-player\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;video-player\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;mindmap\u0026#34; (kbd eaf-evil-leader-key)) (_ (kbd \u0026#34;SPC\u0026#34;))) (kbd \u0026#34;SPC\u0026#34;)))))) Bitwarden (package! bitwarden :recipe (:host github :repo \u0026#34;seanfarley/emacs-bitwarden\u0026#34;)) (use-package! bitwarden ;;:config ;;(bitwarden-auth-source-enable) :when BITWARDEN-OK-P :init (setq bitwarden-automatic-unlock (lambda () (require \u0026#39;auth-source) (if-let* ((matches (auth-source-search :host \u0026#34;bitwarden.com\u0026#34; :max 1)) (entry (nth 0 matches)) (email (plist-get entry :user)) (pass (plist-get entry :secret))) (progn (setq bitwarden-user email) (if (functionp pass) (funcall pass) pass)) \u0026#34;\u0026#34;)))) PDF tools Dark mode The pdf-tools package supports dark mode (midnight), I use Emacs often to write and read PDF documents, so lets make it dark by default, this can be toggled using the m z.\n(after! pdf-tools (add-hook! \u0026#39;pdf-view-mode-hook (pdf-view-midnight-minor-mode 1))) LTDR Add the tldr.el client for TLDR pages.\n(package! tldr) (use-package! tldr :commands (tldr-update-docs tldr) :init (setq tldr-enabled-categories \u0026#39;(\u0026#34;common\u0026#34; \u0026#34;linux\u0026#34; \u0026#34;osx\u0026#34; \u0026#34;sunos\u0026#34;))) Fun Speed Type A game to practice speed typing in Emacs.\n(package! speed-type) (use-package! speed-type :commands (speed-type-text)) 2048 Game (package! 2048-game) (use-package! 2048-game :commands (2048-game)) Snow Let it snow in Emacs!\n(package! snow) (use-package! snow :commands (snow)) xkcd (package! xkcd :recipe (:host github :repo \u0026#34;vibhavp/emacs-xkcd\u0026#34;)) (use-package! xkcd :commands (xkcd-get xkcd) :config (setq xkcd-cache-dir (expand-file-name \u0026#34;xkcd/\u0026#34; doom-cache-dir) xkcd-cache-latest (expand-file-name \u0026#34;xkcd/latest\u0026#34; doom-cache-dir))) Applications Calendar (setq calendar-latitude 48.7 calendar-longitude 2.17 calendar-location-name \u0026#34;Orsay, FR\u0026#34; calendar-time-display-form \u0026#39;(24-hours \u0026#34;:\u0026#34; minutes (if time-zone \u0026#34; (\u0026#34;) time-zone (if time-zone \u0026#34;)\u0026#34;))) e-Books nov (package! nov) Use nov to read EPUB e-books.\n(use-package! nov :mode (\u0026#34;\\\\.epub\\\\\u0026#39;\u0026#34; . nov-mode) :config (map! :map nov-mode-map :n \u0026#34;RET\u0026#34; #\u0026#39;nov-scroll-up) (defun doom-modeline-segment--nov-info () (concat \u0026#34; \u0026#34; (propertize (cdr (assoc \u0026#39;creator nov-metadata)) \u0026#39;face \u0026#39;doom-modeline-project-parent-dir) \u0026#34; \u0026#34; (cdr (assoc \u0026#39;title nov-metadata)) \u0026#34; \u0026#34; (propertize (format \u0026#34;%d/%d\u0026#34; (1+ nov-documents-index) (length nov-documents)) \u0026#39;face \u0026#39;doom-modeline-info))) (advice-add \u0026#39;nov-render-title :override #\u0026#39;ignore) (defun +nov-mode-setup () (face-remap-add-relative \u0026#39;variable-pitch :family \u0026#34;Merriweather\u0026#34; :height 1.4 :width \u0026#39;semi-expanded) (face-remap-add-relative \u0026#39;default :height 1.3) (setq-local line-spacing 0.2 next-screen-context-lines 4 shr-use-colors nil) (require \u0026#39;visual-fill-column nil t) (setq-local visual-fill-column-center-text t visual-fill-column-width 80 nov-text-width 80) (visual-fill-column-mode 1) (hl-line-mode -1) (add-to-list \u0026#39;+lookup-definition-functions #\u0026#39;+lookup/dictionary-definition) (setq-local mode-line-format `((:eval (doom-modeline-segment--workspace-name)) (:eval (doom-modeline-segment--window-number)) (:eval (doom-modeline-segment--nov-info)) ,(propertize \u0026#34; %P \u0026#34; \u0026#39;face \u0026#39;doom-modeline-buffer-minor-mode) ,(propertize \u0026#34; \u0026#34; \u0026#39;face (if (doom-modeline--active) \u0026#39;mode-line \u0026#39;mode-line-inactive) \u0026#39;display `((space :align-to (- (+ right right-fringe right-margin) ,(* (let ((width (doom-modeline--font-width))) (or (and (= width 1) 1) (/ width (frame-char-width) 1.0))) (string-width (format-mode-line (cons \u0026#34;\u0026#34; \u0026#39;(:eval (doom-modeline-segment--major-mode)))))))))) (:eval (doom-modeline-segment--major-mode))))) (add-hook \u0026#39;nov-mode-hook #\u0026#39;+nov-mode-setup)) News feed elfeed Set RSS news feeds\n(setq elfeed-feeds \u0026#39;(\u0026#34;https://this-week-in-rust.org/rss.xml\u0026#34; \u0026#34;https://www.omgubuntu.co.uk/feed\u0026#34; \u0026#34;https://itsfoss.com/feed\u0026#34; \u0026#34;https://linuxhandbook.com/feed\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/robotics/fulltext\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/aerospace/fulltext\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/computing/fulltext\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/blog/automaton/fulltext\u0026#34; \u0026#34;https://developers.redhat.com/blog/feed\u0026#34; \u0026#34;https://lwn.net/headlines/rss\u0026#34;)) VPN configuration NetExtender wrapper I store my NetExtender VPN parameters in a GPG encrypted file. The credentials file contains a line of private parameters to pass to netExtender, like this:\necho \u0026#34;-u \u0026lt;USERNAME\u0026gt; -d \u0026lt;DOMAINE\u0026gt; -p \u0026lt;PASSWORD\u0026gt; -s \u0026lt;SERVER_IP\u0026gt;\u0026#34; \\ | gpg -c \u0026gt; netExtender-params.gpg Then I like to have a simple script which decrypt the credentials and launch a session via the netExtender command.\n#!/bin/bash if ! command -v netExtender \u0026amp;\u0026gt; /dev/null then echo \u0026#34;netExtender not found, installing from AUR using \u0026#39;yay\u0026#39;\u0026#34; yay -S netextender fi MY_LOGIN_PARAMS_FILE=\u0026#34;$HOME/.ssh/netExtender-params.gpg\u0026#34; echo \u0026#34;Y\\n\u0026#34; | netExtender --auto-reconnect \\ $(gpg -q --for-your-eyes-only --no-tty -d ${MY_LOGIN_PARAMS_FILE}) Launch NetExtender session from Emacs (when NETEXTENDER-OK-P (defvar +netextender-process-name \u0026#34;netextender\u0026#34;) (defvar +netextender-buffer-name \u0026#34;*netextender*\u0026#34;) (defvar +netextender-command \u0026#39;(\u0026#34;~/.local/bin/netextender\u0026#34;)) (defun +netextender-start () \u0026#34;Launch a NetExtender VPN session\u0026#34; (interactive) (unless (get-process +netextender-process-name) (if (make-process :name +netextender-process-name :buffer +netextender-buffer-name :command +netextender-command) (message \u0026#34;Started NetExtender VPN session\u0026#34;) (message \u0026#34;Cannot start NetExtender\u0026#34;)))) (defun +netextender-kill () \u0026#34;Kill the created NetExtender VPN session\u0026#34; (interactive) (when (get-process +netextender-process-name) (if (kill-buffer +netextender-buffer-name) (message \u0026#34;Killed NetExtender VPN session\u0026#34;) (message \u0026#34;Cannot kill NetExtender\u0026#34;))))) Email mu4e Configuring mu4e email accounts, note that you need to have a proper mbsyncrc file in the right directory.\nmbsync You will need to:\nInstall mu and isync (sudo pacman -S mu isync) Set up a proper configuration file for your accounts at ~/.mbsyncrc Run mu init --maildir=~/Maildir --my-address=user@host1 --my-address=user@host2 Run mbsync -c ~/.mbsyncrc -a For sending mails from mu4e, add a ~/.authinfo file, file contains a line in this format machine MAIL.DOMAIN.TLD port 587 login USER password PASSWD Encrypt the ~/.authinfo file using GPG gpg -c ~/.authinfo and delete the original unencrypted file. I use a mbsyncrc file for multi-accounts, with some hacks for Gmail accounts (to rename the [Gmail]/... folders). Here is an explained configuration example.\n# mbsync config file # GLOBAL OPTIONS BufferLimit 50mb # Global option: Default buffer size is 10M, too small for modern machines. Sync All # Channels global: Sync everything \u0026#34;Pull Push New ReNew Delete Flags\u0026#34; (default option) Create Both # Channels global: Automatically create missing mailboxes on both sides Expunge Both # Channels global: Delete messages marked for deletion on both sides CopyArrivalDate yes # Channels global: Propagate arrival time with the messages # SECTION (IMAP4 Accounts) IMAPAccount work # IMAP Account name Host mail.host.ccc # The host to connect to User user@host.ccc # Login user name SSLVersions TLSv1.2 TLSv1.1 # Supported SSL versions # Extract password from encrypted ~/.authinfo.gpg # File format: \u0026#34;machine \u0026lt;SERVER\u0026gt; login \u0026lt;LOGIN\u0026gt; port \u0026lt;PORT\u0026gt; password \u0026lt;PASSWORD\u0026gt;\u0026#34; # This uses sed to extract \u0026lt;PASSWORD\u0026gt; from line matching the account\u0026#39;s \u0026lt;SERVER\u0026gt; PassCmd \u0026#34;gpg2 -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.domain.tld/ {print $NF}\u0026#39;\u0026#34; AuthMechs * # Authentication mechanisms SSLType IMAPS # Protocol (STARTTLS/IMAPS) CertificateFile /etc/ssl/certs/ca-certificates.crt # END OF SECTION # IMPORTANT NOTE: you need to keep the blank line after each section # SECTION (IMAP Stores) IMAPStore work-remote # Remote storage name Account work # Associated account # END OF SECTION # SECTION (Maildir Stores) MaildirStore work-local # Local storage (create directories with mkdir -p ~/Maildir/\u0026lt;ACCOUNT-NAME\u0026gt;) Path ~/Maildir/work/ # The local store path Inbox ~/Maildir/work/Inbox # Location of the INBOX SubFolders Verbatim # Download all sub-folders # END OF SECTION # Connections specify links between remote and local folders # they are specified using patterns, which match remote mail # folders. Some commonly used patters include: # # - \u0026#34;*\u0026#34; to match everything # - \u0026#34;!DIR\u0026#34; to exclude \u0026#34;DIR\u0026#34; # - \u0026#34;DIR\u0026#34; to match DIR # # SECTION (Channels) Channel work # Channel name Far :work-remote: # Connect remote store Near :work-local: # to the local one Patterns \u0026#34;INBOX\u0026#34; \u0026#34;Drafts\u0026#34; \u0026#34;Sent\u0026#34; \u0026#34;Archives/*\u0026#34; \u0026#34;Spam\u0026#34; \u0026#34;Trash\u0026#34; SyncState * # Save state in near side mailbox file \u0026#34;.mbsyncstate\u0026#34; # END OF SECTION # ================================================================================= IMAPAccount gmail Host imap.gmail.com User user@gmail.com PassCmd \u0026#34;gpg2 -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.domain.tld/ {print $NF}\u0026#39;\u0026#34; AuthMechs LOGIN SSLType IMAPS CertificateFile /etc/ssl/certs/ca-certificates.crt IMAPStore gmail-remote Account gmail MaildirStore gmail-local Path ~/Maildir/gmail/ Inbox ~/Maildir/gmail/Inbox # For Gmail, I like to make multiple channels, one for each remote directory # this is a trick to rename remote \u0026#34;[Gmail]/mailbox\u0026#34; to \u0026#34;mailbox\u0026#34; Channel gmail-inbox Far :gmail-remote: Near :gmail-local: Patterns \u0026#34;INBOX\u0026#34; SyncState * Channel gmail-trash Far :gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :gmail-local:\u0026#34;Trash\u0026#34; SyncState * Channel gmail-drafts Far :gmail-remote:\u0026#34;[Gmail]/Drafts\u0026#34; Near :gmail-local:\u0026#34;Drafts\u0026#34; SyncState * Channel gmail-sent Far :gmail-remote:\u0026#34;[Gmail]/Sent Mail\u0026#34; Near :gmail-local:\u0026#34;Sent Mail\u0026#34; SyncState * Channel gmail-all Far :gmail-remote:\u0026#34;[Gmail]/All Mail\u0026#34; Near :gmail-local:\u0026#34;All Mail\u0026#34; SyncState * Channel gmail-starred Far :gmail-remote:\u0026#34;[Gmail]/Starred\u0026#34; Near :gmail-local:\u0026#34;Starred\u0026#34; SyncState * Channel gmail-spam Far :gmail-remote:\u0026#34;[Gmail]/Spam\u0026#34; Near :gmail-local:\u0026#34;Spam\u0026#34; SyncState * # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE # MBSYNC ON A GROUP TO SYNC ALL CHANNELS # # FOR INSTANCE: \u0026#34;mbsync gmail\u0026#34; GETS MAIL FROM # \u0026#34;gmail-inbox\u0026#34;, \u0026#34;gmail-sent\u0026#34;, and \u0026#34;gmail-trash\u0026#34; # # SECTION (Groups) Group gmail Channel gmail-inbox Channel gmail-sent Channel gmail-trash Channel gmail-drafts Channel gmail-all Channel gmail-starred Channel gmail-spam # END OF SECTION msmtp I was using the standard smtpmail to send mails; but recently, I\u0026rsquo;m getting problems when sending mails. I passed a whole day trying to fix mail sending for one of my accounts, at the end of the day, I got a working setup; BUT, sending the first mail always ask me about password! I need to enter the password to be able to send the mail, Emacs asks me then if I want to save it to ~/.authifo.gpg, when I confirm saving it, it got duplicated in the authinfo.gpg file.\nThis seems to be a bug; and I found somewhere that smtpmai is buggy, and that msmtp seems to be a good alternative, so now I\u0026rsquo;m using a msmtp-based setup.\nFor this, we will need an additional configuration file, ~/.msmtprc, I configure it the same way as mbsync, I extract the passwords from ~/.authinfo.gpg using GPG and awk.\nThe following is a sample file ~/.msmtprc.\n# Set default values for all following accounts. defaults auth on tls on tls_starttls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile ~/.msmtp.log # Gmail account gmail auth plain host smtp.googlemail.com port 587 from username@gmail.com user username passwordeval \u0026#34;gpg -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.googlemail.com login .*@gmail.com/ {print $NF}\u0026#39;\u0026#34; add_missing_date_header on ## Gmail - aliases account alias-account : gmail from alias@mail.com account other-alias : gmail from other.alias@address.org # Work account work auth on host smtp.domaine.tld port 587 from username@domaine.tld user username passwordeval \u0026#34;gpg -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.domaine.tld/ {print $NF}\u0026#39;\u0026#34; tls_nocertcheck # ignore TLS certificate errors mu4e Add mu4e to path if it exists on the file system.\n(add-to-list \u0026#39;load-path \u0026#34;/usr/local/share/emacs/site-lisp/mu4e\u0026#34;) I configure my email accounts in a private file in lisp/private/+mu4e-accounts.el, which will be loaded after this common part:\n(after! mu4e (require \u0026#39;org-msg) (require \u0026#39;smtpmail) (require \u0026#39;mu4e-contrib) (require \u0026#39;mu4e-icalendar) (require \u0026#39;org-agenda) ;; Common parameters (setq mu4e-update-interval (* 3 60) ;; Every 3 min mu4e-index-update-error-warning nil ;; Do not show warning after update mu4e-get-mail-command \u0026#34;mbsync -a\u0026#34; ;; Not needed, as +mu4e-backend is \u0026#39;mbsync by default mu4e-main-hide-personal-addresses t ;; No need to display a long list of my own addresses! mu4e-attachment-dir (expand-file-name \u0026#34;~/Maildir/attachements\u0026#34;) mu4e-sent-messages-behavior \u0026#39;sent ;; Save sent messages mu4e-context-policy \u0026#39;pick-first ;; Start with the first context mu4e-compose-context-policy \u0026#39;ask) ;; Always ask which context to use when composing a new mail ;; Use msmtp instead of smtpmail (setq sendmail-program \u0026#34;/usr/bin/msmtp\u0026#34; message-sendmail-f-is-evil t message-sendmail-envelope-from \u0026#39;header message-sendmail-extra-arguments \u0026#39;(\u0026#34;--read-envelope-from\u0026#34;) ;; \u0026#34;--read-recipients\u0026#34; message-send-mail-function #\u0026#39;message-send-mail-with-sendmail send-mail-function #\u0026#39;smtpmail-send-it mail-specify-envelope-from t mail-envelope-from \u0026#39;header) (setq mu4e-headers-fields \u0026#39;((:flags . 6) ;; 3 flags (:account-stripe . 2) (:from-or-to . 25) (:folder . 10) (:recipnum . 2) (:subject . 80) (:human-date . 8)) +mu4e-min-header-frame-width 142 mu4e-headers-date-format \u0026#34;%d/%m/%y\u0026#34; mu4e-headers-time-format \u0026#34;⧖ %H:%M\u0026#34; mu4e-headers-results-limit 1000 mu4e-index-cleanup t) (defvar +mu4e-header--folder-colors nil) (appendq! mu4e-header-info-custom \u0026#39;((:folder . (:name \u0026#34;Folder\u0026#34; :shortname \u0026#34;Folder\u0026#34; :help \u0026#34;Lowest level folder\u0026#34; :function (lambda (msg) (+mu4e-colorize-str (replace-regexp-in-string \u0026#34;\\\\`.*/\u0026#34; \u0026#34;\u0026#34; (mu4e-message-field msg :maildir)) \u0026#39;+mu4e-header--folder-colors)))))) ;; Add a unified inbox shortcut (add-to-list \u0026#39;mu4e-bookmarks \u0026#39;(:name \u0026#34;Unified inbox\u0026#34; :query \u0026#34;maildir:/.*inbox/\u0026#34; :key ?i) t) ;; Add shortcut to view yesterday\u0026#39;s messages (add-to-list \u0026#39;mu4e-bookmarks \u0026#39;(:name \u0026#34;Yesterday\u0026#39;s messages\u0026#34; :query \u0026#34;date:1d..today\u0026#34; :key ?y) t) ;; Load a list of my email addresses \u0026#39;+my-addresses\u0026#39;, defined as: ;; (setq +my-addresses \u0026#39;(\u0026#34;user@gmail.com\u0026#34; \u0026#34;user@hotmail.com\u0026#34;)) (load! \u0026#34;lisp/private/+my-addresses.el\u0026#34;) (when (bound-and-true-p +my-addresses) ;; I like always to add myself in BCC, Lets add a bookmark to show all my BCC mails (defun +mu-long-query (query oper arg-list) (concat \u0026#34;(\u0026#34; (s-join (concat \u0026#34; \u0026#34; oper \u0026#34; \u0026#34;) (mapcar (lambda (addr) (format \u0026#34;%s:%s\u0026#34; query addr)) arg-list)) \u0026#34;)\u0026#34;)) ;; Build a query to match mails send from \u0026#34;me\u0026#34; with \u0026#34;me\u0026#34; in BCC (let ((bcc-query (+mu-long-query \u0026#34;bcc\u0026#34; \u0026#34;or\u0026#34; +my-addresses)) (from-query (+mu-long-query \u0026#34;from\u0026#34; \u0026#34;or\u0026#34; +my-addresses))) (add-to-list \u0026#39;mu4e-bookmarks (list :name \u0026#34;My black copies\u0026#34; :query (format \u0026#34;%s and %s\u0026#34; from-query bcc-query) :key ?k) t))) ;; Use a nicer icon in alerts (setq mu4e-alert-icon \u0026#34;/usr/share/icons/Papirus/64x64/apps/mail-client.svg\u0026#34;) ;; Org-Msg stuff ;; org-msg-[signature|greeting-fmt] are separately set for each account (map! :map org-msg-edit-mode-map :after org-msg :n \u0026#34;G\u0026#34; #\u0026#39;org-msg-goto-body) ;; I like to always BCC myself (defun +bbc-me () \u0026#34;Add my email to BCC.\u0026#34; (save-excursion (message-add-header (format \u0026#34;Bcc: %s\\n\u0026#34; user-mail-address)))) (add-hook \u0026#39;mu4e-compose-mode-hook \u0026#39;+bbc-me) ;; FIXME: I constantly get a non systematic error after sending a mail. ;; \u0026gt;\u0026gt; Error (message-sent-hook): Error running hook \u0026#34;undo\u0026#34; because: ;; \u0026gt;\u0026gt; (error Unrecognized entry in undo list undo-tree-canary) ;; It is triggered by the \u0026#39;message-sent-hook\u0026#39;, so lets remove the \u0026#39;undo\u0026#39; ;; command from the hook, we can do this before sending the message via ;; the \u0026#39;message-send-hook\u0026#39;. (add-hook \u0026#39;message-send-hook ;; Befor sending the message ;; Remove the problematic \u0026#39;undo\u0026#39; hook. (lambda () (remove-hook \u0026#39;message-sent-hook \u0026#39;undo t))) ;; Load my accounts (load! \u0026#34;lisp/private/+mu4e-accounts.el\u0026#34;) ;; iCalendar / Org (mu4e-icalendar-setup) (setq mu4e-icalendar-trash-after-reply nil mu4e-icalendar-diary-file \u0026#34;~/Dropbox/Org/diary-invitations.org\u0026#34; gnus-icalendar-org-capture-file \u0026#34;~/Dropbox/Org/notes.org\u0026#34; gnus-icalendar-org-capture-headline \u0026#39;(\u0026#34;Calendar\u0026#34;)) ;; To enable optional iCalendar-\u0026gt;Org sync functionality ;; NOTE: both the capture file and the headline(s) inside must already exist (gnus-icalendar-org-setup)) The lisp/private/+mu4e-accounts.el file includes Doom\u0026rsquo;s mu4e multi-account configuration as follows:\n(set-email-account! \u0026#34;Work\u0026#34; ;; Account label ;; Mu4e folders \u0026#39;((mu4e-sent-folder . \u0026#34;/work-dir/Sent\u0026#34;) (mu4e-drafts-folder . \u0026#34;/work-dir/Drafts\u0026#34;) (mu4e-trash-folder . \u0026#34;/work-dir/Trash\u0026#34;) (mu4e-refile-folder . \u0026#34;/work-dir/Archive\u0026#34;) ;; Org-msg template (signature and greeting) (org-msg-greeting-fmt . \u0026#34;Hello%s,\u0026#34;) (org-msg-signature . \u0026#34; Regards, #+begin_signature ----- *Abdelhak BOUGOUFFA* \\\\\\\\ /PhD. Candidate in Robotics | R\u0026amp;D Engineer/ \\\\\\\\ /Paris-Saclay University - SATIE/MOSS | ez-Wheel/ \\\\\\\\ #+end_signature\u0026#34;) ;; \u0026#39;smtpmail\u0026#39; options, no need for these when using \u0026#39;msmtp\u0026#39; (smtpmail-smtp-user . \u0026#34;username@server.com\u0026#34;) (smtpmail-smtp-server . \u0026#34;smtps.server.com\u0026#34;) (smtpmail-stream-type . ssl) (smtpmail-smtp-service . 465) ;; By default, `smtpmail\u0026#39; will try to send mails without authentication, and if rejected, ;; it tries to send credentials. This behavior broke my configuration. So I set this ;; variable to tell \u0026#39;smtpmail\u0026#39; to require authentication for our server (using a regex). (smtpmail-servers-requiring-authorization . \u0026#34;smtps\\\\.server\\\\.com\u0026#34;)) t) ;; Use as default/fallback account ;; Set another account (set-email-account! \u0026#34;Gmail\u0026#34; \u0026#39;((mu4e-sent-folder . \u0026#34;/gmail-dir/Sent\u0026#34;) (mu4e-drafts-folder . \u0026#34;/gmail-dir/Drafts\u0026#34;) (mu4e-trash-folder . \u0026#34;/gmail-dir/Trash\u0026#34;) (mu4e-refile-folder . \u0026#34;/gmail-dir/Archive\u0026#34;) (org-msg-greeting-fmt . \u0026#34;Hello%s,\u0026#34;) (org-msg-signature . \u0026#34;-- SIGNATURE\u0026#34;) ;; No need for these when using \u0026#39;msmtp\u0026#39; (smtpmail-smtp-user . \u0026#34;username@gmail.com\u0026#34;) (smtpmail-smtp-server . \u0026#34;smtp.googlemail.com\u0026#34;) (smtpmail-stream-type . starttls) (smtpmail-smtp-service . 587) ...)) ;; Tell Doom\u0026#39;s mu4e module to override some commands to fix issues on Gmail accounts (setq +mu4e-gmail-accounts \u0026#39;((\u0026#34;username@gmail.com\u0026#34; . \u0026#34;/gmail-dir\u0026#34;))) IRC ;; TODO: Not tangled (defun +fetch-my-password (\u0026amp;rest params) (require \u0026#39;auth-source) (let ((match (car (apply #\u0026#39;auth-source-search params)))) (if match (let ((secret (plist-get match :secret))) (if (functionp secret) (funcall secret) secret)) (error \u0026#34;Password not found for %S\u0026#34; params)))) (defun +my-nickserv-password (server) (+fetch-my-password :user \u0026#34;abougouffa\u0026#34; :host \u0026#34;irc.libera.chat\u0026#34;)) (set-irc-server! \u0026#34;irc.libera.chat\u0026#34; \u0026#39;(:tls t :port 6697 :nick \u0026#34;abougouffa\u0026#34; :sasl-password +my-nickserver-password :channels (\u0026#34;#emacs\u0026#34;))) Multimedia I like to use a MPD powered EMMS, so when I restart Emacs I do not lost my music.\nMPD, MPC, and MPV ;; Not sure if it is required! (after! mpc (setq mpc-host \u0026#34;localhost:6600\u0026#34;)) I like to launch the music daemon mpd using Systemd, lets define some commands in Emacs to start/kill the server:\n(defun +mpd-daemon-start () \u0026#34;Start MPD, connects to it and syncs the metadata cache.\u0026#34; (interactive) (let ((mpd-daemon-running-p (+mpd-daemon-running-p))) (unless mpd-daemon-running-p ;; Start the daemon if it is not already running. (setq mpd-daemon-running-p (zerop (call-process \u0026#34;systemctl\u0026#34; nil nil nil \u0026#34;--user\u0026#34; \u0026#34;start\u0026#34; \u0026#34;mpd.service\u0026#34;)))) (cond ((+mpd-daemon-running-p) (+mpd-mpc-update) (emms-player-mpd-connect) (emms-cache-set-from-mpd-all) (message \u0026#34;Connected to MPD!\u0026#34;)) (t (warn \u0026#34;An error occured when trying to start Systemd mpd.service.\u0026#34;))))) (defun +mpd-daemon-stop () \u0026#34;Stops playback and kill the MPD daemon.\u0026#34; (interactive) (emms-stop) (call-process \u0026#34;systemctl\u0026#34; nil nil nil \u0026#34;--user\u0026#34; \u0026#34;stop\u0026#34; \u0026#34;mpd.service\u0026#34;) (message \u0026#34;MPD stopped!\u0026#34;)) (defun +mpd-daemon-running-p () \u0026#34;Check if the MPD service is running.\u0026#34; (zerop (call-process \u0026#34;systemctl\u0026#34; nil nil nil \u0026#34;--user\u0026#34; \u0026#34;is-active\u0026#34; \u0026#34;--quiet\u0026#34; \u0026#34;mpd.service\u0026#34;))) (defun +mpd-mpc-update () \u0026#34;Updates the MPD database synchronously.\u0026#34; (interactive) (if (zerop (call-process \u0026#34;mpc\u0026#34; nil nil nil \u0026#34;update\u0026#34;)) (message \u0026#34;MPD database updated!\u0026#34;) (warn \u0026#34;An error occured when trying to update MPD database.\u0026#34;))) EMMS Now, we configure EMMS to use MPD if it is present; otherwise, it uses whatever default backend EMMS is using.\n(after! emms ;; EMMS basic configuration (require \u0026#39;emms-setup) (when MPD-OK-P (require \u0026#39;emms-player-mpd)) (emms-all) (emms-default-players) (setq emms-source-file-default-directory \u0026#34;~/Music/\u0026#34; ;; Load cover images emms-browser-covers \u0026#39;emms-browser-cache-thumbnail-async emms-seek-seconds 5) (if MPD-OK-P ;; If using MPD as backend (setq emms-player-list \u0026#39;(emms-player-mpd) emms-info-functions \u0026#39;(emms-info-mpd) emms-player-mpd-server-name \u0026#34;localhost\u0026#34; emms-player-mpd-server-port \u0026#34;6600\u0026#34; emms-player-mpd-music-directory (expand-file-name \u0026#34;~/Music\u0026#34;)) ;; Use whatever backend EMMS is using by default (VLC in my machine) (setq emms-info-functions \u0026#39;(emms-info-tinytag))) ;; use Tinytag, or \u0026#39;(emms-info-exiftool) for Exiftool ;; Keyboard shortcuts (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioPrev\u0026gt;\u0026#34;) \u0026#39;emms-previous) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioNext\u0026gt;\u0026#34;) \u0026#39;emms-next) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioPlay\u0026gt;\u0026#34;) \u0026#39;emms-pause) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioPause\u0026gt;\u0026#34;) \u0026#39;emms-pause) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioStop\u0026gt;\u0026#34;) \u0026#39;emms-stop) ;; Try to start MPD or connect to it if it is already started. (when MPD-OK-P (emms-player-set emms-player-mpd \u0026#39;regex (emms-player-simple-regexp \u0026#34;m3u\u0026#34; \u0026#34;ogg\u0026#34; \u0026#34;flac\u0026#34; \u0026#34;mp3\u0026#34; \u0026#34;wav\u0026#34; \u0026#34;mod\u0026#34; \u0026#34;au\u0026#34; \u0026#34;aiff\u0026#34;)) (add-hook \u0026#39;emms-playlist-cleared-hook \u0026#39;emms-player-mpd-clear) (+mpd-daemon-start)) ;; Activate EMMS in mode line (emms-mode-line 1) ;; More descriptive track lines in playlists ;; From: https://www.emacswiki.org/emacs/EMMS#h5o-15 (defun +better-emms-track-description (track) \u0026#34;Return a somewhat nice track description.\u0026#34; (let ((artist (emms-track-get track \u0026#39;info-artist)) (album (emms-track-get track \u0026#39;info-album)) (tracknumber (emms-track-get track \u0026#39;info-tracknumber)) (title (emms-track-get track \u0026#39;info-title))) (cond ((or artist title) (concat (if (\u0026gt; (length artist) 0) artist \u0026#34;Unknown artist\u0026#34;) \u0026#34;: \u0026#34; (if (\u0026gt; (length album) 0) album \u0026#34;Unknown album\u0026#34;) \u0026#34; - \u0026#34; (if (\u0026gt; (length tracknumber) 0) (format \u0026#34;%02d. \u0026#34; (string-to-number tracknumber)) \u0026#34;\u0026#34;) (if (\u0026gt; (length title) 0) title \u0026#34;Unknown title\u0026#34;))) (t (emms-track-simple-description track))))) (setq emms-track-description-function \u0026#39;+better-emms-track-description) ;; Manage notifications, inspired by: ;; https://www.emacswiki.org/emacs/EMMS#h5o-9 ;; https://www.emacswiki.org/emacs/EMMS#h5o-11 (cond ;; Choose D-Bus to disseminate messages, if available. ((and (require \u0026#39;dbus nil t) (dbus-ping :session \u0026#34;org.freedesktop.Notifications\u0026#34;)) (setq +emms-notifier-function \u0026#39;+notify-via-freedesktop-notifications) (require \u0026#39;notifications)) ;; Try to make use of KNotify if D-Bus isn\u0026#39;t present. ((and window-system (executable-find \u0026#34;kdialog\u0026#34;)) (setq +emms-notifier-function \u0026#39;+notify-via-kdialog)) ;; Use the message system otherwise (t (setq +emms-notifier-function \u0026#39;+notify-via-messages))) (setq +emms-notification-icon \u0026#34;/usr/share/icons/Papirus/64x64/apps/enjoy-music-player.svg\u0026#34;) (defun +notify-via-kdialog (title msg icon) \u0026#34;Send notification with TITLE, MSG, and ICON via `KDialog\u0026#39;.\u0026#34; (call-process \u0026#34;kdialog\u0026#34; nil nil nil \u0026#34;--title\u0026#34; title \u0026#34;--passivepopup\u0026#34; msg \u0026#34;5\u0026#34; \u0026#34;--icon\u0026#34; icon)) (defun +notify-via-freedesktop-notifications (title msg icon) \u0026#34;Send notification with TITLE, MSG, and ICON via `D-Bus\u0026#39;.\u0026#34; (notifications-notify :title title :body msg :app-icon icon :urgency \u0026#39;low)) (defun +notify-via-messages (title msg icon) \u0026#34;Send notification with TITLE, MSG to message. ICON is ignored.\u0026#34; (message \u0026#34;%s %s\u0026#34; title msg)) (add-hook \u0026#39;emms-player-started-hook (lambda () (funcall +emms-notifier-function \u0026#34;EMMS is now playing:\u0026#34; (emms-track-description (emms-playlist-current-selected-track)) +emms-notification-icon))) ;; MPV and Youtube integration (when MPV-OK-P (add-to-list \u0026#39;emms-player-list \u0026#39;emms-player-mpv t) (emms-player-set emms-player-mpv \u0026#39;regex (rx (or (: \u0026#34;https://\u0026#34; (* nonl) \u0026#34;youtube.com\u0026#34; (* nonl)) (+ (? (or \u0026#34;https://\u0026#34; \u0026#34;http://\u0026#34;)) (* nonl) (regexp (eval (emms-player-simple-regexp \u0026#34;mp4\u0026#34; \u0026#34;mov\u0026#34; \u0026#34;wmv\u0026#34; \u0026#34;webm\u0026#34; \u0026#34;flv\u0026#34; \u0026#34;avi\u0026#34; \u0026#34;mkv\u0026#34;))))))) (setq +youtube-dl-quality-list \u0026#39;(\u0026#34;bestvideo[height\u0026lt;=720]+bestaudio/best[height\u0026lt;=720]\u0026#34; \u0026#34;bestvideo[height\u0026lt;=480]+bestaudio/best[height\u0026lt;=480]\u0026#34; \u0026#34;bestvideo[height\u0026lt;=1080]+bestaudio/best[height\u0026lt;=1080]\u0026#34;)) (setq +default-emms-player-mpv-parameters \u0026#39;(\u0026#34;--quiet\u0026#34; \u0026#34;--really-quiet\u0026#34; \u0026#34;--no-audio-display\u0026#34;)) (defun +set-emms-mpd-youtube-quality (quality) (interactive \u0026#34;P\u0026#34;) (unless quality (setq quality (completing-read \u0026#34;Quality: \u0026#34; +youtube-dl-quality-list nil t))) (setq emms-player-mpv-parameters `(,@+default-emms-player-mpv-parameters ,(format \u0026#34;--ytdl-format=%s\u0026#34; quality)))) (+set-emms-mpd-youtube-quality (car +youtube-dl-quality-list)) (defun +get-youtube-url (link) (let ((watch-id (cadr (assoc \u0026#34;watch?v\u0026#34; (url-parse-query-string (substring (url-filename (url-generic-parse-url link)) 1)))))) (concat \u0026#34;https://www.youtube.com/watch?v=\u0026#34; watch-id))))) ;; Example, to be used in an EMMS Playlist ;; (let ((track (emms-track \u0026#39;url (+get-youtube-url \u0026#34;https://www.youtube.com/watch?v=Wh-7Kg-jVLg\u0026amp;list=PLBsIgVvbrncChqmejIOyA-Xp_dcywQQln\u0026#34;)))) ;; (emms-track-set track \u0026#39;info-title \u0026#34;Vid\u0026#34;) ;; (emms-playlist-insert-track track)) Elfeed ❤️ MPV https://sqrtminusone.xyz/posts/2021-09-07-emms/\nInstall yt-rss from Git:\nYT_RSS_DIR=~/.local/share/yt-rss git clone https://github.com/SqrtMinusOne/yt-rss.git $YT_RSS_DIR cd $TY_RSS_DIR pip install -r requirements.txt gunicorn main:app (after! (elfeed emms) (when MPV-OK-P ;; Integration with Elfeed (define-emms-source elfeed (entry) (let ((track (emms-track \u0026#39;url (+get-youtube-url (elfeed-entry-link entry))))) (emms-track-set track \u0026#39;info-title (elfeed-entry-title entry)) (emms-playlist-insert-track track))) (defun +elfeed-add-emms-youtube () (interactive) (emms-add-elfeed elfeed-show-entry) (elfeed-tag elfeed-show-entry \u0026#39;watched) (elfeed-show-refresh)) (defun +elfeed-search-filter-source (entry) \u0026#34;Filter elfeed search buffer by the feed under cursor.\u0026#34; (interactive (list (elfeed-search-selected :ignore-region))) (when (elfeed-entry-p entry) (elfeed-search-set-filter (concat \u0026#34;@6-months-ago \u0026#34; \u0026#34;+unread \u0026#34; \u0026#34;=\u0026#34; (replace-regexp-in-string (rx \u0026#34;?\u0026#34; (* not-newline) eos) \u0026#34;\u0026#34; (elfeed-feed-url (elfeed-entry-feed entry))))))))) Keybindings Lastly, lets define keybindings for these commands, under \u0026lt;leader\u0026gt; l m.\n(map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :app emms) :prefix-map (\u0026#34;m\u0026#34; . \u0026#34;media\u0026#34;) :desc \u0026#34;Playlist go\u0026#34; \u0026#34;g\u0026#34; #\u0026#39;emms-playlist-mode-go :desc \u0026#34;Add playlist\u0026#34; \u0026#34;D\u0026#34; #\u0026#39;emms-add-playlist :desc \u0026#34;Toggle random playlist\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;emms-toggle-random-playlist :desc \u0026#34;Add directory\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;emms-add-directory :desc \u0026#34;Add file\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;emms-add-file :desc \u0026#34;Smart browse\u0026#34; \u0026#34;b\u0026#34; #\u0026#39;emms-smart-browse :desc \u0026#34;Play/Pause\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;emms-pause :desc \u0026#34;Start\u0026#34; \u0026#34;S\u0026#34; #\u0026#39;emms-start :desc \u0026#34;Start\u0026#34; \u0026#34;S\u0026#34; #\u0026#39;emms-start :desc \u0026#34;Stop\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;emms-stop)) Then we add MPD related keybindings if MPD is used.\n(map! :leader :prefix (\u0026#34;l m\u0026#34;) (:when (and (featurep! :app emms) MPD-OK-P) :prefix-map (\u0026#34;m\u0026#34; . \u0026#34;mpd/mpc\u0026#34;) :desc \u0026#34;Start daemon\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;+mpd-daemon-start :desc \u0026#34;Stop daemon\u0026#34; \u0026#34;k\u0026#34; #\u0026#39;+mpd-daemon-stop :desc \u0026#34;EMMS player (MPD update)\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;emms-player-mpd-update-all-reset-cache :desc \u0026#34;Update database\u0026#34; \u0026#34;u\u0026#34; #\u0026#39;+mpd-mpc-update)) Cycle song information in mode line I found a useful package named emms-mode-line-cycle which permits to do this; however, it has not been updated since a while, it uses some obsolete functions to draw icon in mode line, so I forked it, got rid of the problematic parts, and added some minor stuff.\n(package! emms-mode-line-cycle :recipe (:host github :repo \u0026#34;abougouffa/emms-mode-line-cycle\u0026#34;)) (use-package! emms-mode-line-cycle :after emms :config (setq emms-mode-line-cycle-max-width 15 emms-mode-line-cycle-additional-space-num 4 emms-mode-line-cycle-any-width-p nil emms-mode-line-cycle-velocity 4) ;; Some music files do not have metadata, by default, the track title ;; will be the full file path, so, if I detect what seems to be an absolute ;; path, I trim the directory part and get only the file name. (setq emms-mode-line-cycle-current-title-function (lambda () (let ((name (emms-track-description (emms-playlist-current-selected-track)))) (if (file-name-absolute-p name) (file-name-base name) name)))) ;; Mode line formatting settings ;; This format complements the \u0026#39;emms-mode-line-format\u0026#39; one. (setq emms-mode-line-format \u0026#34; ⟨⏵ %s⟩\u0026#34; ;; 𝅘𝅥𝅮 ⏵ ⏸ ;; To hide the playing time without stopping the cycling. emms-playing-time-display-format \u0026#34;\u0026#34;) (defun +emms-mode-line-toggle-format-hook () \u0026#34;Toggle the \u0026#39;emms-mode-line-fotmat\u0026#39; string, when playing or paused.\u0026#34; (setq emms-mode-line-format (concat \u0026#34; ⟨\u0026#34; (if emms-player-paused-p \u0026#34;⏸\u0026#34; \u0026#34;⏵\u0026#34;) \u0026#34; %s⟩\u0026#34;)) ;; Force a sync to get the right song name over MPD in mode line (when MPD-OK-P (emms-player-mpd-sync-from-mpd)) ;; Trigger a forced update of mode line (useful when pausing) (emms-mode-line-alter-mode-line)) ;; Hook the function to the \u0026#39;emms-player-paused-hook\u0026#39; (add-hook \u0026#39;emms-player-paused-hook \u0026#39;+emms-mode-line-toggle-format-hook) (emms-mode-line-cycle 1)) Maxima The Maxima CAS cames bundled with three Emacs modes: maxima, imaxima and emaxima; installed by default in \u0026quot;/usr/share/emacs/site-lisp/maxima\u0026quot;.\nMaxima The emacsmirror/maxima seems more up-to-date, and supports completion via Company, so lets install it from Github. Note that, normally, we don\u0026rsquo;t need to specify a recipe; however, installing it directly seems to not install company-maxima.el and poly-maxima.el.\n(package! maxima :recipe (:host github :repo \u0026#34;emacsmirror/maxima\u0026#34; :files (:defaults \u0026#34;keywords\u0026#34; \u0026#34;company-maxima.el\u0026#34; \u0026#34;poly-maxima.el\u0026#34;))) (use-package! maxima :when MAXIMA-OK-P :commands (maxima-mode maxima-inferior-mode maxima) :init (require \u0026#39;straight) ;; to use `straight-build-dir\u0026#39; and `straight-base-dir\u0026#39; (setq maxima-font-lock-keywords-directory ;; a workaround to undo the straight workaround! (expand-file-name (format \u0026#34;straight/%s/maxima/keywords\u0026#34; straight-build-dir) straight-base-dir)) ;; The `maxima-hook-function\u0026#39; setup `company-maxima\u0026#39;. (add-hook \u0026#39;maxima-mode-hook #\u0026#39;maxima-hook-function) (add-hook \u0026#39;maxima-inferior-mode-hook #\u0026#39;maxima-hook-function) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.ma[cx]\\\\\u0026#39;\u0026#34; . maxima-mode))) IMaxima For the imaxima (Maxima with image support), the emacsattic/imaxima seems outdated compared to the imaxima package of the official Maxima distribution, so lets install imaxima from the source code of Maxima, hosted on Sourceforge git.code.sf.net/p/maxima/code. The package files are stored in the repository\u0026rsquo;s sub-directory interfaces/emacs/imaxima.\n;; Use the `imaxima\u0026#39; package bundled with the official Maxima distribution. (package! imaxima :recipe (:host nil ;; Unsupported host, we will specify the complete repo link :repo \u0026#34;https://git.code.sf.net/p/maxima/code\u0026#34; :files (\u0026#34;interfaces/emacs/imaxima/*\u0026#34;))) (use-package! imaxima :when MAXIMA-OK-P :commands (imaxima imath-mode) :init (setq imaxima-use-maxima-mode-flag nil ;; otherwise, it don\u0026#39;t render equations with LaTeX. imaxima-scale-factor 2.0) ;; Hook the `maxima-inferior-mode\u0026#39; to get Company completion. (add-hook \u0026#39;imaxima-startup-hook #\u0026#39;maxima-inferior-mode)) FriCAS The FriCAS cames bundled with an Emacs mode, lets load it.\n(use-package! fricas :when FRICAS-OK-P :load-path \u0026#34;/usr/lib/fricas/emacs\u0026#34; :commands (fricas-mode fricas-eval fricas)) Programming File templates For some file types, we overwrite defaults in the snippets directory, others need to have a template assigned.\n(set-file-template! \u0026#34;\\\\.tex$\u0026#34; :trigger \u0026#34;__\u0026#34; :mode \u0026#39;latex-mode) (set-file-template! \u0026#34;\\\\.org$\u0026#34; :trigger \u0026#34;__\u0026#34; :mode \u0026#39;org-mode) (set-file-template! \u0026#34;/LICEN[CS]E$\u0026#34; :trigger \u0026#39;+file-templates/insert-license) CSV rainbow Stolen from here.\n(after! csv-mode ;; TODO: Need to fix the case of two commas, example \u0026#34;a,b,,c,d\u0026#34; (require \u0026#39;cl-lib) (require \u0026#39;color) (map! :localleader :map csv-mode-map \u0026#34;R\u0026#34; #\u0026#39;+csv-rainbow) (defun +csv-rainbow (\u0026amp;optional separator) (interactive (list (when current-prefix-arg (read-char \u0026#34;Separator: \u0026#34;)))) (font-lock-mode 1) (let* ((separator (or separator ?\\,)) (n (count-matches (string separator) (point-at-bol) (point-at-eol))) (colors (cl-loop for i from 0 to 1.0 by (/ 2.0 n) collect (apply #\u0026#39;color-rgb-to-hex (color-hsl-to-rgb i 0.3 0.5))))) (cl-loop for i from 2 to n by 2 for c in colors for r = (format \u0026#34;^\\\\([^%c\\n]+%c\\\\)\\\\{%d\\\\}\u0026#34; separator separator i) do (font-lock-add-keywords nil `((,r (1 \u0026#39;(face (:foreground ,c)))))))))) ;; provide CSV mode setup ;; (add-hook \u0026#39;csv-mode-hook (lambda () (+csv-rainbow))) ESS View data frames better with\n(package! ess-view) GNU Octave Files with .m extension gets recognized automatically as Objective C files. Lets change this to be recognized as Octave/Matlab files.\n(add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.m\\\\\u0026#39;\u0026#34; . octave-mode)) ROS Extensions Add ROS specific file formats:\n(add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.rviz$\u0026#34; . conf-unix-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.launch$\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.urdf$\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.xacro$\u0026#34; . xml-mode)) ;; msg and srv files: for now use gdb-script-mode (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.msg\\\\\u0026#39;\u0026#34; . gdb-script-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.srv\\\\\u0026#39;\u0026#34; . gdb-script-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.action\\\\\u0026#39;\u0026#34; . gdb-script-mode)) ROS bags Mode to view ROS .bag files. Taken from code-iai/ros_emacs_utils.\n(when ROSBAG-OK-P (define-derived-mode rosbag-view-mode fundamental-mode \u0026#34;Rosbag view mode\u0026#34; \u0026#34;Major mode for viewing ROS bag files.\u0026#34; (let ((f (buffer-file-name))) (let ((buffer-read-only nil)) (erase-buffer) (message \u0026#34;Calling rosbag info\u0026#34;) (call-process \u0026#34;rosbag\u0026#34; nil (current-buffer) nil \u0026#34;info\u0026#34; f) (set-buffer-modified-p nil)) (view-mode) (set-visited-file-name nil t))) ;; rosbag view mode (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.bag$\u0026#34; . rosbag-view-mode))) ros.el I found this awesome ros.el package made by Max Beutelspacher, which facilitate working with ROS machines, supports ROS1 and ROS2, with local workspaces or remote ones (over Trump!).\n;; `ros.el\u0026#39; depends on `with-shell-interpreter\u0026#39; among other packages ;; See: https://github.com/DerBeutlin/ros.el/blob/master/Cask (package! with-shell-interpreter) (package! ros :recipe (:host github :repo \u0026#34;DerBeutlin/ros.el\u0026#34;)) Now, we configure the ROS1/ROS2 workspaces to work on. But before that, we need to install some tools on the ROS machine, and build the workspace for the first time using colcon build, the repository contains example Docker files for Noetic and Foxy.\n(use-package! ros :init (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) :desc \u0026#34;Hydra ROS\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;hydra-ros-main/body) :commands (hydra-ros-main/body ros-set-workspace) :config (setq ros-workspaces (list (ros-dump-workspace :tramp-prefix (format \u0026#34;/docker:%s@%s:\u0026#34; \u0026#34;ros\u0026#34; \u0026#34;ros-machine\u0026#34;) :workspace \u0026#34;~/ros_ws\u0026#34; :extends \u0026#39;(\u0026#34;/opt/ros/noetic/\u0026#34;)) (ros-dump-workspace :tramp-prefix (format \u0026#34;/ssh:%s@%s:\u0026#34; \u0026#34;swd_sk\u0026#34; \u0026#34;172.16.96.42\u0026#34;) :workspace \u0026#34;~/ros_ws\u0026#34; :extends \u0026#39;(\u0026#34;/opt/ros/noetic/\u0026#34;)) (ros-dump-workspace :tramp-prefix (format \u0026#34;/ssh:%s@%s:\u0026#34; \u0026#34;swd_sk\u0026#34; \u0026#34;172.16.96.42\u0026#34;) :workspace \u0026#34;~/ros2_ws\u0026#34; :extends \u0026#39;(\u0026#34;/opt/ros/foxy/\u0026#34;))))) Scheme (after! geiser (setq geiser-chez-binary \u0026#34;chez-scheme\u0026#34;)) ;; default is \u0026#34;scheme\u0026#34; Embedded systems Embed.el Some embedded systems development tools.\nTODO: Try to integrate embedded debuggers adapters with dap-mode:\nprobe-rs-debugger stm32-emacs cortex-debug with potential integration with DAP esp-debug-adapter (package! embed :recipe (:host github :repo \u0026#34;sjsch/embed-el\u0026#34;)) (use-package! embed :commands (embed-openocd-start embed-openocd-stop embed-openocd-gdb embed-openocd-flash) :init (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :tools debugger +lsp) :prefix-map (\u0026#34;e\u0026#34; . \u0026#34;embedded\u0026#34;) :desc \u0026#34;Start OpenOCD\u0026#34; \u0026#34;o\u0026#34; #\u0026#39;embed-openocd-start :desc \u0026#34;Stop OpenOCD\u0026#34; \u0026#34;O\u0026#34; #\u0026#39;embed-openocd-stop :desc \u0026#34;OpenOCD GDB\u0026#34; \u0026#34;g\u0026#34; #\u0026#39;embed-openocd-gdb :desc \u0026#34;OpenOCD flash\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;embed-openocd-flash))) Arduino (package! arduino-mode :recipe (:host github :repo \u0026#34;bookest/arduino-mode\u0026#34;)) Bitbake (Yocto) Add support for Yocto Project files.\n(package! bitbake-modes :recipe (:host bitbucket :repo \u0026#34;olanilsson/bitbake-modes\u0026#34;)) (use-package! bitbake-modes :commands (bitbake-mode conf-bitbake-mode bb-scc-mode wks-mode bitbake-task-log-mode bb-sh-mode mmm-mode)) Debugging DAP I like to use cpptools over webfreak.debug. So I enable it after loading dap-mode. I like also to have a mode minimal UI. And I like to trigger dap-hydra when the program hits a break point, and automatically delete the session and close Hydra when DAP is terminated.\n(unpin! dap-mode) (after! dap-mode (require \u0026#39;dap-cpptools) ;; More minimal UI (setq dap-auto-configure-features \u0026#39;(locals tooltip) dap-auto-show-output nil ;; Hide the annoying server output lsp-enable-dap-auto-configure t) ;; Automatically trigger dap-hydra when a program hits a breakpoint. (add-hook \u0026#39;dap-stopped-hook (lambda (arg) (call-interactively #\u0026#39;dap-hydra))) ;; Automatically delete session and close dap-hydra when DAP is terminated. (add-hook \u0026#39;dap-terminated-hook (lambda (arg) (call-interactively #\u0026#39;dap-delete-session) (dap-hydra/nil))) ;; A workaround to correctly show breakpoints ;; from: https://github.com/emacs-lsp/dap-mode/issues/374#issuecomment-1140399819 (add-hook! +dap-running-session-mode (set-window-buffer nil (current-buffer)))) Doom store Doom Emacs stores session information persistently using the core store mechanism. However, relaunching a new session doesn\u0026rsquo;t overwrite the last stored session, to do so, I define a helper function to clear data stored in the \u0026quot;+debugger\u0026quot; location. (see +debugger--get-last-config function.)\n(defun +debugger/clear-last-session () \u0026#34;Clear the last stored session\u0026#34; (interactive) (doom-store-clear \u0026#34;+debugger\u0026#34;)) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :tools debugger +lsp) :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;Clear last DAP session\u0026#34; \u0026#34;c\u0026#34; #\u0026#39;+debugger/clear-last-session)) The Grand \u0026ldquo;Cathedral\u0026rdquo; Debugger For C/C++, DAP mode is missing so much features. In my experience, both cpptools and gdb DAP interfaces aren\u0026rsquo;t mature, it stops and disconnect while debugging, making it a double pain.\nAdditional commands There is no best than using pure GDB, it makes debugging more flexible. Lets define some missing GDB commands, add them to Hydra keys, and define some reverse debugging commands for usage with rr (which we can use by substituting gdb by rr replay when starting the session).\n(after! realgud (require \u0026#39;hydra) ;; Add some missing gdb/rr commands (defun +realgud:cmd-start (arg) \u0026#34;start = break main + run\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;start\u0026#34;)) (defun +realgud:cmd-reverse-next (arg) \u0026#34;Reverse next\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-next\u0026#34;)) (defun +realgud:cmd-reverse-step (arg) \u0026#34;Reverse step\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-step\u0026#34;)) (defun +realgud:cmd-reverse-continue (arg) \u0026#34;Reverse continue\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-continue\u0026#34;)) (defun +realgud:cmd-reverse-finish (arg) \u0026#34;Reverse finish\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-finish\u0026#34;)) ;; Define a hydra binding (defhydra realgud-hydra (:color pink :hint nil :foreign-keys run) \u0026#34; Stepping | _n_: next | _i_: step | _o_: finish | _c_: continue | _R_: restart | _u_: until-here Revese | _rn_: next | _ri_: step | _ro_: finish | _rc_: continue | Breakpts | _ba_: break | _bD_: delete | _bt_: tbreak | _bd_: disable | _be_: enable | _tr_: backtrace Eval | _ee_: at-point | _er_: region | _eE_: eval | | _!_: shell | _Qk_: kill | _Qq_: quit | _Sg_: gdb | _Ss_: start \u0026#34; (\u0026#34;n\u0026#34; realgud:cmd-next) (\u0026#34;i\u0026#34; realgud:cmd-step) (\u0026#34;o\u0026#34; realgud:cmd-finish) (\u0026#34;c\u0026#34; realgud:cmd-continue) (\u0026#34;R\u0026#34; realgud:cmd-restart) (\u0026#34;u\u0026#34; realgud:cmd-until-here) (\u0026#34;rn\u0026#34; +realgud:cmd-reverse-next) (\u0026#34;ri\u0026#34; +realgud:cmd-reverse-step) (\u0026#34;ro\u0026#34; +realgud:cmd-reverse-finish) (\u0026#34;rc\u0026#34; +realgud:cmd-reverse-continue) (\u0026#34;ba\u0026#34; realgud:cmd-break) (\u0026#34;bt\u0026#34; realgud:cmd-tbreak) (\u0026#34;bD\u0026#34; realgud:cmd-delete) (\u0026#34;be\u0026#34; realgud:cmd-enable) (\u0026#34;bd\u0026#34; realgud:cmd-disable) (\u0026#34;ee\u0026#34; realgud:cmd-eval-at-point) (\u0026#34;er\u0026#34; realgud:cmd-eval-region) (\u0026#34;tr\u0026#34; realgud:cmd-backtrace) (\u0026#34;eE\u0026#34; realgud:cmd-eval) (\u0026#34;!\u0026#34; realgud:cmd-shell) (\u0026#34;Qk\u0026#34; realgud:cmd-kill) (\u0026#34;Sg\u0026#34; realgud:gdb) (\u0026#34;Ss\u0026#34; +realgud:cmd-start) (\u0026#34;q\u0026#34; nil \u0026#34;quit\u0026#34; :color blue) ;; :exit (\u0026#34;Qq\u0026#34; realgud:cmd-quit :color blue)) ;; :exit (defun +debugger/realgud:gdb-hydra () \u0026#34;Run `realgud-hydra\u0026#39;.\u0026#34; (interactive) (realgud-hydra/body)) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :tools debugger) :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;RealGUD hydra\u0026#34; \u0026#34;h\u0026#34; #\u0026#39;+debugger/realgud:gdb-hydra))) RealGUD .dir-locals.el support (only for GDB) I do a lot of development on C/C++ apps that gets data from command line arguments, which means I have to type my arguments manually after calling realgud:gdb, which is very annoying.\nFor DAP mode, there is a support for either dap-debug-edit-template, or launch.json. For RealGUD though, I didn\u0026rsquo;t find any ready-to-use feature like this. So I define a parameter list named +realgud:launch-plist, which supports :program and :args. The first is a string of the program path, and the second is a list of string arguments to pass to the program.\n;; A variable which to be used in .dir-locals.el, formatted as a property list; ;; \u0026#39;(:program \u0026#34;...\u0026#34; :args (\u0026#34;args1\u0026#34; \u0026#34;arg2\u0026#34; ...)) ;; \u0026#34;${workspaceFolder}\u0026#34; =\u0026gt; gets replaced with project workspace (from projectile) ;; \u0026#34;${workspaceFolderBasename}\u0026#34; =\u0026gt; gets replaced with project workspace\u0026#39;s basename (defvar +realgud:launch-plist nil) This variable is set in a per-project basis thanks to .dir-locals.el, some thing like this:\n;; Example entry in .dir-locals.el ((nil . ((+realgud:launch-plist . \u0026#39;(:program \u0026#34;${workspaceFolder}/build/bin/my_prog\u0026#34; :args (\u0026#34;--in_file=${workspaceFolder}/some/file.csv\u0026#34; \u0026#34;--out_file=/tmp/some_randome_file\u0026#34; \u0026#34;-a\u0026#34;)))))) The special variables ${workspaceFolder} and ${workspaceFolderBasename} are defined as in VS Code, the actual values are filled from projectile-project-root.\n(defun +realgud:get-launch-debugger-args (\u0026amp;key program args) (let ((debugger--args \u0026#34;\u0026#34;)) (when program (setq debugger--args program) (when args (setq debugger--args (concat debugger--args \u0026#34; \u0026#34; (s-join \u0026#34; \u0026#34; args))))) ;; Replace special variables (let* ((ws--root (expand-file-name (or (projectile-project-root) \u0026#34;.\u0026#34;))) (ws--basename (file-name-nondirectory (if (s-ends-with-p \u0026#34;/\u0026#34; ws--root) (substring ws--root 0 -1) ws--root)))) (s-replace-all (list (cons \u0026#34;${workspaceFolder}\u0026#34; ws--root) (cons \u0026#34;${workspaceFolderBasename}\u0026#34; ws--basename)) debugger--args)))) (defun +debugger/realgud:gdb-launch () \u0026#34;Launch RealGUD with parameters from `+realgud:launch-plist\u0026#39;\u0026#34; (interactive) (require \u0026#39;realgud) (if +realgud:launch-plist (realgud:gdb (concat realgud:gdb-command-name \u0026#34; --args \u0026#34; (apply \u0026#39;+realgud:get-launch-debugger-args +realgud:launch-plist))) (progn (message \u0026#34;Variable `+realgud:launch-plist\u0026#39; is `nil\u0026#39;\u0026#34;) (realgud:gdb)))) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :tools debugger) :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;RealGUD launch\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;+debugger/realgud:gdb-launch)) Record and replay rr We then add some shortcuts to run rr from Emacs, the rr record takes the program name and arguments from my local +realgud:launch-plist, when rr replay respects the arguments configured in RealGUD\u0026rsquo;s GDB command name. Some useful hints could be found here, here, here and here.\n(after! realgud (require \u0026#39;s) (defun +debugger/rr-replay () \u0026#34;Launch `rr replay\u0026#39;\u0026#34; (interactive) (realgud:gdb (s-replace \u0026#34;gdb\u0026#34; \u0026#34;rr replay\u0026#34; realgud:gdb-command-name))) (defun +debugger/rr-record () \u0026#34;Launch `rr record\u0026#39; with parameters from `+realgud:launch-plist\u0026#39;\u0026#34; (interactive) (let ((debugger--args (apply \u0026#39;+realgud:get-launch-debugger-args +realgud:launch-plist))) (unless (make-process :name \u0026#34;*rr record*\u0026#34; :buffer \u0026#34;*rr record*\u0026#34; :command (append \u0026#39;(\u0026#34;rr\u0026#34; \u0026#34;record\u0026#34;) (s-split \u0026#34; \u0026#34; debugger--args))) (message \u0026#34;Cannot make process \u0026#39;rr record\u0026#39;\u0026#34;)))) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (featurep! :tools debugger) :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;rr record\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;+debugger/rr-record :desc \u0026#34;rr replay\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;+debugger/rr-replay))) GDB Emacs GDB DAP mode is great, however, it is not mature for C/C++ debugging, it does not support some basic features like Run until cursor, Show disassembled code\u0026hellip; etc. Emacs have builtin gdb support through gdb-mi and gud.\nThe emacs-gdb package overwrites the builtin gdb-mi, it is much faster (thanks to it\u0026rsquo;s C module), and it defines some easy to use UI, with Visual Studio like keybindings.\n(package! gdb-mi :recipe (:host github :repo \u0026#34;weirdNox/emacs-gdb\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.c\u0026#34; \u0026#34;*.h\u0026#34; \u0026#34;Makefile\u0026#34;))) (use-package! gdb-mi :init (fmakunbound \u0026#39;gdb) (fmakunbound \u0026#39;gdb-enable-debug) :config (setq gdb-window-setup-function #\u0026#39;gdb--setup-windows ;; TODO: Customize this gdb-ignore-gdbinit nil) ;; I use gdbinit to define some useful stuff ;; History (defvar +gdb-history-file \u0026#34;~/.gdb_history\u0026#34;) (defun +gud-gdb-mode-hook-setup () \u0026#34;GDB setup.\u0026#34; ;; Suposes \u0026#34;~/.gdbinit\u0026#34; contains: ;; set history save on ;; set history filename ~/.gdb_history ;; set history remove-duplicates 2048 (when (and (ring-empty-p comint-input-ring) (file-exists-p +gdb-history-file)) (setq comint-input-ring-file-name +gdb-history-file) (comint-read-input-ring t))) (add-hook \u0026#39;gud-gdb-mode-hook \u0026#39;+gud-gdb-mode-hook-setup)) Custom layout for gdb-many-windows Stolen from https://stackoverflow.com/a/41326527/3058915. I used it to change the builtin gdb-many-windows layout.\n(setq gdb-many-windows nil) (defun set-gdb-layout(\u0026amp;optional c-buffer) (if (not c-buffer) (setq c-buffer (window-buffer (selected-window)))) ;; save current buffer ;; from http://stackoverflow.com/q/39762833/846686 (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed (switch-to-buffer gud-comint-buffer) (delete-other-windows) ;; clean all (let* ((w-source (selected-window)) ;; left top (w-gdb (split-window w-source nil \u0026#39;right)) ;; right bottom (w-locals (split-window w-gdb nil \u0026#39;above)) ;; right middle bottom (w-stack (split-window w-locals nil \u0026#39;above)) ;; right middle top (w-breakpoints (split-window w-stack nil \u0026#39;above)) ;; right top (w-io (split-window w-source (floor(* 0.9 (window-body-height))) \u0026#39;below))) ;; left bottom (set-window-buffer w-io (gdb-get-buffer-create \u0026#39;gdb-inferior-io)) (set-window-dedicated-p w-io t) (set-window-buffer w-breakpoints (gdb-get-buffer-create \u0026#39;gdb-breakpoints-buffer)) (set-window-dedicated-p w-breakpoints t) (set-window-buffer w-locals (gdb-get-buffer-create \u0026#39;gdb-locals-buffer)) (set-window-dedicated-p w-locals t) (set-window-buffer w-stack (gdb-get-buffer-create \u0026#39;gdb-stack-buffer)) (set-window-dedicated-p w-stack t) (set-window-buffer w-gdb gud-comint-buffer) (select-window w-source) (set-window-buffer w-source c-buffer))) (defadvice gdb (around args activate) \u0026#34;Change the way to gdb works.\u0026#34; (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing) (let ((c-buffer (window-buffer (selected-window)))) ;; save current buffer ad-do-it (set-gdb-layout c-buffer))) (defadvice gdb-reset (around args activate) \u0026#34;Change the way to gdb exit.\u0026#34; ad-do-it (set-window-configuration global-config-editing)) Highlight current line (defvar gud-overlay (let* ((ov (make-overlay (point-min) (point-min)))) (overlay-put ov \u0026#39;face \u0026#39;secondary-selection) ov) \u0026#34;Overlay variable for GUD highlighting.\u0026#34;) (defadvice gud-display-line (after my-gud-highlight act) \u0026#34;Highlight current line.\u0026#34; (let* ((ov gud-overlay) (bf (gud-find-file true-file))) (with-current-buffer bf (move-overlay ov (line-beginning-position) (line-beginning-position 2) ;; (move-overlay ov (line-beginning-position) (line-end-position) (current-buffer))))) (defun gud-kill-buffer () (if (derived-mode-p \u0026#39;gud-mode) (delete-overlay gud-overlay))) (add-hook \u0026#39;kill-buffer-hook \u0026#39;gud-kill-buffer) Completion \u0026amp; IDE Eglot Eglot uses project.el to detect the project root. This is a workaround to make it work with projectile:\n(after! eglot ;; A hack to make it works with projectile (defun projectile-project-find-function (dir) (let* ((root (projectile-project-root dir))) (and root (cons \u0026#39;transient root)))) (with-eval-after-load \u0026#39;project (add-to-list \u0026#39;project-find-functions \u0026#39;projectile-project-find-function)) ;; Use clangd with some options (set-eglot-client! \u0026#39;c++-mode \u0026#39;(\u0026#34;clangd\u0026#34; \u0026#34;-j=3\u0026#34; \u0026#34;--clang-tidy\u0026#34;))) LSP mode Enable some useful UI stuff LSP mode provides a set of configurable UI stuff, Doom Emacs disables some of the UI components; however, I like to enable some less intrusive, more useful UI stuff.\n(after! lsp-ui (setq lsp-ui-sideline-enable t lsp-ui-sideline-show-code-actions t lsp-ui-sideline-show-diagnostics t lsp-ui-sideline-show-hover nil lsp-log-io nil lsp-lens-enable t ; not working properly with ccls! lsp-diagnostics-provider :auto lsp-enable-symbol-highlighting t lsp-headerline-breadcrumb-enable nil lsp-headerline-breadcrumb-segments \u0026#39;(symbols))) LSP mode with clangd (after! lsp-clangd (setq lsp-clients-clangd-args \u0026#39;(\u0026#34;-j=4\u0026#34; \u0026#34;--background-index\u0026#34; \u0026#34;--clang-tidy\u0026#34; \u0026#34;--completion-style=detailed\u0026#34; \u0026#34;--header-insertion=never\u0026#34; \u0026#34;--header-insertion-decorators=0\u0026#34;)) (set-lsp-priority! \u0026#39;clangd 2)) LSP mode with ccls ;; NOTE: Not tangled, using the default ccls (after! ccls (setq ccls-initialization-options \u0026#39;(:index (:comments 2 :trackDependency 1 :threads 4) :completion (:detailedLabel t))) (set-lsp-priority! \u0026#39;ccls 2)) ; optional as ccls is the default in Doom Enable lsp over tramp Python (after! tramp (require \u0026#39;lsp-mode) ;; (require \u0026#39;lsp-pyright) (setq lsp-enable-snippet nil lsp-log-io nil ;; To bypass the \u0026#34;lsp--document-highlight fails if ;; textDocument/documentHighlight is not supported\u0026#34; error lsp-enable-symbol-highlighting nil) (lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection \u0026#34;pyls\u0026#34;) :major-modes \u0026#39;(python-mode) :remote? t :server-id \u0026#39;pyls-remote))) C/C++ with ccls ;; NOTE: WIP: Not tangled (after! tramp (require \u0026#39;lsp-mode) (require \u0026#39;ccls) (setq lsp-enable-snippet nil lsp-log-io nil lsp-enable-symbol-highlighting t) (lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection (lambda () (cons ccls-executable ; executable name on remote machine \u0026#39;ccls\u0026#39; ccls-args))) :major-modes \u0026#39;(c-mode c++-mode objc-mode cuda-mode) :remote? t :server-id \u0026#39;ccls-remote)) (add-to-list \u0026#39;tramp-remote-path \u0026#39;tramp-own-remote-path)) C/C++ with clangd (after! tramp (require \u0026#39;lsp-mode) (setq lsp-enable-snippet nil lsp-log-io nil ;; To bypass the \u0026#34;lsp--document-highlight fails if ;; textDocument/documentHighlight is not supported\u0026#34; error lsp-enable-symbol-highlighting nil) (lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection (lambda () (cons \u0026#34;clangd-12\u0026#34; ; executable name on remote machine \u0026#39;ccls\u0026#39; lsp-clients-clangd-args))) :major-modes \u0026#39;(c-mode c++-mode objc-mode cuda-mode) :remote? t :server-id \u0026#39;clangd-remote))) VHDL By default, LSP uses the proprietary VHDL-Tool to provide LSP features; however, there is free and open source alternatives: ghdl-ls and rust_hdl. I have some issues running ghdl-ls installed form pip through the pyghdl package, so lets use rust_hdl instead.\n(use-package! vhdl-mode ;; Required unless vhdl_ls is on the $PATH :config (setq lsp-vhdl-server-path \u0026#34;~/Projects/foss_projects/rust_hdl/target/release/vhdl_ls\u0026#34; lsp-vhdl-server \u0026#39;vhdl-ls lsp-vhdl--params nil) (require \u0026#39;lsp-vhdl) :hook (vhdl-mode . (lambda () (lsp t) (flycheck-mode t)))) SonarLint (package! lsp-sonarlint) ;; TODO: configure it, for the moment, it seems that it doesn\u0026#39;t support C/C++ Cppcheck Check for everything!\n(after! flycheck (setq flycheck-cppcheck-checks \u0026#39;(\u0026#34;information\u0026#34; \u0026#34;missingInclude\u0026#34; \u0026#34;performance\u0026#34; \u0026#34;portability\u0026#34; \u0026#34;style\u0026#34; \u0026#34;unusedFunction\u0026#34; \u0026#34;warning\u0026#34;))) ;; Actually, we can use \u0026#34;all\u0026#34; Project CMake A good new package to facilitate using CMake projects with Emacs, it glues together project, eglot, cmake and clangd.\n(package! project-cmake :disable (not (featurep! :tools lsp +eglot)) ; Enable only if (lsp +eglot) is used :recipe (:host github :repo \u0026#34;juanjosegarciaripoll/project-cmake\u0026#34;)) (use-package! project-cmake :config (require \u0026#39;eglot) (project-cmake-scan-kits) (project-cmake-eglot-integration)) FZF (package! fzf) (after! evil (evil-define-key \u0026#39;insert fzf-mode-map (kbd \u0026#34;ESC\u0026#34;) #\u0026#39;term-kill-subjob)) (define-minor-mode fzf-mode \u0026#34;Minor mode for the FZF buffer\u0026#34; :init-value nil :lighter \u0026#34; FZF\u0026#34; :keymap \u0026#39;((\u0026#34;C-c\u0026#34; . term-kill-subjob))) (defadvice! doom-fzf--override-start-args-a (original-fn \u0026amp;rest args) \u0026#34;Set the FZF minor mode with the fzf buffer.\u0026#34; :around #\u0026#39;fzf/start (message \u0026#34;called with args %S\u0026#34; args) (apply original-fn args) ;; set the FZF buffer to fzf-mode so we can hook ctrl+c (set-buffer \u0026#34;*fzf*\u0026#34;) (fzf-mode)) (defvar fzf/args \u0026#34;-x --print-query -m --tiebreak=index --expect=ctrl-v,ctrl-x,ctrl-t\u0026#34;) (use-package! fzf :commands (fzf fzf-projectile fzf-hg fzf-git fzf-git-files fzf-directory fzf-git-grep)) Clang-format (package! clang-format) (use-package! clang-format :when CLANG-FORMAT-OK-P :commands (clang-format-region)) Git \u0026amp; VC Repo Make sure the repo tool is installed, if not, pacman -S repo on Arch-based distributions, or directly with:\nREPO_PATH=\u0026#34;$HOME/.local/bin/repo\u0026#34; curl \u0026#34;https://storage.googleapis.com/git-repo-downloads/repo\u0026#34; \u0026gt; ${REPO_PATH} chmod a+x ${REPO_PATH} (package! repo) (use-package! repo :when REPO-OK-P :commands repo-status) Blamer Display Git information (author, date, message\u0026hellip;) for current line\n(package! blamer :recipe (:host github :repo \u0026#34;artawower/blamer.el\u0026#34;)) (use-package! blamer :custom (blamer-idle-time 0.3) (blamer-min-offset 60) (blamer-prettify-time-p t) (blamer-entire-formatter \u0026#34; %s\u0026#34;) (blamer-author-formatter \u0026#34; %s \u0026#34;) (blamer-datetime-formatter \u0026#34;[%s], \u0026#34;) (blamer-commit-formatter \u0026#34;“%s”\u0026#34;) :custom-face (blamer-face ((t :foreground \u0026#34;#7a88cf\u0026#34; :background nil :height 125 :italic t))) :hook ((prog-mode . blamer-mode) (text-mode . blamer-mode)) :config (when (featurep! :ui zen) ;; Disable in zen (writeroom) mode (add-hook! \u0026#39;writeroom-mode-enable-hook (blamer-mode -1)) (add-hook! \u0026#39;writeroom-mode-disable-hook (blamer-mode 1)))) Assembly Add some packages for better assembly coding.\n(package! nasm-mode) (package! haxor-mode) (package! mips-mode) (package! riscv-mode) (package! x86-lookup) (use-package! nasm-mode :mode \u0026#34;\\\\.[n]*\\\\(asm\\\\|s\\\\)\\\\\u0026#39;\u0026#34;) ;; Get Haxor VM from https://github.com/krzysztof-magosa/haxor (use-package! haxor-mode :mode \u0026#34;\\\\.hax\\\\\u0026#39;\u0026#34;) (use-package! mips-mode :mode \u0026#34;\\\\.mips$\u0026#34;) (use-package! riscv-mode :commands (riscv-mode) :mode \u0026#34;\\\\.riscv$\u0026#34;) (use-package! x86-lookup :commands (x86-lookup) :config (when (featurep! :tools pdf) (setq x86-lookup-browse-pdf-function \u0026#39;x86-lookup-browse-pdf-pdf-tools)) ;; Get manual from https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html (setq x86-lookup-pdf \u0026#34;assets/325383-sdm-vol-2abcd.pdf\u0026#34;)) Disaster (package! disaster) ;; TODO: Configure to take into account \u0026#34;compile_commands.json\u0026#34; (use-package! disaster :commands (disaster)) Devdocs (package! devdocs :recipe (:host github :repo \u0026#34;astoff/devdocs.el\u0026#34; :files (\u0026#34;*.el\u0026#34;))) (use-package! devdocs :commands (devdocs-lookup devdocs-install) :config (setq devdocs-data-dir (expand-file-name \u0026#34;devdocs\u0026#34; doom-etc-dir))) Systemd For editing systemd unit files.\n(package! systemd) Franca IDL Add support for Franca Interface Definition Language.\n(package! franca-idl :recipe (:host github :repo \u0026#34;zeph1e/franca-idl.el\u0026#34;)) (use-package! franca-idl :commands franca-idl-mode) LaTeX (package! aas :recipe (:host github :repo \u0026#34;ymarco/auto-activating-snippets\u0026#34;)) (use-package! aas :commands aas-mode) Flycheck + Projectile WIP: Not working atm!\n(package! flycheck-projectile :recipe (:host github :repo \u0026#34;nbfalcon/flycheck-projectile\u0026#34;)) (use-package! flycheck-projectile :commands flycheck-projectile-list-errors) Graphviz Graphviz is a nice method of visualizing simple graphs, based on plaintext .dot / .gv files.\n(package! graphviz-dot-mode) (use-package! graphviz-dot-mode :commands (graphviz-dot-mode graphviz-dot-preview)) Inspector (package! inspector :recipe (:host github :repo \u0026#34;mmontone/emacs-inspector\u0026#34;)) (use-package! inspector :commands (inspect-expression inspect-last-sexp)) Office Org mode additional packages To avoid problems in the (after! org) section.\n(unpin! org-roam) ;; To avoid problems with org-roam-ui (package! websocket) (package! org-roam-ui) (package! org-wild-notifier) (package! org-fragtog) (package! org-ref) (package! org-appear) (package! org-super-agenda) (package! doct) (package! org-mode ;; https://github.com/doomemacs/doomemacs/issues/6478#issuecomment-1160699339 :pin \u0026#34;971eb6885ec996c923e955730df3bafbdc244e54\u0026#34;) (package! caldav :recipe (:host github :repo \u0026#34;dengste/org-caldav\u0026#34;)) (package! org-ol-tree :recipe (:host github :repo \u0026#34;Townk/org-ol-tree\u0026#34;) :pin \u0026#34;207c748aa5fea8626be619e8c55bdb1c16118c25\u0026#34;) (package! org-modern :recipe (:host github :repo \u0026#34;minad/org-modern\u0026#34;)) (package! org-bib :recipe (:host github :repo \u0026#34;rougier/org-bib-mode\u0026#34;)) (package! academic-phrases :recipe (:host github :repo \u0026#34;nashamri/academic-phrases\u0026#34;)) Org mode Intro Because this section is fairly expensive to initialize, we\u0026rsquo;ll wrap it in a (after! ...) block.\n(after! org \u0026lt;\u0026lt;org-conf\u0026gt;\u0026gt; ) Behavior Tweaking defaults Org basics (setq org-directory \u0026#34;~/Dropbox/Org/\u0026#34; ; let\u0026#39;s put files here org-use-property-inheritance t ; it\u0026#39;s convenient to have properties inherited org-log-done \u0026#39;time ; having the time an item is done sounds convenient org-list-allow-alphabetical t ; have a. A. a) A) list bullets ;; org-export-in-background t ; run export processes in external emacs process ;; org-export-async-debug t org-tags-column 0 org-catch-invisible-edits \u0026#39;smart ;; try not to accidently do weird stuff in invisible regions org-export-with-sub-superscripts \u0026#39;{} ;; don\u0026#39;t treat lone _ / ^ as sub/superscripts, require _{} / ^{} org-auto-align-tags nil org-special-ctrl-a/e t org-startup-indented t ;; Enable \u0026#39;org-indent-mode\u0026#39; by default, override with \u0026#39;+#startup: noindent\u0026#39; for big files org-insert-heading-respect-content t) Babel I also like the :comments header-argument, so let\u0026rsquo;s make that a default.\n(setq org-babel-default-header-args \u0026#39;((:session . \u0026#34;none\u0026#34;) (:results . \u0026#34;replace\u0026#34;) (:exports . \u0026#34;code\u0026#34;) (:cache . \u0026#34;no\u0026#34;) (:noweb . \u0026#34;no\u0026#34;) (:hlines . \u0026#34;no\u0026#34;) (:tangle . \u0026#34;no\u0026#34;) (:comments . \u0026#34;link\u0026#34;))) Babel is really annoying when it comes to working with Scheme (via Geiser), it keeps asking about which Scheme implementation to use, I tried to set this in file local variables (with the ) and dir-locals but it didn\u0026rsquo;t work. This should work now!\n(after! geiser (setq geiser-default-implementation \u0026#39;guile)) ;; stolen from https://github.com/yohan-pereira/.emacs#babel-config (defun +org-confirm-babel-evaluate (lang body) (not (string= lang \u0026#34;scheme\u0026#34;))) ;; don\u0026#39;t ask for scheme (setq org-confirm-babel-evaluate #\u0026#39;+org-confirm-babel-evaluate) Visual line / auto fill By default, visual-line-mode is turned on, and auto-fill-mode off by a hook. However, this messes with tables in Org-mode, and other plain text files (e.g. markdown, \\LaTeX) so I\u0026rsquo;ll turn it off for this, and manually enable it for more specific modes as desired.\n(remove-hook \u0026#39;text-mode-hook #\u0026#39;visual-line-mode) (add-hook \u0026#39;text-mode-hook #\u0026#39;auto-fill-mode) EVIL There also seem to be a few keybindings which use hjkl, but miss arrow key equivalents.\n(map! :map evil-org-mode-map :after evil-org :n \u0026#34;g \u0026lt;up\u0026gt;\u0026#34; #\u0026#39;org-backward-heading-same-level :n \u0026#34;g \u0026lt;down\u0026gt;\u0026#34; #\u0026#39;org-forward-heading-same-level :n \u0026#34;g \u0026lt;left\u0026gt;\u0026#34; #\u0026#39;org-up-element :n \u0026#34;g \u0026lt;right\u0026gt;\u0026#34; #\u0026#39;org-down-element) TODOs (setq org-todo-keywords \u0026#39;((sequence \u0026#34;IDEA(i)\u0026#34; \u0026#34;TODO(t)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;PROJ(p)\u0026#34; \u0026#34;STRT(s)\u0026#34; \u0026#34;WAIT(w)\u0026#34; \u0026#34;HOLD(h)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d)\u0026#34; \u0026#34;KILL(k)\u0026#34;) (sequence \u0026#34;[ ](T)\u0026#34; \u0026#34;[-](S)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;[X](D)\u0026#34;) (sequence \u0026#34;|\u0026#34; \u0026#34;OKAY(o)\u0026#34; \u0026#34;YES(y)\u0026#34; \u0026#34;NO(n)\u0026#34;))) (setq org-todo-keyword-faces \u0026#39;((\u0026#34;IDEA\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;NEXT\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;STRT\u0026#34; . (:foreground \u0026#34;OrangeRed\u0026#34; :weight bold)) (\u0026#34;WAIT\u0026#34; . (:foreground \u0026#34;coral\u0026#34; :weight bold)) (\u0026#34;KILL\u0026#34; . (:foreground \u0026#34;DarkGreen\u0026#34; :weight bold)) (\u0026#34;PROJ\u0026#34; . (:foreground \u0026#34;LimeGreen\u0026#34; :weight bold)) (\u0026#34;HOLD\u0026#34; . (:foreground \u0026#34;orange\u0026#34; :weight bold)))) (setq org-tag-persistent-alist \u0026#39;((:startgroup . nil) (\u0026#34;home\u0026#34; . ?h) (\u0026#34;research\u0026#34; . ?r) (\u0026#34;work\u0026#34; . ?w) (:endgroup . nil) (:startgroup . nil) (\u0026#34;tool\u0026#34; . ?o) (\u0026#34;dev\u0026#34; . ?d) (\u0026#34;report\u0026#34; . ?p) (:endgroup . nil) (:startgroup . nil) (\u0026#34;easy\u0026#34; . ?e) (\u0026#34;medium\u0026#34; . ?m) (\u0026#34;hard\u0026#34; . ?a) (:endgroup . nil) (\u0026#34;urgent\u0026#34; . ?u) (\u0026#34;key\u0026#34; . ?k) (\u0026#34;bonus\u0026#34; . ?b) (\u0026#34;noexport\u0026#34; . ?x))) (setq org-tag-faces \u0026#39;((\u0026#34;home\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;research\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;work\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;tool\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;dev\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;report\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;urgent\u0026#34; . (:foreground \u0026#34;red\u0026#34; :weight bold)) (\u0026#34;key\u0026#34; . (:foreground \u0026#34;red\u0026#34; :weight bold)) (\u0026#34;easy\u0026#34; . (:foreground \u0026#34;green4\u0026#34; :weight bold)) (\u0026#34;medium\u0026#34; . (:foreground \u0026#34;orange\u0026#34; :weight bold)) (\u0026#34;hard\u0026#34; . (:foreground \u0026#34;red\u0026#34; :weight bold)) (\u0026#34;bonus\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;noexport\u0026#34; . (:foreground \u0026#34;LimeGreen\u0026#34; :weight bold)))) ;; (defun log-todo-next-creation-date (\u0026amp;rest ignore) ;; \u0026#34;Log NEXT creation time in the property drawer under the key \u0026#39;ACTIVATED\u0026#39;\u0026#34; ;; (when (and (string= (org-get-todo-state) \u0026#34;NEXT\u0026#34;) ;; (not (org-entry-get nil \u0026#34;ACTIVATED\u0026#34;))) ;; (org-entry-put nil \u0026#34;ACTIVATED\u0026#34; (format-time-string \u0026#34;[%Y-%m-%d]\u0026#34;)))) ;; (add-hook \u0026#39;org-after-todo-state-change-hook #\u0026#39;log-todo-next-creation-date) Agenda Set files for org-agenda\n(setq org-agenda-files (list (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) (expand-file-name \u0026#34;agenda.org\u0026#34; org-directory) (expand-file-name \u0026#34;gcal-agenda.org\u0026#34; org-directory) (expand-file-name \u0026#34;notes.org\u0026#34; org-directory) (expand-file-name \u0026#34;projects.org\u0026#34; org-directory) (expand-file-name \u0026#34;archive.org\u0026#34; org-directory))) Apply some styling on the standard agenda:\n;; Agenda styling (setq org-agenda-block-separator ?─ org-agenda-time-grid \u0026#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) \u0026#34; ┄┄┄┄┄ \u0026#34; \u0026#34;┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\u0026#34;) org-agenda-current-time-string \u0026#34;⭠ now ─────────────────────────────────────────────────\u0026#34;) Super agenda Configure org-super-agenda\n(use-package! org-super-agenda :after org-agenda :config (org-super-agenda-mode) :init (setq org-agenda-skip-scheduled-if-done t org-agenda-skip-deadline-if-done t org-agenda-include-deadlines t org-agenda-block-separator nil org-agenda-tags-column 100 ;; from testing this seems to be a good value org-agenda-compact-blocks t) (setq org-agenda-custom-commands \u0026#39;((\u0026#34;o\u0026#34; \u0026#34;Overview\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span \u0026#39;day) (org-super-agenda-groups \u0026#39;((:name \u0026#34;Today\u0026#34; :time-grid t :date today :todo \u0026#34;TODAY\u0026#34; :scheduled today :order 1))))) (alltodo \u0026#34;\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;) (org-super-agenda-groups \u0026#39;((:name \u0026#34;Next to do\u0026#34; :todo \u0026#34;NEXT\u0026#34; :order 1) (:name \u0026#34;Important\u0026#34; :tag \u0026#34;Important\u0026#34; :priority \u0026#34;A\u0026#34; :order 6) (:name \u0026#34;Due Today\u0026#34; :deadline today :order 2) (:name \u0026#34;Due Soon\u0026#34; :deadline future :order 8) (:name \u0026#34;Overdue\u0026#34; :deadline past :face error :order 7) (:name \u0026#34;Assignments\u0026#34; :tag \u0026#34;Assignment\u0026#34; :order 10) (:name \u0026#34;Issues\u0026#34; :tag \u0026#34;Issue\u0026#34; :order 12) (:name \u0026#34;Emacs\u0026#34; :tag \u0026#34;Emacs\u0026#34; :order 13) (:name \u0026#34;Projects\u0026#34; :tag \u0026#34;Project\u0026#34; :order 14) (:name \u0026#34;Research\u0026#34; :tag \u0026#34;Research\u0026#34; :order 15) (:name \u0026#34;To read\u0026#34; :tag \u0026#34;Read\u0026#34; :order 30) (:name \u0026#34;Waiting\u0026#34; :todo \u0026#34;WAIT\u0026#34; :order 20) (:name \u0026#34;University\u0026#34; :tag \u0026#34;Univ\u0026#34; :order 32) (:name \u0026#34;Trivial\u0026#34; :priority\u0026lt;= \u0026#34;E\u0026#34; :tag (\u0026#34;Trivial\u0026#34; \u0026#34;Unimportant\u0026#34;) :todo (\u0026#34;SOMEDAY\u0026#34;) :order 90) (:discard (:tag (\u0026#34;Chore\u0026#34; \u0026#34;Routine\u0026#34; \u0026#34;Daily\u0026#34;)))))))))))) Calendar Google calendar (org-gcal) I store my org-gcal configuration privately, it contains something like this:\n(setq org-gcal-client-id \u0026#34;\u0026lt;SOME_ID\u0026gt;.apps.googleusercontent.com\u0026#34; org-gcal-client-secret \u0026#34;\u0026lt;SOME_SECRET\u0026gt;\u0026#34; org-gcal-fetch-file-alist \u0026#39;((\u0026#34;\u0026lt;USERNAME\u0026gt;@gmail.com\u0026#34; . \u0026#34;~/Dropbox/Org/gcal-agenda.org\u0026#34;))) (after! org-gcal (load! \u0026#34;lisp/private/+org-gcal.el\u0026#34;)) TODO CalDAV Need to be configured, see the github repo.\n(use-package! caldav :commands (org-caldav-sync)) Capture Set capture files\n(setq +org-capture-emails-file (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) +org-capture-todo-file (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) +org-capture-projects-file (expand-file-name \u0026#34;projects.org\u0026#34; org-directory)) Lets set up some org-capture templates, and make them visually nice to access.\n(use-package! doct :commands (doct)) (after! org-capture \u0026lt;\u0026lt;prettify-capture\u0026gt;\u0026gt; (defun +doct-icon-declaration-to-icon (declaration) \u0026#34;Convert :icon declaration to icon\u0026#34; (let ((name (pop declaration)) (set (intern (concat \u0026#34;all-the-icons-\u0026#34; (plist-get declaration :set)))) (face (intern (concat \u0026#34;all-the-icons-\u0026#34; (plist-get declaration :color)))) (v-adjust (or (plist-get declaration :v-adjust) 0.01))) (apply set `(,name :face ,face :v-adjust ,v-adjust)))) (defun +doct-iconify-capture-templates (groups) \u0026#34;Add declaration\u0026#39;s :icon to each template group in GROUPS.\u0026#34; (let ((templates (doct-flatten-lists-in groups))) (setq doct-templates (mapcar (lambda (template) (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template)) (spec (plist-get (plist-get props :doct) :icon))) (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec) \u0026#34;\\t\u0026#34; (nth 1 template)))) template) templates)))) (setq doct-after-conversion-functions \u0026#39;(+doct-iconify-capture-templates)) (defun set-org-capture-templates () (setq org-capture-templates (doct `((\u0026#34;Personal todo\u0026#34; :keys \u0026#34;t\u0026#34; :icon (\u0026#34;checklist\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;green\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Inbox\u0026#34; :type entry :template (\u0026#34;* TODO %?\u0026#34; \u0026#34;%i %a\u0026#34;)) (\u0026#34;Personal note\u0026#34; :keys \u0026#34;n\u0026#34; :icon (\u0026#34;sticky-note-o\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;green\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Inbox\u0026#34; :type entry :template (\u0026#34;* %?\u0026#34; \u0026#34;%i %a\u0026#34;)) (\u0026#34;Email\u0026#34; :keys \u0026#34;e\u0026#34; :icon (\u0026#34;envelope\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Inbox\u0026#34; :type entry :template (\u0026#34;* TODO %^{type|reply to|contact} %\\\\3 %? ✉️\u0026#34; \u0026#34;Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}\u0026#34; \u0026#34;about %^{topic}\u0026#34; \u0026#34;%U %i %a\u0026#34;)) (\u0026#34;Interesting\u0026#34; :keys \u0026#34;i\u0026#34; :icon (\u0026#34;eye\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;lcyan\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Interesting\u0026#34; :type entry :template (\u0026#34;* [ ] %{desc}%? :%{i-type}:\u0026#34; \u0026#34;%i %a\u0026#34;) :children ((\u0026#34;Webpage\u0026#34; :keys \u0026#34;w\u0026#34; :icon (\u0026#34;globe\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;green\u0026#34;) :desc \u0026#34;%(org-cliplink-capture) \u0026#34; :i-type \u0026#34;read:web\u0026#34;) (\u0026#34;Article\u0026#34; :keys \u0026#34;a\u0026#34; :icon (\u0026#34;file-text\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :desc \u0026#34;\u0026#34; :i-type \u0026#34;read:reaserch\u0026#34;) (\u0026#34;Information\u0026#34; :keys \u0026#34;i\u0026#34; :icon (\u0026#34;info-circle\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;) :desc \u0026#34;\u0026#34; :i-type \u0026#34;read:info\u0026#34;) (\u0026#34;Idea\u0026#34; :keys \u0026#34;I\u0026#34; :icon (\u0026#34;bubble_chart\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;silver\u0026#34;) :desc \u0026#34;\u0026#34; :i-type \u0026#34;idea\u0026#34;))) (\u0026#34;Tasks\u0026#34; :keys \u0026#34;k\u0026#34; :icon (\u0026#34;inbox\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Tasks\u0026#34; :type entry :template (\u0026#34;* TODO %? %^G%{extra}\u0026#34; \u0026#34;%i %a\u0026#34;) :children ((\u0026#34;General Task\u0026#34; :keys \u0026#34;k\u0026#34; :icon (\u0026#34;inbox\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :extra \u0026#34;\u0026#34; ) (\u0026#34;Task with deadline\u0026#34; :keys \u0026#34;d\u0026#34; :icon (\u0026#34;timer\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;orange\u0026#34; :v-adjust -0.1) :extra \u0026#34;\\nDEADLINE: %^{Deadline:}t\u0026#34; ) (\u0026#34;Scheduled Task\u0026#34; :keys \u0026#34;s\u0026#34; :icon (\u0026#34;calendar\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;orange\u0026#34;) :extra \u0026#34;\\nSCHEDULED: %^{Start time:}t\u0026#34;))) (\u0026#34;Project\u0026#34; :keys \u0026#34;p\u0026#34; :icon (\u0026#34;repo\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;silver\u0026#34;) :prepend t :type entry :headline \u0026#34;Inbox\u0026#34; :template (\u0026#34;* %{time-or-todo} %?\u0026#34; \u0026#34;%i\u0026#34; \u0026#34;%a\u0026#34;) :file \u0026#34;\u0026#34; :custom (:time-or-todo \u0026#34;\u0026#34;) :children ((\u0026#34;Project-local todo\u0026#34; :keys \u0026#34;t\u0026#34; :icon (\u0026#34;checklist\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;green\u0026#34;) :time-or-todo \u0026#34;TODO\u0026#34; :file +org-capture-project-todo-file) (\u0026#34;Project-local note\u0026#34; :keys \u0026#34;n\u0026#34; :icon (\u0026#34;sticky-note\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :time-or-todo \u0026#34;%U\u0026#34; :file +org-capture-project-notes-file) (\u0026#34;Project-local changelog\u0026#34; :keys \u0026#34;c\u0026#34; :icon (\u0026#34;list\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;) :time-or-todo \u0026#34;%U\u0026#34; :heading \u0026#34;Unreleased\u0026#34; :file +org-capture-project-changelog-file))) (\u0026#34;\\tCentralised project templates\u0026#34; :keys \u0026#34;o\u0026#34; :type entry :prepend t :template (\u0026#34;* %{time-or-todo} %?\u0026#34; \u0026#34;%i\u0026#34; \u0026#34;%a\u0026#34;) :children ((\u0026#34;Project todo\u0026#34; :keys \u0026#34;t\u0026#34; :prepend nil :time-or-todo \u0026#34;TODO\u0026#34; :heading \u0026#34;Tasks\u0026#34; :file +org-capture-central-project-todo-file) (\u0026#34;Project note\u0026#34; :keys \u0026#34;n\u0026#34; :time-or-todo \u0026#34;%U\u0026#34; :heading \u0026#34;Notes\u0026#34; :file +org-capture-central-project-notes-file) (\u0026#34;Project changelog\u0026#34; :keys \u0026#34;c\u0026#34; :time-or-todo \u0026#34;%U\u0026#34; :heading \u0026#34;Unreleased\u0026#34; :file +org-capture-central-project-changelog-file))))))) (set-org-capture-templates) (unless (display-graphic-p) (add-hook \u0026#39;server-after-make-frame-hook (defun org-capture-reinitialise-hook () (when (display-graphic-p) (set-org-capture-templates) (remove-hook \u0026#39;server-after-make-frame-hook #\u0026#39;org-capture-reinitialise-hook)))))) It would also be nice to improve how the capture dialogue looks\n(defun org-capture-select-template-prettier (\u0026amp;optional keys) \u0026#34;Select a capture template, in a prettier way than default Lisp programs can force the template by setting KEYS to a string.\u0026#34; (let ((org-capture-templates (or (org-contextualize-keys (org-capture-upgrade-templates org-capture-templates) org-capture-templates-contexts) \u0026#39;((\u0026#34;t\u0026#34; \u0026#34;Task\u0026#34; entry (file+headline \u0026#34;\u0026#34; \u0026#34;Tasks\u0026#34;) \u0026#34;* TODO %?\\n %u\\n %a\u0026#34;))))) (if keys (or (assoc keys org-capture-templates) (error \u0026#34;No capture template referred to by \\\u0026#34;%s\\\u0026#34; keys\u0026#34; keys)) (org-mks org-capture-templates \u0026#34;Select a capture template\\n━━━━━━━━━━━━━━━━━━━━━━━━━\u0026#34; \u0026#34;Template key: \u0026#34; `((\u0026#34;q\u0026#34; ,(concat (all-the-icons-octicon \u0026#34;stop\u0026#34; :face \u0026#39;all-the-icons-red :v-adjust 0.01) \u0026#34;\\tAbort\u0026#34;))))))) (advice-add \u0026#39;org-capture-select-template :override #\u0026#39;org-capture-select-template-prettier) (defun org-mks-pretty (table title \u0026amp;optional prompt specials) \u0026#34;Select a member of an alist with multiple keys. Prettified. TABLE is the alist which should contain entries where the car is a string. There should be two types of entries. 1. prefix descriptions like (\\\u0026#34;a\\\u0026#34; \\\u0026#34;Description\\\u0026#34;) This indicates that `a\u0026#39; is a prefix key for multi-letter selection, and that there are entries following with keys like \\\u0026#34;ab\\\u0026#34;, \\\u0026#34;ax\\\u0026#34;… 2. Select-able members must have more than two elements, with the first being the string of keys that lead to selecting it, and the second a short description string of the item. The command will then make a temporary buffer listing all entries that can be selected with a single key, and all the single key prefixes. When you press the key for a single-letter entry, it is selected. When you press a prefix key, the commands (and maybe further prefixes) under this key will be shown and offered for selection. TITLE will be placed over the selection in the temporary buffer, PROMPT will be used when prompting for a key. SPECIALS is an alist with (\\\u0026#34;key\\\u0026#34; \\\u0026#34;description\\\u0026#34;) entries. When one of these is selected, only the bare key is returned.\u0026#34; (save-window-excursion (let ((inhibit-quit t) (buffer (org-switch-to-buffer-other-window \u0026#34;*Org Select*\u0026#34;)) (prompt (or prompt \u0026#34;Select: \u0026#34;)) case-fold-search current) (unwind-protect (catch \u0026#39;exit (while t (setq-local evil-normal-state-cursor (list nil)) (erase-buffer) (insert title \u0026#34;\\n\\n\u0026#34;) (let ((des-keys nil) (allowed-keys \u0026#39;(\u0026#34;\\C-g\u0026#34;)) (tab-alternatives \u0026#39;(\u0026#34;\\s\u0026#34; \u0026#34;\\t\u0026#34; \u0026#34;\\r\u0026#34;)) (cursor-type nil)) ;; Populate allowed keys and descriptions keys ;; available with CURRENT selector. (let ((re (format \u0026#34;\\\\`%s\\\\(.\\\\)\\\\\u0026#39;\u0026#34; (if current (regexp-quote current) \u0026#34;\u0026#34;))) (prefix (if current (concat current \u0026#34; \u0026#34;) \u0026#34;\u0026#34;))) (dolist (entry table) (pcase entry ;; Description. (`(,(and key (pred (string-match re))) ,desc) (let ((k (match-string 1 key))) (push k des-keys) ;; Keys ending in tab, space or RET are equivalent. (if (member k tab-alternatives) (push \u0026#34;\\t\u0026#34; allowed-keys) (push k allowed-keys)) (insert (propertize prefix \u0026#39;face \u0026#39;font-lock-comment-face) (propertize k \u0026#39;face \u0026#39;bold) (propertize \u0026#34;›\u0026#34; \u0026#39;face \u0026#39;font-lock-comment-face) \u0026#34; \u0026#34; desc \u0026#34;…\u0026#34; \u0026#34;\\n\u0026#34;))) ;; Usable entry. (`(,(and key (pred (string-match re))) ,desc . ,_) (let ((k (match-string 1 key))) (insert (propertize prefix \u0026#39;face \u0026#39;font-lock-comment-face) (propertize k \u0026#39;face \u0026#39;bold) \u0026#34; \u0026#34; desc \u0026#34;\\n\u0026#34;) (push k allowed-keys))) (_ nil)))) ;; Insert special entries, if any. (when specials (insert \u0026#34;─────────────────────────\\n\u0026#34;) (pcase-dolist (`(,key ,description) specials) (insert (format \u0026#34;%s %s\\n\u0026#34; (propertize key \u0026#39;face \u0026#39;(bold all-the-icons-red)) description)) (push key allowed-keys))) ;; Display UI and let user select an entry or ;; a sublevel prefix. (goto-char (point-min)) (unless (pos-visible-in-window-p (point-max)) (org-fit-window-to-buffer)) (let ((pressed (org--mks-read-key allowed-keys prompt (not (pos-visible-in-window-p (1- (point-max))))))) (setq current (concat current pressed)) (cond ((equal pressed \u0026#34;\\C-g\u0026#34;) (user-error \u0026#34;Abort\u0026#34;)) ;; Selection is a prefix: open a new menu. ((member pressed des-keys)) ;; Selection matches an association: return it. ((let ((entry (assoc current table))) (and entry (throw \u0026#39;exit entry)))) ;; Selection matches a special entry: return the ;; selection prefix. ((assoc current specials) (throw \u0026#39;exit current)) (t (error \u0026#34;No entry available\u0026#34;))))))) (when buffer (kill-buffer buffer)))))) (advice-add \u0026#39;org-mks :override #\u0026#39;org-mks-pretty) The org-capture bin is rather nice, but I\u0026rsquo;d be nicer with a smaller frame, and no modeline.\n(setf (alist-get \u0026#39;height +org-capture-frame-parameters) 15) ;; (alist-get \u0026#39;name +org-capture-frame-parameters) \u0026#34;❖ Capture\u0026#34;) ;; ATM hardcoded in other places, so changing breaks stuff (setq +org-capture-fn (lambda () (interactive) (set-window-parameter nil \u0026#39;mode-line-format \u0026#39;none) (org-capture))) Roam Org-roam is nice by itself, but there are so extra nice packages which integrate with it.\n(use-package! websocket :after org-roam-ui) (use-package! org-roam-ui :commands org-roam-ui-open :config (setq org-roam-ui-sync-theme t org-roam-ui-follow t org-roam-ui-update-on-save t org-roam-ui-open-on-start t)) Basic settings (setq org-roam-directory \u0026#34;~/Dropbox/Org/slip-box\u0026#34;) (setq org-roam-db-location (expand-file-name \u0026#34;org-roam.db\u0026#34; org-roam-directory)) That said, if the directory doesn\u0026rsquo;t exist we likely don\u0026rsquo;t want to be using roam. Since we don\u0026rsquo;t want to trigger errors (which will happen as soon as roam tries to initialize), let\u0026rsquo;s not load roam.\n(package! org-roam :disable t) Mode line file name All those numbers! It\u0026rsquo;s messy. Let\u0026rsquo;s adjust this similarly that I have in the window title\n(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun) :around #\u0026#39;doom-modeline-buffer-file-name ; takes no args (if (s-contains-p org-roam-directory (or buffer-file-name \u0026#34;\u0026#34;)) (replace-regexp-in-string \u0026#34;\\\\(?:^\\\\|.*/\\\\)\\\\([0-9]\\\\{4\\\\}\\\\)\\\\([0-9]\\\\{2\\\\}\\\\)\\\\([0-9]\\\\{2\\\\}\\\\)[0-9]*-\u0026#34; \u0026#34;🢔(\\\\1-\\\\2-\\\\3) \u0026#34; (subst-char-in-string ?_ ? buffer-file-name)) (funcall orig-fun))) Org Roam Capture template (after! org-roam (setq org-roam-capture-ref-templates \u0026#39;((\u0026#34;r\u0026#34; \u0026#34;ref\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;web/%\u0026lt;%Y%m%d%H%M%S\u0026gt;-${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+created: %U\\n\\n${body}\\n\u0026#34;) :unnarrowed t)))) Snippet Helpers I often want to set src-block headers, and it\u0026rsquo;s a pain to:\ntype them out remember what the accepted values are oh, and specifying the same language again and again We can solve this in three steps:\nhaving one-letter snippets, conditioned on (point) being within a src header creating a nice prompt showing accepted values and the current default pre-filling the src-block language with the last language used For header args, the keys I\u0026rsquo;ll use are:\nr for :results e for :exports v for :eval s for :session d for :dir (defun +yas/org-src-header-p () \u0026#34;Determine whether `point\u0026#39; is within a src-block header or header-args.\u0026#34; (pcase (org-element-type (org-element-context)) (\u0026#39;src-block (\u0026lt; (point) ; before code part of the src-block (save-excursion (goto-char (org-element-property :begin (org-element-context))) (forward-line 1) (point)))) (\u0026#39;inline-src-block (\u0026lt; (point) ; before code part of the inline-src-block (save-excursion (goto-char (org-element-property :begin (org-element-context))) (search-forward \u0026#34;]{\u0026#34;) (point)))) (\u0026#39;keyword (string-match-p \u0026#34;^header-args\u0026#34; (org-element-property :value (org-element-context)))))) Now let\u0026rsquo;s write a function we can reference in YASnippets to produce a nice interactive way to specify header arguments.\n(defun +yas/org-prompt-header-arg (arg question values) \u0026#34;Prompt the user to set ARG header property to one of VALUES with QUESTION. The default value is identified and indicated. If either default is selected, or no selection is made: nil is returned.\u0026#34; (let* ((src-block-p (not (looking-back \u0026#34;^#\\\\+property:[ \\t]+header-args:.*\u0026#34; (line-beginning-position)))) (default (or (cdr (assoc arg (if src-block-p (nth 2 (org-babel-get-src-block-info t)) (org-babel-merge-params org-babel-default-header-args (let ((lang-headers (intern (concat \u0026#34;org-babel-default-header-args:\u0026#34; (+yas/org-src-lang))))) (when (boundp lang-headers) (eval lang-headers t))))))) \u0026#34;\u0026#34;)) default-value) (setq values (mapcar (lambda (value) (if (string-match-p (regexp-quote value) default) (setq default-value (concat value \u0026#34; \u0026#34; (propertize \u0026#34;(default)\u0026#34; \u0026#39;face \u0026#39;font-lock-doc-face))) value)) values)) (let ((selection (consult--read question values :default default-value))) (unless (or (string-match-p \u0026#34;(default)$\u0026#34; selection) (string= \u0026#34;\u0026#34; selection)) selection)))) Finally, we fetch the language information for new source blocks.\nSince we\u0026rsquo;re getting this info, we might as well go a step further and also provide the ability to determine the most popular language in the buffer that doesn\u0026rsquo;t have any header-args set for it (with #+properties).\n(defun +yas/org-src-lang () \u0026#34;Try to find the current language of the src/header at `point\u0026#39;. Return nil otherwise.\u0026#34; (let ((context (org-element-context))) (pcase (org-element-type context) (\u0026#39;src-block (org-element-property :language context)) (\u0026#39;inline-src-block (org-element-property :language context)) (\u0026#39;keyword (when (string-match \u0026#34;^header-args:\\\\([^ ]+\\\\)\u0026#34; (org-element-property :value context)) (match-string 1 (org-element-property :value context))))))) (defun +yas/org-last-src-lang () \u0026#34;Return the language of the last src-block, if it exists.\u0026#34; (save-excursion (beginning-of-line) (when (re-search-backward \u0026#34;^[ \\t]*#\\\\+begin_src\u0026#34; nil t) (org-element-property :language (org-element-context))))) (defun +yas/org-most-common-no-property-lang () \u0026#34;Find the lang with the most source blocks that has no global header-args, else nil.\u0026#34; (let (src-langs header-langs) (save-excursion (goto-char (point-min)) (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+begin_src\u0026#34; nil t) (push (+yas/org-src-lang) src-langs)) (goto-char (point-min)) (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+property: +header-args\u0026#34; nil t) (push (+yas/org-src-lang) header-langs))) (setq src-langs (mapcar #\u0026#39;car ;; sort alist by frequency (desc.) (sort ;; generate alist with form (value . frequency) (cl-loop for (n . m) in (seq-group-by #\u0026#39;identity src-langs) collect (cons n (length m))) (lambda (a b) (\u0026gt; (cdr a) (cdr b)))))) (car (cl-set-difference src-langs header-langs :test #\u0026#39;string=)))) Translate capital keywords to lower case Everyone used to use #+CAPITAL keywords. Then people realised that #+lowercase is actually both marginally easier and visually nicer, so now the capital version is just used in the manual.\nOrg is standardized on lower case. Uppercase is used in the manual as a poor man\u0026rsquo;s bold, and supported for historical reasons. \u0026mdash; Nicolas Goaziou\n(defun +org-syntax-convert-keyword-case-to-lower () \u0026#34;Convert all #+KEYWORDS to #+keywords.\u0026#34; (interactive) (save-excursion (goto-char (point-min)) (let ((count 0) (case-fold-search nil)) (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+[A-Z_]+\u0026#34; nil t) (unless (s-matches-p \u0026#34;RESULTS\u0026#34; (match-string 0)) (replace-match (downcase (match-string 0)) t) (setq count (1+ count)))) (message \u0026#34;Replaced %d occurances\u0026#34; count)))) Org notifier Add support for org-wild-notifier.\n(use-package! org-wild-notifier :hook (org-load . org-wild-notifier-mode) :config (setq org-wild-notifier-alert-time \u0026#39;(60 30))) Custom links Sub-figures This defines a new link type subfig to enable exporting sub-figures to LaTeX, taken form \u0026ldquo;Export subfigures to LaTeX (and HTML)\u0026rdquo;.\n(org-link-set-parameters \u0026#34;subfig\u0026#34; :follow (lambda (file) (find-file file)) :face \u0026#39;(:foreground \u0026#34;chocolate\u0026#34; :weight bold :underline t) :display \u0026#39;full :export (lambda (file desc backend) (when (eq backend \u0026#39;latex) (if (string-match \u0026#34;\u0026gt;(\\\\(.+\\\\))\u0026#34; desc) (concat \u0026#34;\\\\begin{subfigure}[b]\u0026#34; \u0026#34;\\\\caption{\u0026#34; (replace-regexp-in-string \u0026#34;\\s+\u0026gt;(.+)\u0026#34; \u0026#34;\u0026#34; desc) \u0026#34;}\u0026#34; \u0026#34;\\\\includegraphics\u0026#34; \u0026#34;[\u0026#34; (match-string 1 desc) \u0026#34;]\u0026#34; \u0026#34;{\u0026#34; file \u0026#34;}\u0026#34; \u0026#34;\\\\end{subfigure}\u0026#34;) (format \u0026#34;\\\\begin{subfigure}\\\\includegraphics{%s}\\\\end{subfigure}\u0026#34; desc file))))) Example of usage:\n#+caption: Lorem impsum dolor #+attr_latex: :options \\centering #+begin_figure [[subfig:img1.jpg][Caption of img1 \u0026gt;(width=.3\\textwidth)]] [[subfig:img2.jpg][Caption of img2 \u0026gt;(width=.3\\textwidth)]] [[subfig:img3.jpg][Caption of img3 \u0026gt;(width=.6\\textwidth)]] #+end_figure LaTeX inline markup Needs to make a ?, with this hack you can write [[latex:textsc][Some text]].\n(org-add-link-type \u0026#34;latex\u0026#34; nil (lambda (path desc format) (cond ((eq format \u0026#39;html) (format \u0026#34;\u0026lt;span class=\\\u0026#34;%s\\\u0026#34;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; path desc)) ((eq format \u0026#39;latex) (format \u0026#34;\\\\%s{%s}\u0026#34; path desc))))) Visuals Here I try to do two things: improve the styling of the various documents, via font changes etc., and also propagate colours from the current theme.\nFont display Headings Let\u0026rsquo;s make the title and the headings a bit bigger:\n(custom-set-faces! \u0026#39;(org-document-title :height 1.2)) (custom-set-faces! \u0026#39;(outline-1 :weight extra-bold :height 1.25) \u0026#39;(outline-2 :weight bold :height 1.15) \u0026#39;(outline-3 :weight bold :height 1.12) \u0026#39;(outline-4 :weight semi-bold :height 1.09) \u0026#39;(outline-5 :weight semi-bold :height 1.06) \u0026#39;(outline-6 :weight semi-bold :height 1.03) \u0026#39;(outline-8 :weight semi-bold) \u0026#39;(outline-9 :weight semi-bold)) Deadlines It seems reasonable to have deadlines in the error face when they\u0026rsquo;re passed.\n(setq org-agenda-deadline-faces \u0026#39;((1.001 . error) (1.000 . org-warning) (0.500 . org-upcoming-deadline) (0.000 . org-upcoming-distant-deadline))) Font styling We can then have quote blocks stand out a bit more by making them italic.\n(setq org-fontify-quote-and-verse-blocks t) While org-hide-emphasis-markers is very nice, it can sometimes make edits which occur at the border a bit more fiddley. We can improve this situation without sacrificing visual amenities with the org-appear package.\n(use-package! org-appear :hook (org-mode . org-appear-mode) :config (setq org-appear-autoemphasis t org-appear-autosubmarkers t org-appear-autolinks nil) ;; for proper first-time setup, `org-appear--set-elements\u0026#39; ;; needs to be run after other hooks have acted. (run-at-time nil nil #\u0026#39;org-appear--set-elements)) Inline blocks (setq org-inline-src-prettify-results \u0026#39;(\u0026#34;⟨\u0026#34; . \u0026#34;⟩\u0026#34;) doom-themes-org-fontify-special-tags nil) Org Modern (use-package! org-modern :hook (org-mode . org-modern-mode) :config (setq org-modern-star \u0026#39;(\u0026#34;◉\u0026#34; \u0026#34;○\u0026#34; \u0026#34;◈\u0026#34; \u0026#34;◇\u0026#34; \u0026#34;✳\u0026#34; \u0026#34;◆\u0026#34; \u0026#34;✸\u0026#34; \u0026#34;▶\u0026#34;) org-modern-table-vertical 1 org-modern-table-horizontal 1 org-modern-list \u0026#39;((43 . \u0026#34;➤\u0026#34;) (45 . \u0026#34;–\u0026#34;) (42 . \u0026#34;•\u0026#34;)) org-modern-footnote (cons nil (cadr org-script-display)) org-modern-priority nil org-modern-horizontal-rule t org-modern-todo-faces \u0026#39;((\u0026#34;TODO\u0026#34; :inverse-video t :inherit org-todo) (\u0026#34;PROJ\u0026#34; :inverse-video t :inherit +org-todo-project) (\u0026#34;STRT\u0026#34; :inverse-video t :inherit +org-todo-active) (\u0026#34;[-]\u0026#34; :inverse-video t :inherit +org-todo-active) (\u0026#34;HOLD\u0026#34; :inverse-video t :inherit +org-todo-onhold) (\u0026#34;WAIT\u0026#34; :inverse-video t :inherit +org-todo-onhold) (\u0026#34;[?]\u0026#34; :inverse-video t :inherit +org-todo-onhold) (\u0026#34;KILL\u0026#34; :inverse-video t :inherit +org-todo-cancel) (\u0026#34;NO\u0026#34; :inverse-video t :inherit +org-todo-cancel)) org-modern-keyword \u0026#39;((t . t) (\u0026#34;title\u0026#34; . \u0026#34;𝙏\u0026#34;) (\u0026#34;subtitle\u0026#34; . \u0026#34;𝙩\u0026#34;) (\u0026#34;author\u0026#34; . \u0026#34;𝘼\u0026#34;) (\u0026#34;email\u0026#34; . \u0026#34;@\u0026#34;) (\u0026#34;date\u0026#34; . \u0026#34;𝘿\u0026#34;) (\u0026#34;property\u0026#34; . \u0026#34;☸\u0026#34;) (\u0026#34;options\u0026#34; . \u0026#34;⌥\u0026#34;) (\u0026#34;startup\u0026#34; . \u0026#34;⏻\u0026#34;) (\u0026#34;macro\u0026#34; . \u0026#34;𝓜\u0026#34;) (\u0026#34;bind\u0026#34; . #(\u0026#34;\u0026#34; 0 1 (display (raise -0.1)))) (\u0026#34;bibliography\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;print_bibliography\u0026#34; . #(\u0026#34;\u0026#34; 0 1 (display (raise -0.1)))) (\u0026#34;cite_export\u0026#34; . \u0026#34;⮭\u0026#34;) (\u0026#34;print_glossary\u0026#34; . #(\u0026#34;ᴬᶻ\u0026#34; 0 1 (display (raise -0.1)))) (\u0026#34;glossary_sources\u0026#34; . #(\u0026#34;\u0026#34; 0 1 (display (raise -0.14)))) (\u0026#34;export_file_name\u0026#34; . \u0026#34;⇒\u0026#34;) (\u0026#34;include\u0026#34; . \u0026#34;⇤\u0026#34;) (\u0026#34;setupfile\u0026#34; . \u0026#34;⇐\u0026#34;) (\u0026#34;html_head\u0026#34; . \u0026#34;🅷\u0026#34;) (\u0026#34;html\u0026#34; . \u0026#34;🅗\u0026#34;) (\u0026#34;latex_class\u0026#34; . \u0026#34;🄻\u0026#34;) (\u0026#34;latex_class_options\u0026#34; . #(\u0026#34;🄻\u0026#34; 1 2 (display (raise -0.14)))) (\u0026#34;latex_header\u0026#34; . \u0026#34;🅻\u0026#34;) (\u0026#34;latex_header_extra\u0026#34; . \u0026#34;🅻⁺\u0026#34;) (\u0026#34;latex\u0026#34; . \u0026#34;🅛\u0026#34;) (\u0026#34;beamer_theme\u0026#34; . \u0026#34;🄱\u0026#34;) (\u0026#34;beamer_color_theme\u0026#34; . #(\u0026#34;🄱\u0026#34; 1 2 (display (raise -0.12)))) (\u0026#34;beamer_font_theme\u0026#34; . \u0026#34;🄱𝐀\u0026#34;) (\u0026#34;beamer_header\u0026#34; . \u0026#34;🅱\u0026#34;) (\u0026#34;beamer\u0026#34; . \u0026#34;🅑\u0026#34;) (\u0026#34;attr_latex\u0026#34; . \u0026#34;🄛\u0026#34;) (\u0026#34;attr_html\u0026#34; . \u0026#34;🄗\u0026#34;) (\u0026#34;attr_org\u0026#34; . \u0026#34;⒪\u0026#34;) (\u0026#34;name\u0026#34; . \u0026#34;⁍\u0026#34;) (\u0026#34;header\u0026#34; . \u0026#34;›\u0026#34;) (\u0026#34;caption\u0026#34; . \u0026#34;☰\u0026#34;) (\u0026#34;RESULTS\u0026#34; . \u0026#34;🠶\u0026#34;) (\u0026#34;language\u0026#34; . \u0026#34;𝙇\u0026#34;) (\u0026#34;hugo_base_dir\u0026#34; . \u0026#34;𝐇\u0026#34;) (\u0026#34;latex_compiler\u0026#34; . \u0026#34;⟾\u0026#34;) (\u0026#34;results\u0026#34; . \u0026#34;🠶\u0026#34;) (\u0026#34;filetags\u0026#34; . \u0026#34;#\u0026#34;) (\u0026#34;created\u0026#34; . \u0026#34;⏱\u0026#34;) (\u0026#34;export_select_tags\u0026#34; . \u0026#34;✔\u0026#34;) (\u0026#34;export_exclude_tags\u0026#34; . \u0026#34;❌\u0026#34;))) (custom-set-faces! \u0026#39;(org-modern-statistics :inherit org-checkbox-statistics-todo))) Not let\u0026rsquo;s remove the overlap between the substitutions we set here and those that Doom applies via :ui ligatures and :lang org.\n(defadvice! +org-init-appearance-h--no-ligatures-a () :after #\u0026#39;+org-init-appearance-h (set-ligatures! \u0026#39;org-mode :name nil :src_block nil :src_block_end nil :quote nil :quote_end nil)) We’ll bind this to O on the org-mode localleader, and manually apply a PR recognising the pgtk window system.\n(use-package! org-ol-tree :commands org-ol-tree :config (setq org-ol-tree-ui-icon-set (if (and (display-graphic-p) (fboundp \u0026#39;all-the-icons-material)) \u0026#39;all-the-icons \u0026#39;unicode)) (org-ol-tree-ui--update-icon-set)) (map! :map org-mode-map :after org :localleader :desc \u0026#34;Outline\u0026#34; \u0026#34;O\u0026#34; #\u0026#39;org-ol-tree) Image previews ;; From https://www.reddit.com/r/orgmode/comments/i6hl8b/comment/g1vsef2/ ;; Scale image previews to 60% of the window width. (setq org-image-actual-width (truncate (* (window-pixel-width) 0.6))) List bullet sequence I think it makes sense to have list bullets change with depth\n(setq org-list-demote-modify-bullet \u0026#39;((\u0026#34;+\u0026#34; . \u0026#34;-\u0026#34;) (\u0026#34;-\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;*\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;1.\u0026#34; . \u0026#34;a.\u0026#34;))) Symbols ;; Org styling, hide markup etc. (setq org-hide-emphasis-markers t org-pretty-entities t org-ellipsis \u0026#34; ↩\u0026#34; org-hide-leading-stars t) ;; org-priority-highest ?A ;; org-priority-lowest ?E ;; org-priority-faces ;; \u0026#39;((?A . \u0026#39;all-the-icons-red) ;; (?B . \u0026#39;all-the-icons-orange) ;; (?C . \u0026#39;all-the-icons-yellow) ;; (?D . \u0026#39;all-the-icons-green) ;; (?E . \u0026#39;all-the-icons-blue))) LaTeX fragments Prettier highlighting First off, we want those fragments to look good.\n(setq org-highlight-latex-and-related \u0026#39;(native script entities)) However, by using native highlighting the org-block face is added, and that doesn\u0026rsquo;t look too great \u0026mdash; particularly when the fragments are previewed.\nIdeally org-src-font-lock-fontify-block wouldn\u0026rsquo;t add the org-block face, but we can avoid advising that entire function by just adding another face with :inherit default which will override the background color.\nInspecting org-do-latex-and-related shows that \u0026quot;latex\u0026quot; is the language argument passed, and so we can override the background as discussed above.\n(require \u0026#39;org-src) (add-to-list \u0026#39;org-src-block-faces \u0026#39;(\u0026#34;latex\u0026#34; (:inherit default :extend t))) Prettier rendering It\u0026rsquo;s nice to customize the look of LaTeX fragments.\n;; (setq org-format-latex-header \u0026#34;\\\\documentclass{article} ;; \\\\usepackage[svgnames]{xcolor} ;; \\\\usepackage[T1]{fontenc} ;; \\\\usepackage{booktabs} ;; \\\\pagestyle{empty} % do not remove ;; \\\\setlength{\\\\textwidth}{\\\\paperwidth} ;; \\\\addtolength{\\\\textwidth}{-3cm} ;; \\\\setlength{\\\\oddsidemargin}{1.5cm} ;; \\\\addtolength{\\\\oddsidemargin}{-2.54cm} ;; \\\\setlength{\\\\evensidemargin}{\\\\oddsidemargin} ;; \\\\setlength{\\\\textheight}{\\\\paperheight} ;; \\\\addtolength{\\\\textheight}{-\\\\headheight} ;; \\\\addtolength{\\\\textheight}{-\\\\headsep} ;; \\\\addtolength{\\\\textheight}{-\\\\footskip} ;; \\\\addtolength{\\\\textheight}{-3cm} ;; \\\\setlength{\\\\topmargin}{1.5cm} ;; \\\\addtolength{\\\\topmargin}{-2.54cm} ;; \\\\usepackage{arev} ;; \u0026#34;) Since we can, instead of making the background color match the default face, let\u0026rsquo;s make it transparent.\n(setq org-format-latex-options (plist-put org-format-latex-options :background \u0026#34;Transparent\u0026#34;)) ;; Can be dvipng, dvisvgm, imagemagick (setq org-preview-latex-default-process \u0026#39;dvisvgm) ;; Define a function to set the format latex scale (to be reused in hooks) (defun +org-format-latex-set-scale (scale) (setq org-format-latex-options (plist-put org-format-latex-options :scale scale))) ;; Set the default scale (+org-format-latex-set-scale 1.4) ;; Increase scale in Zen mode (when (featurep! :ui zen) (add-hook! \u0026#39;writeroom-mode-enable-hook (+org-format-latex-set-scale 2.0)) (add-hook! \u0026#39;writeroom-mode-disable-hook (+org-format-latex-set-scale 1.4))) Better equation numbering Numbered equations all have (1) as the number for fragments with vanilla org-mode. This code (from scimax) injects the correct numbers into the previews so they look good. Not working right now!\n(defun +scimax-org-renumber-environment (orig-func \u0026amp;rest args) \u0026#34;A function to inject numbers in LaTeX fragment previews.\u0026#34; (let ((results \u0026#39;()) (counter -1) (numberp)) (setq results (cl-loop for (begin . env) in (org-element-map (org-element-parse-buffer) \u0026#39;latex-environment (lambda (env) (cons (org-element-property :begin env) (org-element-property :value env)))) collect (cond ((and (string-match \u0026#34;\\\\\\\\begin{equation}\u0026#34; env) (not (string-match \u0026#34;\\\\\\\\tag{\u0026#34; env))) (cl-incf counter) (cons begin counter) (message \u0026#34;Entered equation env, counter=%d\u0026#34; counter)) ((string-match \u0026#34;\\\\\\\\begin{align}\u0026#34; env) (prog2 (cl-incf counter) (cons begin counter) (with-temp-buffer (insert env) (goto-char (point-min)) ;; \\\\ is used for a new line. Each one leads to a number (cl-incf counter (count-matches \u0026#34;\\\\\\\\$\u0026#34;)) ;; unless there are nonumbers. (goto-char (point-min)) (cl-decf counter (count-matches \u0026#34;\\\\nonumber\u0026#34;))))) (t (cons begin nil))))) (when (setq numberp (cdr (assoc (point) results))) (setf (car args) (concat (format \u0026#34;\\\\setcounter{equation}{%s}\\n\u0026#34; numberp) (car args))))) (apply orig-func args)) (defun +scimax-toggle-latex-equation-numbering () \u0026#34;Toggle whether LaTeX fragments are numbered.\u0026#34; (interactive) (if (not (get \u0026#39;+scimax-org-renumber-environment \u0026#39;enabled)) (progn (advice-add \u0026#39;org-create-formula-image :around #\u0026#39;+scimax-org-renumber-environment) (put \u0026#39;+scimax-org-renumber-environment \u0026#39;enabled t) (message \u0026#34;LaTeX numbering enabled.\u0026#34;)) (advice-remove \u0026#39;org-create-formula-image #\u0026#39;+scimax-org-renumber-environment) (put \u0026#39;+scimax-org-renumber-environment \u0026#39;enabled nil) (message \u0026#34;LaTeX numbering disabled.\u0026#34;))) (defun +scimax-org-inject-latex-fragment (orig-func \u0026amp;rest args) \u0026#34;Advice function to inject latex code before and/or after the equation in a latex fragment. You can use this to set \\\\mathversion{bold} for example to make it bolder. The way it works is by defining :latex-fragment-pre-body and/or :latex-fragment-post-body in the variable `org-format-latex-options\u0026#39;. These strings will then be injected before and after the code for the fragment before it is made into an image.\u0026#34; (setf (car args) (concat (or (plist-get org-format-latex-options :latex-fragment-pre-body) \u0026#34;\u0026#34;) (car args) (or (plist-get org-format-latex-options :latex-fragment-post-body) \u0026#34;\u0026#34;))) (apply orig-func args)) (defun +scimax-toggle-inject-latex () \u0026#34;Toggle whether you can insert latex in fragments.\u0026#34; (interactive) (if (not (get \u0026#39;+scimax-org-inject-latex-fragment \u0026#39;enabled)) (progn (advice-add \u0026#39;org-create-formula-image :around #\u0026#39;+scimax-org-inject-latex-fragment) (put \u0026#39;+scimax-org-inject-latex-fragment \u0026#39;enabled t) (message \u0026#34;Inject latex enabled\u0026#34;)) (advice-remove \u0026#39;org-create-formula-image #\u0026#39;+scimax-org-inject-latex-fragment) (put \u0026#39;+scimax-org-inject-latex-fragment \u0026#39;enabled nil) (message \u0026#34;Inject latex disabled\u0026#34;))) Fragtog Hook org-fragtog-mode to org-mode.\n(use-package! org-fragtog :hook (org-mode . org-fragtog-mode)) Org plot We can use some variables in org-plot to use the current doom theme colors.\n(after! org-plot (defun org-plot/generate-theme (_type) \u0026#34;Use the current Doom theme colours to generate a GnuPlot preamble.\u0026#34; (format \u0026#34; fgt = \\\u0026#34;textcolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground text fgat = \\\u0026#34;textcolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground alt text fgl = \\\u0026#34;linecolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground line fgal = \\\u0026#34;linecolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground alt line # foreground colors set border lc rgb \u0026#39;%s\u0026#39; # change text colors of tics set xtics @fgt set ytics @fgt # change text colors of labels set title @fgt set xlabel @fgt set ylabel @fgt # change a text color of key set key @fgt # line styles set linetype 1 lw 2 lc rgb \u0026#39;%s\u0026#39; # red set linetype 2 lw 2 lc rgb \u0026#39;%s\u0026#39; # blue set linetype 3 lw 2 lc rgb \u0026#39;%s\u0026#39; # green set linetype 4 lw 2 lc rgb \u0026#39;%s\u0026#39; # magenta set linetype 5 lw 2 lc rgb \u0026#39;%s\u0026#39; # orange set linetype 6 lw 2 lc rgb \u0026#39;%s\u0026#39; # yellow set linetype 7 lw 2 lc rgb \u0026#39;%s\u0026#39; # teal set linetype 8 lw 2 lc rgb \u0026#39;%s\u0026#39; # violet # palette set palette maxcolors 8 set palette defined ( 0 \u0026#39;%s\u0026#39;,\\ 1 \u0026#39;%s\u0026#39;,\\ 2 \u0026#39;%s\u0026#39;,\\ 3 \u0026#39;%s\u0026#39;,\\ 4 \u0026#39;%s\u0026#39;,\\ 5 \u0026#39;%s\u0026#39;,\\ 6 \u0026#39;%s\u0026#39;,\\ 7 \u0026#39;%s\u0026#39; ) \u0026#34; (doom-color \u0026#39;fg) (doom-color \u0026#39;fg-alt) (doom-color \u0026#39;fg) (doom-color \u0026#39;fg-alt) (doom-color \u0026#39;fg) ;; colours (doom-color \u0026#39;red) (doom-color \u0026#39;blue) (doom-color \u0026#39;green) (doom-color \u0026#39;magenta) (doom-color \u0026#39;orange) (doom-color \u0026#39;yellow) (doom-color \u0026#39;teal) (doom-color \u0026#39;violet) ;; duplicated (doom-color \u0026#39;red) (doom-color \u0026#39;blue) (doom-color \u0026#39;green) (doom-color \u0026#39;magenta) (doom-color \u0026#39;orange) (doom-color \u0026#39;yellow) (doom-color \u0026#39;teal) (doom-color \u0026#39;violet) )) (defun org-plot/gnuplot-term-properties (_type) (format \u0026#34;background rgb \u0026#39;%s\u0026#39; size 1050,650\u0026#34; (doom-color \u0026#39;bg))) (setq org-plot/gnuplot-script-preamble #\u0026#39;org-plot/generate-theme) (setq org-plot/gnuplot-term-extra #\u0026#39;org-plot/gnuplot-term-properties)) Bibliography BibTeX (setq bibtex-completion-bibliography \u0026#39;(\u0026#34;~/Zotero/library.bib\u0026#34;) bibtex-completion-library-path \u0026#39;(\u0026#34;~/Zotero/storage/\u0026#34;) bibtex-completion-notes-path \u0026#34;~/PhD/bibliography/notes/\u0026#34; bibtex-completion-notes-template-multiple-files \u0026#34;* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \\n\\nSee [[cite:\u0026amp;${=key=}]]\\n\u0026#34; bibtex-completion-additional-search-fields \u0026#39;(keywords) bibtex-completion-display-formats \u0026#39;((article . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\u0026#34;) (inbook . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\u0026#34;) (incollection . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\u0026#34;) (inproceedings . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\u0026#34;) (t . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}\u0026#34;)) bibtex-completion-pdf-open-function (lambda (fpath) (call-process \u0026#34;open\u0026#34; nil 0 nil fpath))) Org-bib A mode to work with annotated bibliography in Org-Mode. See the repo for an example.\n(use-package! org-bib :commands (org-bib-mode)) Org-cite (after! oc (setq org-cite-csl-styles-dir \u0026#34;~/Zotero/styles\u0026#34;) (defun org-ref-to-org-cite () \u0026#34;Attempt to convert org-ref citations to org-cite syntax.\u0026#34; (interactive) (let* ((cite-conversions \u0026#39;((\u0026#34;cite\u0026#34; . \u0026#34;//b\u0026#34;) (\u0026#34;Cite\u0026#34; . \u0026#34;//bc\u0026#34;) (\u0026#34;nocite\u0026#34; . \u0026#34;/n\u0026#34;) (\u0026#34;citep\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;citep*\u0026#34; . \u0026#34;//f\u0026#34;) (\u0026#34;parencite\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;Parencite\u0026#34; . \u0026#34;//c\u0026#34;) (\u0026#34;citeauthor\u0026#34; . \u0026#34;/a/f\u0026#34;) (\u0026#34;citeauthor*\u0026#34; . \u0026#34;/a\u0026#34;) (\u0026#34;citeyear\u0026#34; . \u0026#34;/na/b\u0026#34;) (\u0026#34;Citep\u0026#34; . \u0026#34;//c\u0026#34;) (\u0026#34;Citealp\u0026#34; . \u0026#34;//bc\u0026#34;) (\u0026#34;Citeauthor\u0026#34; . \u0026#34;/a/cf\u0026#34;) (\u0026#34;Citeauthor*\u0026#34; . \u0026#34;/a/c\u0026#34;) (\u0026#34;autocite\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;Autocite\u0026#34; . \u0026#34;//c\u0026#34;) (\u0026#34;notecite\u0026#34; . \u0026#34;/l/b\u0026#34;) (\u0026#34;Notecite\u0026#34; . \u0026#34;/l/bc\u0026#34;) (\u0026#34;pnotecite\u0026#34; . \u0026#34;/l\u0026#34;) (\u0026#34;Pnotecite\u0026#34; . \u0026#34;/l/bc\u0026#34;))) (cite-regexp (rx (regexp (regexp-opt (mapcar #\u0026#39;car cite-conversions) t)) \u0026#34;:\u0026#34; (group (+ (not (any \u0026#34;\\n ,.)]}\u0026#34;))))))) (save-excursion (goto-char (point-min)) (while (re-search-forward cite-regexp nil t) (message (format \u0026#34;[cite%s:@%s]\u0026#34; (cdr (assoc (match-string 1) cite-conversions)) (match-string 2))) (replace-match (format \u0026#34;[cite%s:@%s]\u0026#34; (cdr (assoc (match-string 1) cite-conversions)) (match-string 2)))))))) Org-ref Use Org as LaTeX!\n(use-package! org-ref :after org :config (defadvice! org-ref-open-bibtex-pdf-a () :override #\u0026#39;org-ref-open-bibtex-pdf (save-excursion (bibtex-beginning-of-entry) (let* ((bibtex-expand-strings t) (entry (bibtex-parse-entry t)) (key (reftex-get-bib-field \u0026#34;=key=\u0026#34; entry)) (pdf (or (car (-filter (lambda (f) (string-match-p \u0026#34;\\\\.pdf$\u0026#34; f)) (split-string (reftex-get-bib-field \u0026#34;file\u0026#34; entry) \u0026#34;;\u0026#34;))) (funcall \u0026#39;org-ref-get-pdf-filename key)))) (if (file-exists-p pdf) (org-open-file pdf) (ding))))) (defadvice! org-ref-open-pdf-at-point-a () \u0026#34;Open the pdf for bibtex key under point if it exists.\u0026#34; :override #\u0026#39;org-ref-open-pdf-at-point (interactive) (let* ((results (org-ref-get-bibtex-key-and-file)) (key (car results)) (pdf-file (funcall \u0026#39;org-ref-get-pdf-filename key))) (with-current-buffer (find-file-noselect (cdr results)) (save-excursion (bibtex-search-entry (car results)) (org-ref-open-bibtex-pdf))))) ;; Add keybinding to insert link (map! :localleader :map org-mode-map :desc \u0026#34;Org-ref insert link\u0026#34; \u0026#34;C\u0026#34; #\u0026#39;org-ref-insert-link)) Citar (setq citar-library-paths \u0026#39;(\u0026#34;~/Zotero/storage\u0026#34;) citar-notes-paths \u0026#39;(\u0026#34;~/PhD/bibliography/notes/\u0026#34;) citar-bibliography \u0026#39;(\u0026#34;~/Zotero/library.bib\u0026#34;)) Exporting General settings By default Org only exports the first three levels of headings as \u0026hellip; headings. This is rather unfortunate as my documents frequently stray far beyond three levels of depth. The two main formats I care about exporting to are LaTeX and HTML. When using an article class, LaTeX headlines go from \\section, \\subsection, \\subsubsection, and \\paragraph to \\subgraph \u0026mdash; five levels. HTML5 has six levels of headings (\u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;), but first level Org headings get exported as \u0026lt;h2\u0026gt; elements \u0026mdash; leaving five usable levels.\nAs such, it would seem to make sense to recognize the first five levels of Org headings when exporting.\n(setq org-export-headline-levels 5) ;; I like nesting I\u0026rsquo;m also going to make use of an item in ox-extra so that I can add an :ignore: tag to headings for the content to be kept, but the heading itself ignored (unlike :noexport: which ignored both heading and content). This is useful when I want to use headings to provide a structure for writing that doesn\u0026rsquo;t appear in the final documents.\n(require \u0026#39;ox-extra) (ox-extras-activate \u0026#39;(ignore-headlines)) Since I (roughly) track Org HEAD, it makes sense to include the git version in the creator string.\n(setq org-export-creator-string (format \u0026#34;Emacs %s (Org mode %s)\u0026#34; emacs-version (org-release))) LaTeX export Compiling By default Org uses pdflatex × 3 + bibtex. This simply won\u0026rsquo;t do in our modern world. latexmk + biber (which is used automatically with latexmk) is a simply superior combination.\n;; `org-latex-compilers\u0026#39; contains a list of possible values (\u0026#34;pdflatex\u0026#34; \u0026#34;xelatex\u0026#34; \u0026#34;lualatex\u0026#34;) ;; for the `%latex\u0026#39; argument. (setq org-latex-pdf-process \u0026#39;(\u0026#34;latexmk -shell-escape -pdf -quiet -f -%latex -interaction=nonstopmode -output-directory=%o %f\u0026#34;)) Org LaTeX packages ;; Add \u0026#39;svg\u0026#39; package to display SVG pictures (uses inkscape, imagemagik and ghostscript) ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;\u0026#34; \u0026#34;svg\u0026#34;)) ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;\u0026#34; \u0026#34;fontspec\u0026#34;)) ;; for xelatex ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;utf8\u0026#34; \u0026#34;inputenc\u0026#34;)) Export PDFs with syntax highlighting ;; this is for code syntax highlighting in export. you need to use ;; -shell-escape with latex, and install pygments. ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;svgnames\u0026#34; \u0026#34;xcolor\u0026#34;)) ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;\u0026#34; \u0026#34;minted\u0026#34;)) ;; (setq org-latex-listings \u0026#39;minted) ;; Per document, in local variables (setq org-latex-minted-options \u0026#39;((\u0026#34;frame\u0026#34; \u0026#34;lines\u0026#34;) (\u0026#34;fontsize\u0026#34; \u0026#34;\\\\footnotesize\u0026#34;) (\u0026#34;tabsize\u0026#34; \u0026#34;2\u0026#34;) (\u0026#34;breaklines\u0026#34; \u0026#34;\u0026#34;) (\u0026#34;breakanywhere\u0026#34; \u0026#34;\u0026#34;) ;; break anywhere, no just on spaces (\u0026#34;style\u0026#34; \u0026#34;default\u0026#34;) (\u0026#34;bgcolor\u0026#34; \u0026#34;GhostWhite\u0026#34;) (\u0026#34;linenos\u0026#34; \u0026#34;\u0026#34;))) (dolist (pair \u0026#39;((ipython \u0026#34;python\u0026#34;) (jupyter \u0026#34;python\u0026#34;) (scheme \u0026#34;scheme\u0026#34;) (lisp-data \u0026#34;lisp\u0026#34;) (conf \u0026#34;ini\u0026#34;) (conf-unix \u0026#34;unixconfig\u0026#34;) (conf-space \u0026#34;unixconfig\u0026#34;) (conf-toml \u0026#34;yaml\u0026#34;) (gitconfig \u0026#34;ini\u0026#34;) (systemd \u0026#34;ini\u0026#34;) (gdb-script \u0026#34;text\u0026#34;))) (unless (member pair org-latex-minted-langs) (add-to-list \u0026#39;org-latex-minted-langs pair))) Class templates (after! ox-latex (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;scr-article\u0026#34; \u0026#34;\\\\documentclass{scrartcl}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;lettre\u0026#34; \u0026#34;\\\\documentclass{lettre}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;blank\u0026#34; \u0026#34;[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;bmc-article\u0026#34; \u0026#34;\\\\documentclass[article,code,maths]{bmc}\\n[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;bmc\u0026#34; \u0026#34;\\\\documentclass[code,maths]{bmc}\\n[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34; (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;IEEEtran\u0026#34; \u0026#34;\\\\documentclass{IEEEtran}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;ieeeconf\u0026#34; \u0026#34;\\\\documentclass{ieeeconf}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;sagej\u0026#34; \u0026#34;\\\\documentclass{sagej}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;thesis\u0026#34; \u0026#34;\\\\documentclass[11pt]{book}\u0026#34; (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;thesis-fr\u0026#34; \u0026#34;\\\\documentclass[french,12pt,a4paper]{book}\u0026#34; (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)))) (setq org-latex-default-class \u0026#34;article\u0026#34;) ;; org-latex-tables-booktabs t ;; org-latex-reference-command \u0026#34;\\\\cref{%s}\u0026#34;) Hugo Update files with last modified date, when #+lastmod: is available\n(setq time-stamp-active t time-stamp-start \u0026#34;#\\\\+lastmod:[ \\t]*\u0026#34; time-stamp-end \u0026#34;$\u0026#34; time-stamp-format \u0026#34;%04Y-%02m-%02d\u0026#34;) (add-hook \u0026#39;before-save-hook \u0026#39;time-stamp nil) Text editing Plain text It\u0026rsquo;s nice to see ANSI color codes displayed. However, until Emacs 28 it\u0026rsquo;s not possible to do this without modifying the buffer, so let\u0026rsquo;s condition this block on that.\n(after! text-mode (add-hook! \u0026#39;text-mode-hook (unless (derived-mode-p \u0026#39;org-mode) ;; Apply ANSI color codes (with-silent-modifications (ansi-color-apply-on-region (point-min) (point-max) t))))) Academic phrases When writing your academic paper, you might get stuck trying to find the right phrase that captures your intention. This package tries to alleviate that problem by presenting you with a list of phrases organized by the topic or by the paper section that you are writing. This package has around 600 phrases so far.\nThis is based on the book titled \u0026ldquo;English for Writing Research - Papers Useful Phrases\u0026rdquo;.\n(use-package! academic-phrases :commands (academic-phrases academic-phrases-by-section)) Quarto Integration of Quarto in Emacs.\n(package! quarto-mode) (use-package! quarto-mode :when QUARTO-OK-P) System configuration Mime types Org mode files Org mode isn\u0026rsquo;t recognized as its own mime type by default, but that can easily be changed with the following file. For system-wide changes try /usr/share/mime/packages/org.xml.\n\u0026lt;mime-info xmlns=\u0026#39;http://www.freedesktop.org/standards/shared-mime-info\u0026#39;\u0026gt; \u0026lt;mime-type type=\u0026#34;text/org\u0026#34;\u0026gt; \u0026lt;comment\u0026gt;Emacs Org-mode File\u0026lt;/comment\u0026gt; \u0026lt;glob pattern=\u0026#34;*.org\u0026#34;/\u0026gt; \u0026lt;alias type=\u0026#34;text/org\u0026#34;/\u0026gt; \u0026lt;/mime-type\u0026gt; \u0026lt;/mime-info\u0026gt; What\u0026rsquo;s nice is that Papirus now has an icon for text/org. One simply needs to refresh their mime database:\nupdate-mime-database ~/.local/share/mime Then set Emacs as the default editor:\nxdg-mime default emacs-client.desktop text/org Registering org-protocol:// The recommended method of registering a protocol is by registering a desktop application, which seems reasonable.\n[Desktop Entry] Name=Emacs Org-Protocol Exec=emacsclient %u Icon=/home/hacko/.doom.d/assets/org-mode.svg Type=Application Terminal=false MimeType=x-scheme-handler/org-protocol To associate org-protocol:// links with the desktop file:\nxdg-mime default org-protocol.desktop x-scheme-handler/org-protocol Configuring Chrome/Brave As specified in the official documentation, we would like to invoke the org-protocol:// without confirmation. To do this, we need to add this system-wide configuration.\nread -p \u0026#34;Do you want to set Chrome/Brave to show the \u0026#39;Always open ...\u0026#39; checkbox, to be used with the \u0026#39;org-protocol://\u0026#39; registration? [Y | N]: \u0026#34; INSTALL_CONFIRM if [[ $INSTALL_CONFIRM == \u0026#34;Y\u0026#34; ]] then sudo mkdir -p /etc/opt/chrome/policies/managed/ sudo tee /etc/opt/chrome/policies/managed/external_protocol_dialog.json \u0026gt; /dev/null \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; { \u0026#34;ExternalProtocolDialogShowAlwaysOpenCheckbox\u0026#34;: true } EOF sudo chmod 644 /etc/opt/chrome/policies/managed/external_protocol_dialog.json fi Then add a bookmarklet in your browser with this code:\njavascript:location.href = \u0026#39;org-protocol://roam-ref?template=r\u0026amp;ref=\u0026#39; + encodeURIComponent(location.href) + \u0026#39;\u0026amp;title=\u0026#39; + encodeURIComponent(document.title) + \u0026#39;\u0026amp;body=\u0026#39; + encodeURIComponent(window.getSelection()) Git Git diffs Based on this gist and this article.\n*.tex diff=tex *.bib diff=bibtex *.{c,h,c++,h++,cc,hh,cpp,hpp} diff=cpp *.m diff=matlab *.py diff=python *.rb diff=ruby *.php diff=php *.pl diff=perl *.{html,xhtml} diff=html *.f diff=fortran *.{el,lisp,scm} diff=lisp *.r diff=rstats *.texi* diff=texinfo *.org diff=org *.rs diff=rust *.odt diff=odt *.odp diff=libreoffice *.ods diff=libreoffice *.doc diff=doc *.xls diff=xls *.ppt diff=ppt *.docx diff=docx *.xlsx diff=xlsx *.pptx diff=pptx *.rtf diff=rtf *.{png,jpg,jpeg,gif} diff=exif *.pdf diff=pdf *.djvu diff=djvu *.epub diff=pandoc *.chm diff=tika *.mhtml? diff=tika *.{class,jar} diff=tika *.{rar,7z,zip,apk} diff=tika Then adding some regular expressions for it to ~/.config/git/config, with some tools to view diffs on binary files.\n# ====== TEXT FORMATS ====== [diff \u0026#34;org\u0026#34;] xfuncname = \u0026#34;^(\\\\*+ +.*)$\u0026#34; [diff \u0026#34;lisp\u0026#34;] xfuncname = \u0026#34;^(\\\\(.*)$\u0026#34; [diff \u0026#34;rstats\u0026#34;] xfuncname = \u0026#34;^([a-zA-z.]+ \u0026lt;- function.*)$\u0026#34; [diff \u0026#34;texinfo\u0026#34;] # from http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=blob;f=.gitattributes;h=c3b2926c78c939d94358cc63d051a70d38cfea5d;hb=HEAD xfuncname = \u0026#34;^@node[ \\t][ \\t]*\\\\([^,][^,]*\\\\)\u0026#34; [diff \u0026#34;rust\u0026#34;] xfuncname = \u0026#34;^[ \\t]*(pub|)[ \\t]*((fn|struct|enum|impl|trait|mod)[^;]*)$\u0026#34; # ===== BINARY FORMATS ===== [diff \u0026#34;pdf\u0026#34;] binary = true # textconv = pdfinfo # textconv = sh -c \u0026#39;pdftotext \u0026#34;$@\u0026#34; -\u0026#39; # sudo apt install pdftotext textconv = sh -c \u0026#39;pdftotext -layout \u0026#34;$0\u0026#34; -enc UTF-8 -nopgbrk -q -\u0026#39; cachetextconv = true [diff \u0026#34;djvu\u0026#34;] binary = true # textconv = pdfinfo textconv = djvutxt # yay -S djvulibre cachetextconv = true [diff \u0026#34;odt\u0026#34;] textconv = odt2txt # textconv = pandoc --standalone --from=odt --to=plain binary = true cachetextconv = true [diff \u0026#34;doc\u0026#34;] # textconv = wvText textconv = catdoc # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;xls\u0026#34;] # textconv = in2csv # textconv = xlscat -a UTF-8 # textconv = soffice --headless --convert-to csv textconv = xls2csv # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;ppt\u0026#34;] textconv = catppt # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;docx\u0026#34;] textconv = pandoc --standalone --from=docx --to=plain # textconv = sh -c \u0026#39;docx2txt.pl \u0026#34;$0\u0026#34; -\u0026#39; binary = true cachetextconv = true [diff \u0026#34;xlsx\u0026#34;] textconv = xlsx2csv # pip install xlsx2csv # textconv = in2csv # textconv = soffice --headless --convert-to csv binary = true cachetextconv = true [diff \u0026#34;pptx\u0026#34;] # pip install --user pptx2md (currently not wotking with Python 3.10) # textconv = sh -c \u0026#39;pptx2md --disable_image --disable_wmf -i \u0026#34;$0\u0026#34; -o ~/.cache/git/presentation.md \u0026gt;/dev/null \u0026amp;\u0026amp; cat ~/.cache/git/presentation.md\u0026#39; # Alternative hack, convert PPTX to PPT, then use the catppt tool textconv = sh -c \u0026#39;soffice --headless --convert-to ppt --outdir /tmp \u0026#34;$0\u0026#34; \u0026amp;\u0026amp; TMP_FILENAME=$(basename -- \u0026#34;$0\u0026#34;) \u0026amp;\u0026amp; catppt \u0026#34;/tmp/${TMP_FILENAME%.*}.ppt\u0026#34;\u0026#39; binary = true cachetextconv = true [diff \u0026#34;rtf\u0026#34;] textconv = unrtf --text # yay -S unrtf binary = true cachetextconv = true [diff \u0026#34;epub\u0026#34;] textconv = pandoc --standalone --from=epub --to=plain binary = true cachetextconv = true [diff \u0026#34;tika\u0026#34;] textconv = tika --config=~/.local/share/tika/tika-conf.xml --text binary = true cachetextconv = true [diff \u0026#34;libreoffice\u0026#34;] textconv = soffice --cat binary = true cachetextconv = true [diff \u0026#34;exif\u0026#34;] binary = true textconv = exiftool # sudo apt install perl-image-exiftool Apache Tika App wrapper Apache Tika is a content detection and analysis framework. It detects and extracts metadata and text from over a thousand different file types. We will be using the Tika App in command-line mode to show some meaningful diff information for some binary files.\nFirst, let\u0026rsquo;s add a custom script to run tika-app:\n#!/bin/sh APACHE_TIKA_JAR=\u0026#34;$HOME/.local/share/tika/tika-app.jar\u0026#34; if [ -f ${APACHE_TIKA_JAR} ] then exec java -Dfile.encoding=UTF-8 -jar ${APACHE_TIKA_JAR} \u0026#34;$@\u0026#34; 2\u0026gt;/dev/null else echo \u0026#34;JAR file not found at ${APACHE_TIKA_JAR}\u0026#34; fi Add tika\u0026rsquo;s installation instructions to the setup.sh file.\nupdate_apache_tika () { TIKA_JAR_PATH=$HOME/.local/share/tika if [ ! -d ${TIKA_JAR_PATH} ] then mkdir -p ${TIKA_JAR_PATH} fi TIKA_BASE_URL=https://archive.apache.org/dist/tika/ TIKA_JAR_LINK=\u0026#34;${TIKA_JAR_PATH}/tika-app.jar\u0026#34; echo -n \u0026#34;Checking for new Apache Tika App version... \u0026#34; # Get the lastest version TIKA_VERSION=$( curl -s ${TIKA_BASE_URL} | # Get the page pandoc -f html -t plain | # Convert HTML page to plain text. awk \u0026#39;/([0-9]+\\.)+[0-1]\\// {print substr($1, 0, length($1)-1)}\u0026#39; | # Get the versions directories (pattern: X.X.X/) sort -rV | # Sort versions, the newest first head -n 1 # Get the first (newest) version ) if [ -z ${TIKA_VERSION} ] then echo \u0026#34;Failed, check your internet connection.\u0026#34; exit 1 fi echo \u0026#34;Lastest version is ${TIKA_VERSION}\u0026#34; TIKA_JAR=\u0026#34;${TIKA_JAR_PATH}/tika-app-${TIKA_VERSION}.jar\u0026#34; TIKA_JAR_URL=\u0026#34;${TIKA_BASE_URL}${TIKA_VERSION}/tika-app-${TIKA_VERSION}.jar\u0026#34; if [ ! -f ${TIKA_JAR} ] then echo \u0026#34;New version available!\u0026#34; read -p \u0026#34;Do you want to download Apache Tika App v${TIKA_VERSION}? [Y | N]: \u0026#34; INSTALL_CONFIRM if [[ $INSTALL_CONFIRM == \u0026#34;Y\u0026#34; ]] then curl -o ${TIKA_JAR} ${TIKA_JAR_URL} \u0026amp;\u0026amp; echo \u0026#34;Apache Tika App v${TIKA_VERSION} downloaded successfully\u0026#34; fi else echo \u0026#34;Apache Tika App is up-to-date, version ${TIKA_VERSION} already downloaded to \u0026#39;${TIKA_JAR}\u0026#39;\u0026#34; fi # Check the existance of the symbolic link if [ -L ${TIKA_JAR_LINK} ] then unlink ${TIKA_JAR_LINK} fi # Create a symbolic link to the installed version ln -s ${TIKA_JAR} ${TIKA_JAR_LINK} } update_apache_tika; When it detects that Tesseract is installed, Tika App will try to extract text from some file types. For some reason, it tries to use Tesseract with some compressed files like *.bz2, *.apk\u0026hellip; etc. I would like to disable this feature by exporting an XML config file which will be used when launching the Tika App (using --config=\u0026lt;tika-config.xml\u0026gt;).\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;parsers\u0026gt; \u0026lt;parser class=\u0026#34;org.apache.tika.parser.DefaultParser\u0026#34;\u0026gt; \u0026lt;parser-exclude class=\u0026#34;org.apache.tika.parser.ocr.TesseractOCRParser\u0026#34;/\u0026gt; \u0026lt;/parser\u0026gt; \u0026lt;/parsers\u0026gt; \u0026lt;/properties\u0026gt; Emacs\u0026rsquo; Systemd daemon Let\u0026rsquo;s define a Systemd service to launch Emacs server automatically.\n[Unit] Description=Emacs server daemon Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/ [Service] Type=forking ExecStart=sh -c \u0026#39;emacs --daemon \u0026amp;\u0026amp; emacsclient -c --eval \u0026#34;(delete-frame)\u0026#34;\u0026#39; ExecStop=/usr/bin/emacsclient --no-wait --eval \u0026#34;(progn (setq kill-emacs-hook nil) (kill-emacs))\u0026#34; Restart=on-failure [Install] WantedBy=default.target Which is then enabled by:\nsystemctl --user enable emacs.service For some reason if a frame isn\u0026rsquo;t opened early in the initialization process, the daemon doesn\u0026rsquo;t seem to like opening frames later \u0026mdash; hence the \u0026amp;\u0026amp; emacsclient part of the ExecStart value.\nEmacs Client Desktop integration It can now be nice to use this as a \u0026lsquo;default app\u0026rsquo; for opening files. If we add an appropriate desktop entry, and enable it in the desktop environment.\n[Desktop Entry] Name=Emacs (Client) GenericName=Text Editor Comment=A flexible platform for end-user applications MimeType=text/english;text/plain;text/org;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++; Exec=emacsclient -create-frame --frame-parameters=\u0026#34;\u0026#39;(fullscreen . maximized)\u0026#34; --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; --no-wait %F Icon=emacs Type=Application Terminal=false Categories=TextEditor;Utility; StartupWMClass=Emacs Keywords=Text;Editor; X-KDE-StartupNotify=false Command-line wrapper A wrapper around emacsclient:\nAccepting stdin by putting it in a temporary file and immediately opening it. Guessing that the tty is a good idea when $DISPLAY is unset (relevant with SSH sessions, among other things). With a whiff of 24-bit color support, sets TERM variable to a terminfo that (probably) announces 24-bit color support. Changes GUI emacsclient instances to be non-blocking by default (--no-wait), and instead take a flag to suppress this behavior (-w). I would use sh, but using arrays for argument manipulation is just too convenient, so I\u0026rsquo;ll raise the requirement to bash. Since arrays are the only \u0026rsquo;extra\u0026rsquo; compared to sh, other shells like ksh etc. should work too.\n#!/usr/bin/env bash force_tty=false force_wait=false stdin_mode=\u0026#34;\u0026#34; args=() usage () { echo -e \u0026#34;Usage: e [-t] [-m MODE] [OPTIONS] FILE [-] Emacs client convenience wrapper. Options: -h, --help Show this message -t, -nw, --tty Force terminal mode -w, --wait Don\u0026#39;t supply --no-wait to graphical emacsclient - Take stdin (when last argument) -m MODE, --mode MODE Mode to open stdin with -mm, --maximized Start Emacs client in maximized window Run emacsclient --help to see help for the emacsclient.\u0026#34; } while : do case \u0026#34;$1\u0026#34; in -t | -nw | --tty) force_tty=true shift ;; -w | --wait) force_wait=true shift ;; -m | --mode) stdin_mode=\u0026#34; ($2-mode)\u0026#34; shift 2 ;; -mm | --maximized) args+=(\u0026#34;--frame-parameters=\u0026#39;(fullscreen . maximized)\u0026#34;) shift ;; -h | --help) usage exit 0 ;; --*=*) set -- \u0026#34;$@\u0026#34; \u0026#34;${1%%=*}\u0026#34; \u0026#34;${1#*=}\u0026#34; shift ;; *) [ \u0026#34;$#\u0026#34; = 0 ] \u0026amp;\u0026amp; break args+=(\u0026#34;$1\u0026#34;) shift ;; esac done if [ ! \u0026#34;${#args[*]}\u0026#34; = 0 ] \u0026amp;\u0026amp; [ \u0026#34;${args[-1]}\u0026#34; = \u0026#34;-\u0026#34; ] then unset \u0026#39;args[-1]\u0026#39; TMP=\u0026#34;$(mktemp /tmp/emacsstdin-XXX)\u0026#34; cat \u0026gt; \u0026#34;$TMP\u0026#34; args+=(--eval \u0026#34;(let ((b (generate-new-buffer \\\u0026#34;*stdin*\\\u0026#34;))) (switch-to-buffer b) (insert-file-contents \\\u0026#34;$TMP\\\u0026#34;) (delete-file \\\u0026#34;$TMP\\\u0026#34;)${stdin_mode})\u0026#34;) fi if [ -z \u0026#34;$DISPLAY\u0026#34; ] || $force_tty then # detect terminals with sneaky 24-bit support if { [ \u0026#34;$COLORTERM\u0026#34; = truecolor ] || [ \u0026#34;$COLORTERM\u0026#34; = 24bit ]; } \\ \u0026amp;\u0026amp; [ \u0026#34;$(tput colors 2\u0026gt;/dev/null)\u0026#34; -lt 257 ] then if echo \u0026#34;$TERM\u0026#34; | grep -q \u0026#34;^\\w\\+-[0-9]\u0026#34; then termstub=\u0026#34;${TERM%%-*}\u0026#34; else termstub=\u0026#34;${TERM#*-}\u0026#34; fi if infocmp \u0026#34;$termstub-direct\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 then TERM=\u0026#34;$termstub-direct\u0026#34; else TERM=\u0026#34;xterm-direct\u0026#34; fi # should be fairly safe fi emacsclient --tty -create-frame --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; \u0026#34;${args[@]}\u0026#34; else if ! $force_wait then args+=(--no-wait) fi emacsclient -create-frame --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; \u0026#34;${args[@]}\u0026#34; fi Useful aliases Now, to set an alias to use e with magit, and then for maximum laziness we can set aliases for the terminal-forced variants.\n# Aliases to run emacs+magit alias magit=\u0026#39;e --eval \u0026#34;(progn (magit-status) (delete-other-windows))\u0026#34;\u0026#39; alias magitt=\u0026#39;e -t --eval \u0026#34;(progn (magit-status) (delete-other-windows))\u0026#34;\u0026#39; # Aliases to run emacs+mu4e alias emu=\u0026#39;e --eval \u0026#34;(progn (=mu4e) (delete-other-windows))\u0026#34;\u0026#39; alias emut=\u0026#39;e -t --eval \u0026#34;(progn (=mu4e) (delete-other-windows))\u0026#34;\u0026#39; And this to launch Emacs in terminal mode et, I use this as a default $EDITOR\n#!/usr/bin/env bash e -t \u0026#34;$@\u0026#34; And ev for use with $VISUAL:\n#!/usr/bin/env bash e -w \u0026#34;$@\u0026#34; export EDITOR=$HOME/.local/bin/et # export VISUAL=$HOME/.local/bin/ev AppImage Install/update the appimageupdatetool.AppImage tool:\nupdate_appimageupdatetool () { TOOL_NAME=appimageupdatetool MACHINE_ARCH=$(uname -m) APPIMAGE_UPDATE_TOOL_PATH=\u0026#34;$HOME/.local/bin/${TOOL_NAME}\u0026#34; APPIMAGE_UPDATE_TOOL_URL=\u0026#34;https://github.com/AppImage/AppImageUpdate/releases/download/continuous/${TOOL_NAME}-${MACHINE_ARCH}.AppImage\u0026#34; if [ -f ${APPIMAGE_UPDATE_TOOL_PATH} ] \u0026amp;\u0026amp; $APPIMAGE_UPDATE_TOOL_PATH -j ${APPIMAGE_UPDATE_TOOL_PATH} 2\u0026amp;\u0026gt;/dev/null then echo \u0026#34;${TOOL_NAME} already up to date\u0026#34; else if [ -f ${APPIMAGE_UPDATE_TOOL_PATH} ] then echo \u0026#34;Update available, downloading latest ${MACHINE_ARCH} version to ${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; mv ${APPIMAGE_UPDATE_TOOL_PATH} \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; else echo \u0026#34;${TOOL_NAME} not found, downloading latest ${MACHINE_ARCH} version to ${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; fi wget -O ${APPIMAGE_UPDATE_TOOL_PATH} ${APPIMAGE_UPDATE_TOOL_URL} \u0026amp;\u0026amp; # 2\u0026amp;\u0026gt;/dev/null echo \u0026#34;Downloaded ${TOOL_NAME}-${MACHINE_ARCH}.AppImage\u0026#34; \u0026amp;\u0026amp; [ -f \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; ] \u0026amp;\u0026amp; rm \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; chmod a+x ${APPIMAGE_UPDATE_TOOL_PATH} fi } update_appimageupdatetool; Oh-my-Zsh Path Path to your oh-my-zsh installation.\nexport ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; Themes and customization: Set name of the theme to load, if set to \u0026quot;random\u0026quot;, it will load a random theme each time oh-my-zsh is loaded, in which case, to know which specific one was loaded, run: echo $RANDOM_THEME See github.com/ohmyzsh/ohmyzsh/wiki/Themes.\n# Typewritten customizations TYPEWRITTEN_RELATIVE_PATH=\u0026#34;adaptive\u0026#34; TYPEWRITTEN_CURSOR=\u0026#34;underscore\u0026#34; ZSH_THEME=\u0026#34;typewritten/typewritten\u0026#34; # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; ) Behavior # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to disable bi-weekly auto-update checks. # DISABLE_AUTO_UPDATE=\u0026#34;true\u0026#34; # Uncomment the following line to automatically update without prompting. DISABLE_UPDATE_PROMPT=\u0026#34;true\u0026#34; # Uncomment the following line to change how often to auto-update (in days). export UPDATE_ZSH_DAYS=3 # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34; # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\u0026#34;true\u0026#34; # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34; # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\u0026#34;true\u0026#34; # Uncomment the following line to display red dots whilst waiting for completion. # COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34; # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34; # or set a custom format using the strftime function format specifications, # see \u0026#39;man strftime\u0026#39; for details. # HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34; Plugins # Would you like to use another custom folder than $ZSH/custom? ZSH_CUSTOM=$HOME/.config/my_ohmyzsh_customizations # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=( zsh-autosuggestions zsh-navigation-tools zsh-interactive-cd archlinux ssh-agent sudo docker systemd tmux python pip rust repo git cp rsync ripgrep fzf fd z ) Bootstrap Oh-my-Zsh source $ZSH/oh-my-zsh.sh Aliases # Aliases alias zshconfig=\u0026#34;vim ~/.zshrc\u0026#34; alias ohmyzsh=\u0026#34;ranger $ZSH\u0026#34; Zsh user configuration pbcopy and pbpaste I like to define MacOS-like commands (pbcopy and pbpaste) to copy and paste in terminal (from stdin, to stdout). The pbcopy and pbpaste are defined using either xclip or xsel, you would need to install these tools, otherwise we wouldn\u0026rsquo;t define the aliases.\n# Define aliases to \u0026#39;pbcopy\u0026#39; and \u0026#39;pbpaste\u0026#39; if command -v xclip \u0026amp;\u0026gt; /dev/null then # Define aliases using xclip alias pbcopy=\u0026#39;xclip -selection clipboard\u0026#39; alias pbpaste=\u0026#39;xclip -selection clipboard -o\u0026#39; elif command -v xsel \u0026amp;\u0026gt; /dev/null then # Define aliases using xsel alias pbcopy=\u0026#39;xsel --clipboard --input\u0026#39; alias pbpaste=\u0026#39;xsel --clipboard --output\u0026#39; fi netpaste Define a netpaste command to paste to a Pastebin server.\nalias netpaste=\u0026#39;curl -F file=@- 0x0.st\u0026#39; # OR \u0026#39;curl -F f:1=\u0026lt;- ix.io \u0026#39; Sudo GUI! And then define gsuon and gsuoff aliases to run graphical apps from terminal with root permissions, this requires xhost.\n# To run GUI apps from terminal with root permissions if command -v xhost \u0026amp;\u0026gt; /dev/null then alias gsuon=\u0026#39;xhost si:localuser:root\u0026#39; alias gsuoff=\u0026#39;xhost -si:localuser:root\u0026#39; fi Neovim Use Neovim instead of VIM to provide vi and vim commands.\n# NeoVim if command -v nvim \u0026amp;\u0026gt; /dev/null then alias vim=\u0026#34;nvim\u0026#34; alias vi=\u0026#34;nvim\u0026#34; fi ESP-IDF Add some aliases to work with the ESP-IDF framework.\nif [ -d $HOME/Softwares/src/esp-idf/ ] then alias esp-prepare-env=\u0026#39;source $HOME/Softwares/src/esp-idf/export.sh\u0026#39; alias esp-update=\u0026#39;echo \u0026#34;Updating ESP-IDF framework...\u0026#34; \u0026amp;\u0026amp; cd $HOME/src/esp-idf \u0026amp;\u0026amp; git pull --all \u0026amp;\u0026amp; echo \u0026#34;Updated successfully\u0026#34;\u0026#39; else alias esp-prepare-env=\u0026#39;echo \u0026#34;esp-idf repo not found. You can clone the esp-idf repo using git clone https://github.com/espressif/esp-idf.git\u0026#34;\u0026#39; alias esp-update=esp-prepare-env fi CLI wttrin client Define an alias to get weather information for my city:\nexport WTTRIN_CITY=Orsay alias wttrin=\u0026#39;curl wttr.in/$WTTRIN_CITY\u0026#39; alias wttrin2=\u0026#39;curl v2.wttr.in/$WTTRIN_CITY\u0026#39; Minicom Enable Meta key and colors in minicom:\nexport MINICOM=\u0026#39;-m -c on\u0026#39; Rust Define Rust sources path, and add packages installed from cargo to the PATH.\nexport RUST_SRC_PATH=$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/ export PATH=$PATH:$HOME/.cargo/bin I\u0026rsquo;m using the AUR package clang-format-static-bin, which provide multiple versions of Clang-format, I use it with some work projects requiring a specific version of Clang-format.\nClang-format export PATH=$PATH:/opt/clang-format-static CMake Add my manually installed libraries to CMake and PATH.\nexport CMAKE_PREFIX_PATH=$HOME/Softwares/src/install export PATH=$PATH:$HOME/Softwares/src/install/bin Node Set NPM installation path to local:\nNPM_PACKAGES=\u0026#34;${HOME}/.npm-packages\u0026#34; # Export NPM bin path export PATH=\u0026#34;$PATH:$NPM_PACKAGES/bin\u0026#34; # Preserve MANPATH if you already defined it somewhere in your config. # Otherwise, fall back to `manpath` so we can inherit from `/etc/manpath`. export MANPATH=\u0026#34;${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man\u0026#34; # Tell Node about these packages export NODE_PATH=\u0026#34;$NPM_PACKAGES/lib/node_modules:$NODE_PATH\u0026#34; Tell NPM to use this directory for its global package installs by adding this in ~/.npmrc:\nprefix = ~/.npm-packages Some useful stuff (fzf, opam, Doom Emacs\u0026hellip;)\ntmux I like to use tmux by default, even on my local sessions, I like to start a tmux in a default session on the first time I launch a terminal, and then, attach any other terminal to this default session:\n# If not running inside Emacs (via vterm/eshell...) if [ -z $INSIDE_EMACS ] then if command -v tmux \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; [ -z \u0026#34;$TMUX\u0026#34; ] then tmux attach -t default || tmux new -s default fi fi Other stuff # You may need to manually set your language environment # export LANG=en_US.UTF-8 # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then # export EDITOR=\u0026#39;vim\u0026#39; # else # export EDITOR=\u0026#39;mvim\u0026#39; # fi # Compilation flags # export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34; # FZF [ -f ~/.fzf.zsh ] \u0026amp;\u0026amp; source ~/.fzf.zsh # OPAM configuration [[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh \u0026gt; /dev/null 2\u0026gt; /dev/null # Add ~/.config/emacs/bin to path (for DOOM Emacs stuff) export PATH=$PATH:$HOME/.config/emacs/bin Define some environment variables.\nexport DS_DIR=~/PhD/datasets-no/experiment_images/ export DSO_BIN_DIR=~/PhD/workspace-no/vo/orig/dso/build/release/bin export DSO_RES_DIR=~/PhD/workspace-no/vo/orig/dso_results Load my bitwarden-cli session, exported to BW_SESSION.\nsource ~/.bitwarden-session System dark theme trick Zotero does not support dark mode (ATM), when using a system-wide dark theme (at least on KDE), Zotero UI gets messed up, to fix this, we can force Zotero to use its default GTK theme by defining the GTK_THEME=Default.\n[Desktop Entry] Type=Application Name=Zotero GenericName=A free, easy-to-use tool to help you collect, organize, cite, and share your research sources. Icon=zotero Exec=GTK_THEME=Default /usr/bin/zotero --url %u Categories=Office Terminal=false MimeType=x-scheme-handler/zotero Same thing for Scilab\n[Desktop Entry] Comment=Scientific software package for numerical computations Exec=GTK_THEME=Default scilab -f %f GenericName=Scientific Software Package Icon=scilab Name=Scilab StartupNotify=false Terminal=false Type=Application Categories=Science;Math; Keywords=Science;Math;Numerical;Simulation MimeType=application/x-scilab-sci;application/x-scilab-sce;application/x-scilab-tst;application/x-scilab-dem;application/x-scilab-sod;application/x-scilab-xcos;application/x-scilab-zcos;application/x-scilab-bin;application/x-scilab-cosf;application/x-scilab-cos; [Desktop Entry] Comment=Hybrid simulator Exec=GTK_THEME=Default xcos GenericName=Scientific Software Package Icon=xcos Name=Xcos StartupNotify=false Terminal=false Type=Application Categories=Science;Physics; Keywords=Science;Physics;Simulation MimeType=application/x-scilab-xcos;application/x-scilab-zcos;application/x-scilab-cosf;application/x-scilab-cos; Rust format For Rust code base, the file $HOME/.rustfmt.toml contains the global format settings, I like to set it to:\n# Rust edition 2018 edition = \u0026#34;2018\u0026#34; # Use Unix style newlines, with 2 spaces tabulation. newline_style = \u0026#34;Unix\u0026#34; tab_spaces = 2 hard_tabs = false # Make one line functions in a single line fn_single_line = true # Format strings format_strings = true # Increase the max line width max_width = 120 # Merge nested imports merge_imports = true # Enum and Struct alignement enum_discrim_align_threshold = 20 struct_field_align_threshold = 20 # Reorder impl items: type \u0026gt; const \u0026gt; macros \u0026gt; methods. reorder_impl_items = true # Comments and documentation formating wrap_comments = true normalize_comments = true normalize_doc_attributes = true format_code_in_doc_comments = true report_fixme = \u0026#34;Always\u0026#34; todo = \u0026#34;Always\u0026#34; eCryptfs Unlock and mount script #!/bin/sh -e # This script mounts a user\u0026#39;s confidential private folder # # Original by Michael Halcrow, IBM # Extracted to a stand-alone script by Dustin Kirkland \u0026lt;kirkland@ubuntu.com\u0026gt; # Modified by: Abdelhak Bougouffa \u0026lt;abougouffa@fedoraproject.org\u0026gt; # # This script: # * interactively prompts for a user\u0026#39;s wrapping passphrase (defaults to their # login passphrase) # * checks it for validity # * unwraps a users mount passphrase with their supplied wrapping passphrase # * inserts the mount passphrase into the keyring # * and mounts a user\u0026#39;s encrypted private folder PRIVATE_DIR=\u0026#34;Private\u0026#34; PW_ATTEMPTS=3 MESSAGE=`gettext \u0026#34;Enter your login passphrase:\u0026#34;` if [ -f $HOME/.ecryptfs/wrapping-independent ] then # use a wrapping passphrase different from the login passphrase MESSAGE=`gettext \u0026#34;Enter your wrapping passphrase:\u0026#34;` fi WRAPPED_PASSPHRASE_FILE=\u0026#34;$HOME/.ecryptfs/wrapped-passphrase\u0026#34; MOUNT_PASSPHRASE_SIG_FILE=\u0026#34;$HOME/.ecryptfs/$PRIVATE_DIR.sig\u0026#34; # First, silently try to perform the mount, which would succeed if the appropriate # key is available in the keyring if /sbin/mount.ecryptfs_private \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 then exit 0 fi # Otherwise, interactively prompt for the user\u0026#39;s password if [ -f \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; -a -f \u0026#34;$MOUNT_PASSPHRASE_SIG_FILE\u0026#34; ] then tries=0 while [ $tries -lt $PW_ATTEMPTS ] do LOGINPASS=`zenity --password --title \u0026#34;eCryptFS: $MESSAGE\u0026#34;` if [ $(wc -l \u0026lt; \u0026#34;$MOUNT_PASSPHRASE_SIG_FILE\u0026#34;) = \u0026#34;1\u0026#34; ] then # No filename encryption; only insert fek if printf \u0026#34;%s\\0\u0026#34; \u0026#34;$LOGINPASS\u0026#34; | ecryptfs-unwrap-passphrase \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; - | ecryptfs-add-passphrase - then break else zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Error: Your passphrase is incorrect\u0026#34; tries=$(($tries + 1)) continue fi else if printf \u0026#34;%s\\0\u0026#34; \u0026#34;$LOGINPASS\u0026#34; | ecryptfs-insert-wrapped-passphrase-into-keyring \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; - then break else zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Error: Your passphrase is incorrect\u0026#34; tries=$(($tries + 1)) continue fi fi done if [ $tries -ge $PW_ATTEMPTS ] then zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Too many incorrect password attempts, exiting\u0026#34; exit 1 fi /sbin/mount.ecryptfs_private else zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Encrypted private directory is not setup properly\u0026#34; exit 1 fi if grep -qs \u0026#34;$HOME/.Private $PWD ecryptfs \u0026#34; /proc/mounts 2\u0026gt;/dev/null; then zenity --info --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Your private directory has been mounted.\u0026#34; fi dolphin \u0026#34;$HOME/Private\u0026#34; exit 0 Desktop integration [Desktop Entry] Type=Application Version=1.0 Name=eCryptfs Unlock Private Directory Icon=unlock Exec=/home/hacko/.ecryptfs/ecryptfs-mount-private-gui Terminal=False GDB Early init I like to disable the initial message (containing copyright info and other stuff), the right way to do this is either by starting gdb with -q option, or (since GDB v11 I think), by setting in ~/.gdbearlyinit.\n# GDB early init file # Abdelhak Bougouffa (c) 2022 # Disable showing the initial message set startup-quietly Init GDB loads $HOME/.gdbinit at startup, I like to define some default options in this file, this is a WIP, but won\u0026rsquo;t evolve too much, as it is recommended to keep the .gdbinit simple. For the moment, it does just enable pretty printing, and defines c and n commands to wrap continue and next with a post refresh, this is just to avoid the annoying TUI when the program outputs to the stdout.\n# GDB init file # Abdelhak Bougouffa (c) 2022 # Save history set history save on set history filename ~/.gdb_history set history remove-duplicates 2048 # Set pretty print set print pretty on # This fixes the annoying ncurses TUI gliches and saves typing C-l each time to refresh the screen define cc continue refresh end define nn next refresh end guile \u0026lt;\u0026lt;guile-check-for-script\u0026gt;\u0026gt; end WIP: Guile Scheme per program/project script I often debug programs with a lot of arguments, I like to be able to set the arguments and the binary file to be launched in a per project script (currently using Guile Scheme). This bit of code checks if the gdb.scm file exists in the working directory, and if so, loads it.\nA more flexible way is to provide a per program config files (to debug a program named fft, I like to create a script named fft.scm which gets loaded after the file). The following is a WIP, for the moment, I need to call my custom command dbg-guile when GDB done loading symbols from the file, otherwise, the used (current-progspace) returns an object with no filename. I need a mechanism to hook the (dbg-find-and-load) to GDB\u0026rsquo;s load file functionality.\n(use-modules (gdb)) (define (dbg-check-and-load filename) (if (file-exists? filename) (begin (display (string-append \u0026#34;Found a Guile Scheme script, loading file \u0026#34; filename \u0026#34;\\n\u0026#34;)) (load filename) #t) #f)) (define (dbg-find-and-load) ;; Get the program name from the current progspace ;; For a program named \u0026#34;prog\u0026#34;, the priorities goes like this: ;; 1. a script with the same program name (prog.scm) exists in the current directory ;; 2. a script with the same program name (prog.scm) exists in the program directory ;; 3. a script with the name (gdb.scm) exists in the current directory (let ((dbg-prg-filename (progspace-filename (current-progspace)))) (if dbg-prg-filename (or (dbg-check-and-load (string-append (basename dbg-prg-filename) \u0026#34;.scm\u0026#34;)) (dbg-check-and-load (string-append dbg-prg-filename \u0026#34;.scm\u0026#34;))) (dbg-check-and-load \u0026#34;gdb.scm\u0026#34;)))) ;; Run by default (dbg-find-and-load) ;; Define a command to load binary specific config (register-command! (make-command \u0026#34;dbg-guile\u0026#34; #:invoke (lambda (self arg from-tty) (dbg-find-and-load)))) In my project, I create a gdb.scm (or \u0026lt;program-name\u0026gt;.scm) with something like this:\n;; Load program executable (execute \u0026#34;file ./build/bin/my_program\u0026#34;) ;; Load program arguments (execute (string-join \u0026#39;(\u0026#34;set args \u0026#34; \u0026#34;arg1\u0026#34; \u0026#34;--param=arg2\u0026#34;))) GnuPG I add this to my ~/.gnupg/gpg-agent.conf, to set the time-to-live to one day.\n# Do not ask me about entered passwords for 24h (during the same session) default-cache-ttl 86400 max-cache-ttl 86400 Packages I like to use the BMC class, however, I do not like to manually install stuff in system directories, so I made an Arch Linux AUR package bmc-git for it.\nI do use the metropolis theme for Beamer presentations, so I\u0026rsquo;m maintaining a package of it in the AUR too.\ncheck_and_install_pkg () { PKG_NAME=\u0026#34;$1\u0026#34; if ! pacman -Qiq ${PKG_NAME} \u0026amp;\u0026gt; /dev/null then echo \u0026#34;Package ${PKG_NAME} is missing, installing it using yay\u0026#34; yay -S ${PKG_NAME} fi } check_and_install_pkg bmc-git check_and_install_pkg beamer-theme-metropolis KDE Plasma On KDE, there is a good support for HiDPI displays, however, an annoying thing is the small icons in some contexts (for example, a right click on desktop). This can be fixed by setting PLASMA_USE_QT_SCALING=1. KDE sources the files with .sh extension found on ~/.config/plasma-workspace/env, so lets create our\u0026rsquo;s.\n# export PLASMA_USE_QT_SCALING=1 ","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/config/","summary":"This repository How to install Emacs stuff Intro This file Doom configuration files Pseudo early-init Fixes Check for external tools Doom modules (init.el) File skeleton Input (:input) General (:config) Completion (:completion) User interface (:ui) Editor (:editor) Emacs builtin stuff (:emacs) Terminals (:term) Checkers (:checkers) Tools (:tools) Operating system (:os) Language support (:lang) Email (:email) Apps (:app) Additional packages (packages.el) General Emacs settings User information Secrets Better defaults File deletion Window Messages buffer Split defaults Undo and auto-save Editing Emacs sources Frame Maximizing Focus created frame Margins Emacs daemon Initialization Tweaks Save recent files Package configuration User interface Font Theme Mode line Clock Battery Mode line customization Set transparency Dashboard Custom splash image Dashboard Which key Window title Fringe Vertico Company SVG tag Focus Smooth scrolling All the icons Editing Scratch buffer Mouse buttons Page break lines Binary files Very large files Evil Aggressive indent YASnippet Literate configuration Allow babel execution in doom CLI actions Asynchronous tangling IDE Centaur tabs Treemacs Projectile Tramp Eros-eval dir-locals.","tags":null,"title":"Doom Emacs Configuration"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]
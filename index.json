[{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.toml\n``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nBúsqueda de archivos adicionales Para buscar campos adicionales definidos en el front matter, debes añadirlo en 2 lugares.\nEditar layouts/_default/index.JSON Esto expone los valores en /index.json: por ejemplo, para agregar categories ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEditar las opciones de fuse.js para buscar static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"Este archivo existe únicamente para responder a la URL /search con la plantilla de diseño search relacionada.\nNo se muestra ningún contenido aquí, todo el contenido se basa en la plantilla layouts/page/search.html\nEstablecer una prioridad muy baja en el mapa del sitio le dirá a los motores de búsqueda que éste no es un contenido importante.\nEsta implementación utiliza Fusejs, jquery y mark.js\nConfiguración inicial La búsqueda depende del tipo de contenido de salida adicional de JSON en config.","tags":null,"title":"Resultados de Búsqueda"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"June 8, 2010","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"অনুসন্ধানের ফলাফল"},{"categories":null,"contents":"Intro I\u0026rsquo;ve been using Linux exclusively since 2010, GNU Emacs was always installed on my machine, but I didn\u0026rsquo;t discover the real Emacs until 2020, in the beginning, I started my Vanilla Emacs configuration from scratch, but after a while, it becomes a mess. As a new Emacs user, I didn\u0026rsquo;t understand the in the beginning how to optimize my configuration and how to do things correctly. I discovered then Spacemacs, which made things much easier, but it was a little slow, and just after, I found the awesome Doom Emacs, and since, I didn\u0026rsquo;t quit my Emacs screen!\nIn the beginning, I was basically copying chunks of Emacs Lisp code from the internet, which quickly becomes a mess, specially because I was using a mixture of vanilla Emacs style configurations and Doom style ones.\nNow I decided to rewrite a cleaner version of my configuration which will be more Doom friendly, and for that, I found an excellent example in tecosaur\u0026rsquo;s emacs-config, so my current configuration is heavily inspired by tecosaur\u0026rsquo;s.\nThis file This is my literate configuration file, I use it to generate Doom\u0026rsquo;s config files ($DOOMDIR/init.el, $DOOMDIR/packages.el and $DOOMDIR/config.el), as well as some other shell scripts, app installers, app launchers\u0026hellip; etc.\nMake config.el run (slightly) faster with lexical binding (see this blog post for more info).\n;;; config.el -*- lexical-binding: t; -*- Add the shebang and the description to the setup.sh file, which will be used to set system settings and install some missing dependencies.\n#!/bin/bash  # This is an automatically generated setup file, it installes some missing # dependencies, configure system services, set system settings form better # desktop integration... etc. # Abdelhak BOUGOUFFA (c) 2022 Add the shebang to the ~/.env_stuff file used to define some aliases and helpers. This needs to be sourced in the shell session (source it in ~/.zshrc).\n#!/bin/zsh  # This is an automatically generated file, it should be sourced from `~/.zshrc\u0026#39;, # it defines some useful aliases, and customize some environment variables for # better defaults. # Abdelhak BOUGOUFFA (c) 2022 General Settings User information (setq user-full-name \u0026#34;Abdelhak Bougouffa\u0026#34;  user-mail-address \u0026#34;abougouffa@fedoraproject.org\u0026#34;) Secrets Set the path to my GPG encrypted secrets. I like to set the cache expiry to nil instead of the default 2 hours.\n(setq auth-sources \u0026#39;(\u0026#34;~/.authinfo.gpg\u0026#34;)  auth-source-cache-expiry nil ; defaut is 2h (7200)  password-cache-expiry nil  password-cache t  auth-source-do-cache t  epa-file-cache-passphrase-for-symmetric-encryption t) Better defaults File deletion Delete files by moving them to trash.\n(setq-default delete-by-moving-to-trash t) Window Take new window space from all other windows (not just current).\n(setq-default window-combination-resize t) Split defaults Split horizontally to right, vertically below the current window.\n(setq evil-vsplit-window-right t  evil-split-window-below t) Show list of buffers when splitting.\n(defadvice! prompt-for-buffer (\u0026amp;rest _)  :after \u0026#39;(evil-window-split evil-window-vsplit)  (consult-buffer)) Undo and auto-save (setq undo-limit 80000000 ; Raise undo-limit to 80Mb  evil-want-fine-undo t ; By default while in insert all changes are one big blob. Be more granular  auto-save-default t ; Nobody likes to lose work, I certainly don\u0026#39;t  scroll-preserve-screen-position \u0026#39;always ; Don\u0026#39;t have `point\u0026#39; jump around  scroll-margin 2) ; It\u0026#39;s nice to maintain a little margin Editing ;; Stretch cursor to the glyph width (setq-default x-stretch-cursor t)  ;; Enable relative line numbers (setq display-line-numbers-type \u0026#39;relative)  ;; Iterate through CamelCase words (global-subword-mode 1) Frame Maximizing ;; NOTE: Not tangled, replaced with params passed to emacsclient ;; start the initial frame maximized (add-to-list \u0026#39;initial-frame-alist \u0026#39;(fullscreen . maximized))  ;; start every frame maximized (add-to-list \u0026#39;default-frame-alist \u0026#39;(fullscreen . maximized)) To avoid conflict when launching Emacs in emacs-everywhere mode. I\u0026rsquo;m using it in command line when calling emacsclient, by adding this:\n--frame-parameters=\u0026#34;\u0026#39;(fullscreen . maximized)\u0026#34; Focus created frame The problem is, every time I launch an Emacs frame (from KDE), Emacs starts with no focus, I need each time to Alt-TAB to get Emacs under focus, and then start typing. I tried changing this behavior from Emacs by hooking raise-frame at startup, but it didn\u0026rsquo;t work.\nGot from this comment, not working on my Emacs version.\n;; NOTE: Not tangled, not working (add-hook \u0026#39;server-switch-hook #\u0026#39;raise-frame) After some investigations, I found that this issue is probably KDE specific, the issue goes away by setting: Window Management \u0026gt; Window Behavior \u0026gt; Focus \u0026gt; Focus stealing prevention to None in the KDE Settings.\nMargins ;; NOTE: Not tangled (set-frame-parameter nil \u0026#39;internal-border-width 15) Chemacs2 Add Chemacs2 profiles for a set of Emacs configurations. I\u0026rsquo;m using DOOM Emacs, however, I like to try other configs to get inspired!\n((\u0026#34;doom\u0026#34; . ((user-emacs-directory . \u0026#34;~/.config/emacs.doom\u0026#34;)  (env . ((\u0026#34;DOOMDIR\u0026#34; . \u0026#34;~/.doom.d\u0026#34;)))))  (\u0026#34;rational\u0026#34; . ((user-emacs-directory . \u0026#34;~/.config/emacs.rational\u0026#34;)  (env . ((\u0026#34;RATIONAL_EMACS_HOME\u0026#34; . \u0026#34;~/.config/emacs.rational\u0026#34;)))))  (\u0026#34;scimax\u0026#34; . ((user-emacs-directory . \u0026#34;~/.config/emcas.scimax\u0026#34;)))  (\u0026#34;spacemacs\u0026#34; . ((user-emacs-directory . \u0026#34;~/.config/emacs.spacemacs\u0026#34;)))) Make doom the default profile.\ndoom Modules (init.el) Here is the literate configuration which generates the Doom\u0026rsquo;s init.el file, this file contains all the enabled Doom modules with the appropriate flags.\nThis section defines the default source blocks arguments . All source blocks in this section inherits these headers, so they will not be tangled unless overwriting in the block\u0026rsquo;s header.\nFile skeleton This first section defines the template for the subsections, it uses the no-web syntax to include subsections specified as \u0026lt;\u0026lt;sub-section-name\u0026gt;\u0026gt;.\n;;; init.el -*- lexical-binding: t; -*-  ;; This file controls what Doom modules are enabled and what order they load in. ;; Press \u0026#39;K\u0026#39; on a module to view its documentation, and \u0026#39;gd\u0026#39; to browse its directory.  (doom! :input  \u0026lt;\u0026lt;doom-input\u0026gt;\u0026gt;   :completion  \u0026lt;\u0026lt;doom-completion\u0026gt;\u0026gt;   :ui  \u0026lt;\u0026lt;doom-ui\u0026gt;\u0026gt;   :editor  \u0026lt;\u0026lt;doom-editor\u0026gt;\u0026gt;   :emacs  \u0026lt;\u0026lt;doom-emacs\u0026gt;\u0026gt;   :term  \u0026lt;\u0026lt;doom-term\u0026gt;\u0026gt;   :checkers  \u0026lt;\u0026lt;doom-checkers\u0026gt;\u0026gt;   :tools  \u0026lt;\u0026lt;doom-tools\u0026gt;\u0026gt;   :os  \u0026lt;\u0026lt;doom-os\u0026gt;\u0026gt;   :lang  \u0026lt;\u0026lt;doom-lang\u0026gt;\u0026gt;   :email  \u0026lt;\u0026lt;doom-email\u0026gt;\u0026gt;   :app  \u0026lt;\u0026lt;doom-app\u0026gt;\u0026gt;   :config  \u0026lt;\u0026lt;doom-config\u0026gt;\u0026gt; ) Input (:input) Enable bidirectional languages support (bidi).\nbidi General (:config) Enable literate configuration (like this file!), and some defaults.\nliterate (default +bindings  +smartparens) Completion (:completion) I\u0026rsquo;m lazy, I like Emacs to complete my writings.\n(vertico +icons) ; the search engine of the future company ; the ultimate code completion backend ;;(ivy +childframe ; a search engine for love and life ;; +fuzzy ;; +icons ;; +prescient) ;;helm ; the *other* search engine for love and life ;;ido ; the other *other* search engine... User interface (:ui) Enables some user interface features for better user experience, the beautiful modeline, the treemacs project tree, better version control integration with vc-gutter\u0026hellip; and other useful stuff.\ndeft ; notational velocity for Emacs doom ; what makes DOOM look the way it does doom-dashboard ; a nifty splash screen for Emacs hl-todo ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW hydra ; quick documentation for related commands modeline ; snazzy, Atom-inspired modeline, plus API nav-flash ; blink the current line after jumping ophints ; highlight the region an operation acts on vc-gutter ; vcs diff in the fringe workspaces ; tab emulation, persistence \u0026amp; separate workspaces zen ; distraction-free coding or writing (window-select +numbers) ; visually switch windows (ligatures +extra) ; ligatures and symbols to make your code pretty again (treemacs +lsp) ; a project drawer, like neotree but cooler (popup +all ; tame sudden yet inevitable temporary windows  +defaults) (emoji +ascii  +unicode  +github) ;;doom-quit ; DOOM quit-message prompts when you quit Emacs ;;fill-column ; a `fill-column\u0026#39; indicator ;;indent-guides ; highlighted indent columns, notoriously slow ;;minimap ; show a map of the code on the side ;;neotree ; a project drawer, like NERDTree for vim ;;unicode ; extended unicode support for various languages ;;tabs ; a tab bar for Emacs ;;vi-tilde-fringe ; fringe tildes to mark beyond EOB Editor (:editor) Some editing modules, the most important feature is EVIL to enable Vim style editing in Emacs. I like also to edit with multiple cursors, enable yasnippet support, wrap long lines, auto format support.\n(evil +everywhere) ; come to the dark side, we have cookies (objed +manual) ; text object editing for the innocent file-templates ; auto-snippets for empty files fold ; (nigh) universal code folding format ; automated prettiness multiple-cursors ; editing in many places at once parinfer ; turn lisp into python, sort of snippets ; my elves. They type, so I don\u0026#39;t have to word-wrap ; soft wrapping with language-aware indent lispy ; vim for lisp, for people who don\u0026#39;t like vim ;;god ; run Emacs commands without modifier keys ;;rotate-text ; cycle region at point between text candidates Emacs\u0026rsquo; builtin (:emacs) Beautify Emacs builtin packages.\n(dired +icons ; making dired pretty [functional]  +ranger) (ibuffer +icons) ; interactive buffer management (undo +tree) ; persistent, smarter undo for your inevitable mistakes electric ; smarter, keyword-based electric-indent vc ; version-control and Emacs, sitting in a tree Terminals (:term) Run commands in terminal from Emacs. I use mainly vterm on my local machine, however, I like to have eshell, shell and term installed to use them for remote file editing (via Tramp).\neshell ; the elisp shell that works everywhere vterm ; the best terminal emulation in Emacs shell ; simple shell REPL for Emacs term ; basic terminal emulator for Emacs Checkers (:checkers) I like to check my documents for errors while I\u0026rsquo;m typing. The grammar module enables LanguageTool support.\n(syntax +childframe) ; tasing you for every semicolon you forget (spell +aspell) grammar ; tasing grammar mistake every you make Tools (:tools) I enable some useful tools which facilitate my work flow, I like to enable Docker support, EditorConfig is a good feature to have. I like to enable lsp-mode and dap-mode for coding and debugging by enabling the lsp and debugger modules with +lsp support (further customization for lsp and dap below). pdf adds support through pdf-tools, which are great for viewing PDF files inside Emacs, I also enable some extra tools, like magit, lookup, tmux\u0026hellip; etc.\ndirenv editorconfig ; let someone else argue about tabs vs spaces ein ; tame Jupyter notebooks with emacs ;;biblio ; Writes a PhD for you (citation needed) gist ; interacting with github gists make ; run make tasks from Emacs pdf ; pdf enhancements rgb ; creating color strings tmux ; an API for interacting with tmux upload ; map local to remote projects via ssh/ftp (lsp +peek) ; LPS (debugger +lsp) ; FIXME stepping through code, to help you add bugs (docker +lsp) (eval +overlay) ; run code, run (also, repls) (lookup +docsets) ; navigate your code and its documentation (magit +forge) ; a git porcelain for Emacs ;;ansible ;;pass ; password manager for nerds ;;prodigy ; FIXME managing external services \u0026amp; code builders ;;taskrunner ; taskrunner for all your projects ;;terraform ; infrastructure as code Operating system (:os) I enable tty for better support of terminal editing.\n(tty +osc) ; Configures Emacs for use in the terminal Language support (:lang) Most of the projects I\u0026rsquo;m working on are mainly written in C/C++, Python, Rust and some Lisp stuff, I edit also a lot of configuration and data files in several formats (csv, yaml, xml, json, shell scripts\u0026hellip;). I use Org-mode to manage all my papers and notes, so I need to enable as many features as I need, I do enable plantuml also to quickly plot UML models withing Org documents.\nplantuml ; diagrams for confusing people more emacs-lisp ; drown in parentheses common-lisp ; if you\u0026#39;ve seen one lisp, you\u0026#39;ve seen them all markdown ; writing docs for people to ignore data ; config/data formats qt ; the \u0026#39;cutest\u0026#39; gui framework ever (cc +lsp) ; C/C++/Obj-C madness (json +lsp) ; At least it ain\u0026#39;t XML (julia +lsp) ; a better, faster MATLAB (latex +lsp) ; writing papers in Emacs has never been so fun (rust +lsp) ; Fe2O3.unwrap().unwrap().unwrap().unwrap() (ess +lsp) ; emacs speaks statistics (yaml +lsp) ; JSON, but readable (sh +lsp) ; she sells {ba,z,fi}sh shells on the C xor (python +lsp ; beautiful is better than ugly  +pyright  +pyenv  +conda) (org +dragndrop ; organize your plain life in plain text  +gnuplot  +jupyter  +pandoc  +noter  +hugo  +present  +pomodoro  +roam2  +pretty) (racket +lsp ; a DSL for DSLs  +xp) (scheme +mit ; a fully conniving family of lisps  +guile  +racket  +chez) ;;rst ; ReST in peace ;;(lua +lsp) ; one-based indices? one-based indices ;;agda ; types of types of types of types... ;;(clojure +lsp) ; java with a lisp ;;coq ; proofs-as-programs ;;crystal ; ruby at the speed of c ;;csharp ; unity, .NET, and mono shenanigans ;;(dart +flutter) ; paint ui and not much else ;;elixir ; erlang done right ;;elm ; care for a cup of TEA? ;;erlang ; an elegant language for a more civilized age ;;faust ; dsp, but you get to keep your soul ;;fsharp ; ML stands for Microsoft\u0026#39;s Language ;;fstar ; (dependent) types and (monadic) effects and Z3 ;;gdscript ; the language you waited for ;;(go +lsp) ; the hipster dialect ;;(haskell +dante) ; a language that\u0026#39;s lazier than I am ;;hy ; readability of scheme w/ speed of python ;;idris ; ;;(java +meghanada) ; the poster child for carpal tunnel syndrome ;;javascript ; all(hope(abandon(ye(who(enter(here)))))) ;;kotlin ; a better, slicker Java(Script) ;;lean ;;factor ;;ledger ; an accounting system in Emacs ;;nim ; python + lisp at the speed of c ;;nix ; I hereby declare \u0026#34;nix geht mehr!\u0026#34; ;;ocaml ; an objective camel ;;php ; perl\u0026#39;s insecure younger brother ;;purescript ; javascript, but functional ;;raku ; the artist formerly known as perl6 ;;rest ; Emacs as a REST client ;;(ruby +rails) ; 1.step {|i| p \u0026#34;Ruby is #{i.even? ? \u0026#39;love\u0026#39; : \u0026#39;life\u0026#39;}\u0026#34;} ;;scala ; java, but good ;;sml ;;solidity ; do you need a blockchain? No. ;;swift ; who asked for emoji variables? ;;terra ; Earth and Moon in alignment for performance. ;;web ; the tubes Email (:email) I like to use mu4e to manage mail mailboxes. The +org flag adds org-msg support and +gmail adds better management of Gmail accounts.\n(mu4e +org  +gmail) ;;(notmuch +org ;; +afew) ;;(wanderlust +gmail) Apps (:app) Emacs contains a ton of applications, some of them are supported by Doom, I like to use Emacs manage my calendar, chat on IRC, and receive news. I do use EMMS sometimes to play music without leaving Emacs, and I like to enable support for emacs-everywhere.\ncalendar irc ; how neckbeards socialize emms everywhere ; *leave* Emacs!? You must be joking (rss +org) ; emacs as an RSS reader ;;twitter ; twitter client https://twitter.com/vnought Doom Configuration User Interface Font Face Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones: doom-font, doom-unicode-font and doom-variable-pitch-font. The doom-big-font is used for doom-big-font-mode; use this for presentations or streaming.\nThey all accept either a font-spec, font string (\u0026quot;Input Mono-12\u0026quot;), or xlfd font string. You generally only need these two:\nSome good fonts:\n Iosevka Fixed (THE FONT) Nerd fonts  FantasqueSansMono Nerd Font Mono mononoki Nerd Font Mono CaskaydiaCove Nerd Font Mono   Cascadia Code Fantasque Sans Mono JuliaMono (good Unicode support) IBM Plex Mono JetBrains Mono Roboto Mono Source Code Pro Input Mono Narrow Fira Code  (setq doom-font (font-spec :family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; :size 20)  ;; doom-variable-pitch-font (font-spec :family \u0026#34;Latin Modern Roman\u0026#34;) ; inherits the :size from doom-font  doom-variable-pitch-font (font-spec :family \u0026#34;Andika\u0026#34;) ; inherits the :size from doom-font  doom-unicode-font (font-spec :family \u0026#34;JuliaMono\u0026#34;)  doom-serif-font (font-spec :family \u0026#34;FantasqueSansMono Nerd Font Mono\u0026#34; :weight \u0026#39;light)) Theme Set Doom\u0026rsquo;s theme, some good choices:\n doom-palenight doom-one doom-vibrant doom-dark+ (VS Code like) doom-tomorrow-night doom-xcode doom-material doom-ayu-mirage doom-monokai-pro  (setq doom-theme \u0026#39;doom-one) ; Load theme Mode line Clock Display time and set the format to 24h.\n(after! doom-modeline  (setq display-time-string-forms  \u0026#39;((propertize (concat 24-hours \u0026#34;:\u0026#34; minutes))))   (display-time-mode 1)) ; Enable time in the mode-line Battery Show battery level unless battery is not present or battery information is unknown.\n;; This code causes \u0026#39;doom doctor\u0026#39; to fail. TODO: What\u0026#39;s wrong with this function? (after! doom-modeline  (defun ab/display-battery ()  (let ((batt-status (battery)))  (unless (or (string-match-p \u0026#34;unknown\u0026#34; batt-status)  (string-match-p \u0026#34;^Power N/A\u0026#34; batt-status))  (display-battery-mode 1)))) ; it\u0026#39;s nice to know how much power you have   (ab/display-battery)) Set transparency ;; NOTE: Not tangled (set-frame-parameter (selected-frame) \u0026#39;alpha \u0026#39;(98 100)) (add-to-list \u0026#39;default-frame-alist \u0026#39;(alpha 98 100)) Splash Screen Custom Splash Image Change the logo to an image, a set of beautiful images can be found in assets.\n   File Preview     emacs-e.svg    gnu-emacs-white.svg    gnu-emacs-flat.svg    blackhole-lines.svg    doom-emacs-white.svg    doom-emacs-dark.svg     (setq fancy-splash-image (expand-file-name \u0026#34;assets/emacs-e.png\u0026#34; doom-private-dir)) Clean Screen Let\u0026rsquo;s disable the dashboard commands, for a particularly clean look disable the mode-line and hl-line-mode, then also hide the cursor.\n(remove-hook \u0026#39;+doom-dashboard-functions #\u0026#39;doom-dashboard-widget-shortmenu) (add-hook! \u0026#39;+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1)) (setq-hook! \u0026#39;+doom-dashboard-mode-hook evil-normal-state-cursor (list nil)) The ASCII Banner Add an ASCII banner, used in terminal mode.\n(defun doom-dashboard-draw-ascii-emacs-banner-fn ()  (let* ((banner  \u0026#39;(\u0026#34;______ _____ _____ ___ ___\u0026#34;  \u0026#34;| _ \\| _ || _ || \\/ |\u0026#34;  \u0026#34;| | | || | | || | | || . . |\u0026#34;  \u0026#34;| | | || | | || | | || |\\/| |\u0026#34;  \u0026#34;| |/ / \\ \\_/ /\\ \\_/ /| | | |\u0026#34;  \u0026#34;|___/ \\___/ \\___/ \\_| |_/\u0026#34;))  (longest-line (apply #\u0026#39;max (mapcar #\u0026#39;length banner))))  (put-text-property  (point)  (dolist (line banner (point))  (insert (+doom-dashboard--center  +doom-dashboard--width  (concat line (make-string (max 0 (- longest-line (length line))) 32))))  \u0026#34;\\n\u0026#34;)  \u0026#39;face \u0026#39;doom-dashboard-banner)))  (unless (display-graphic-p) ; for some reason this messes up the graphical splash screen atm  (setq +doom-dashboard-ascii-banner-fn #\u0026#39;doom-dashboard-draw-ascii-emacs-banner-fn)) Which key Make which-key popup faster.\n(setq which-key-idle-delay 0.5 ;; Default is 1.0  which-key-idle-secondary-delay 0.05) ;; Default is nil Window title I’d like to have just the buffer name, then if applicable the project folder\n(setq frame-title-format  \u0026#39;(\u0026#34;\u0026#34;  (:eval  (if (s-contains-p org-roam-directory (or buffer-file-name \u0026#34;\u0026#34;))  (replace-regexp-in-string  \u0026#34;.*/[0-9]*-?\u0026#34; \u0026#34;☰ \u0026#34;  (subst-char-in-string ?_ ?  buffer-file-name))  \u0026#34;%b\u0026#34;))  (:eval  (let ((project-name (projectile-project-name)))  (unless (string= \u0026#34;-\u0026#34; project-name)  (format (if (buffer-modified-p) \u0026#34; ◉ %s\u0026#34; \u0026#34; ● %s\u0026#34;) project-name)))))) Vertico Since doom-emacs@ece4a74, Doom supports the +childframe for :completion vertico. This can be used to adjust the left and right fringes.\n(after! vertico-posframe  (setq vertico-posframe-parameters  \u0026#39;((left-fringe . 12)  (right-fringe . 14)))) Editor Scratch buffer Tell the scratch buffer to start in emacs-lisp-mode.\n(setq doom-scratch-initial-major-mode \u0026#39;emacs-lisp-mode) Mouse Buttons Map extra mouse buttons to jump between buffers\n(map! :n [mouse-8] #\u0026#39;better-jumper-jump-backward  :n [mouse-9] #\u0026#39;better-jumper-jump-forward) Binary files Taken from this answer.\n(defun buffer-binary-p (\u0026amp;optional buffer)  \u0026#34;Return whether BUFFER or the current buffer is binary. A binary buffer is defined as containing at least one null byte. Returns either nil, or the position of the first null byte.\u0026#34;  (with-current-buffer (or buffer (current-buffer))  (save-excursion  (goto-char (point-min))  (search-forward (string ?\\x00) nil t 1))))  (defun hexl-if-binary ()  \u0026#34;If `hexl-mode\u0026#39;is not already active, and the current buffer is binary, activate `hexl-mode\u0026#39;.\u0026#34;  (interactive)  (unless (eq major-mode \u0026#39;hexl-mode)  (when (buffer-binary-p)  (hexl-mode))))  (add-to-list \u0026#39;magic-fallback-mode-alist \u0026#39;(buffer-binary-p . hexl-mode) t) Allow babel execution in doom CLI actions This file generates all my Doom config files, it works nicely, but for it to work with doom sync et al. I need to make sure that Org doesn\u0026rsquo;t try to confirm that I want to allow evaluation (I do!).\nThankfully Doom supports $DOOMDIR/cli.el file which is sourced every time a CLI command is run, so we can just enable evaluation by setting org-confirm-babel-evaluate to nil there.\nWhile we\u0026rsquo;re at it, we should silence org-babel-execute-src-block to avoid polluting the output.\n;;; cli.el -*- lexical-binding: t; -*- (setq org-confirm-babel-evaluate nil)  (defun doom-shut-up-a (orig-fn \u0026amp;rest args)  (quiet! (apply orig-fn args)))  (advice-add \u0026#39;org-babel-execute-src-block :around #\u0026#39;doom-shut-up-a) Asynchronous config tangling Doom adds an org-mode hook +literate-enable-recompile-h. This is a nice idea, but it\u0026rsquo;s too blocking for my taste. Since I trust my tangling to be fairly straightforward, I\u0026rsquo;ll just redefine it to a simpler, async, function.\n(defadvice! +literate-tangle-async-h ()  \u0026#34;A very simplified version of `+literate-tangle-h\u0026#39;, but async.\u0026#34;  :override #\u0026#39;+literate-tangle-h  (let ((default-directory doom-private-dir))  (async-shell-command  (format \u0026#34;emacs --batch --eval \\\u0026#34;(progn \\ (require \u0026#39;org) (setq org-confirm-babel-evaluate nil) \\ (org-babel-tangle-file \\\\\\\u0026#34;%s\\\\\\\u0026#34;))\\\u0026#34;\u0026#34;  +literate-config-file)))) Additional Packages (packages.el) This file shouldn\u0026rsquo;t be byte compiled.\n;; -*- no-byte-compile: t; -*- General Packages Weather ;; lisp/wttrin/wttrin.el taken from: ;; https://raw.githubusercontent.com/tecosaur/emacs-config/master/lisp/wttrin/wttrin.el (package! wttrin  :recipe (:local-repo \u0026#34;lisp/wttrin\u0026#34;)) (use-package! wttrin  :commands wttrin) TODOCalDAV (package! caldav  :recipe (:host github  :repo \u0026#34;dengste/org-caldav\u0026#34;)) xkcd (package! xkcd  :recipe (:host github  :repo \u0026#34;vibhavp/emacs-xkcd\u0026#34;)) (use-package! xkcd  :commands (xkcd-get xkcd)  :config  (setq xkcd-cache-dir (expand-file-name \u0026#34;xkcd/\u0026#34; doom-cache-dir)  xkcd-cache-latest (expand-file-name \u0026#34;xkcd/latest\u0026#34; doom-cache-dir))) Themes and UI SVG Tag Mode (package! svg-tag-mode) (use-package! svg-tag-mode  :commands svg-tag-mode  :config  (setq svg-tag-tags  \u0026#39;((\u0026#34;^\\\\*.* .* \\\\(:[A-Za-z0-9]+\\\\)\u0026#34; .  ((lambda (tag) (svg-tag-make tag  :beg 1  :font-family \u0026#34;Roboto Mono\u0026#34;  :font-size 6  :height 0.6  :padding 0  :margin 0))))  (\u0026#34;\\\\(:[A-Za-z0-9]+:\\\\)$\u0026#34; .  ((lambda (tag) (svg-tag-make tag  :beg 1  :end -1  :font-family \u0026#34;Roboto Mono\u0026#34;  :font-size 6  :height 0.6  :padding 0  :margin 0))))))) N Λ N O Dim the font color of text in surrounding paragraphs, focus only on the current line.\n(package! nano-doom  :disable t  :recipe (:host github :repo \u0026#34;skyler544/doom-nano-testing\u0026#34;)) ;; NOTE: Note tangled (require \u0026#39;load-nano) Bespoke themes (package! bespoke-themes  :recipe (:host github  :repo \u0026#34;mclear-tools/bespoke-themes\u0026#34;))  (package! bespoke-modeline  :recipe (:host github  :repo \u0026#34;mclear-tools/bespoke-modeline\u0026#34;)) Focus Dim the font color of text in surrounding paragraphs, focus only on the current line.\n(package! focus) (use-package! focus  :commands focus-mode) Goggles Visual feedback after kill/yank actions.\n(package! goggles  :recipe (:host github  :repo \u0026#34;minad/goggles\u0026#34;)) (use-package! goggles  :hook ((prog-mode text-mode) . goggles-mode)  :config  (setq-default goggles-pulse t)) ;; set to nil to disable pulsing Smooth scrolling (when (\u0026lt;= emacs-major-version 28)  (package! good-scroll)) (if (\u0026gt; emacs-major-version 28)  (pixel-scroll-precision-mode 1)  (use-package! good-scroll  :config (good-scroll-mode 1))) Features ESS View data frames better with\n(package! ess-view) Very large files The very large files mode loads large files in chunks, allowing one to open ridiculously large files.\n(package! vlf) To make VLF available without delaying startup, we\u0026rsquo;ll just load it in quiet moments.\n(use-package! vlf-setup  :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf) e-Book reading Then for reading them, the only currently viable options seem to be nov.el.\n(package! nov) Together these should give me a rather good experience reading e-books.\nOrg related (package! doct) (package! org-super-agenda) (package! org-ref)  (package! academic-phrases  :recipe (:host github  :repo \u0026#34;nashamri/academic-phrases\u0026#34;)) org-ref-cite (package! org-ref-cite  :recipe (:host github  :repo \u0026#34;jkitchin/org-ref-cite\u0026#34;  :files (:defaults \u0026#34;readme.org\u0026#34;))  :disable t) ;; BUG: Not working correctly! ;; NOTE: Not tangled (use-package! org-ref-cite  :after org-cite  :config  ;; I like green links  ;; (set-face-attribute \u0026#39;org-cite nil :foreground \u0026#34;DarkSeaGreen4\u0026#34;)  ;; (set-face-attribute \u0026#39;org-cite-key nil :foreground \u0026#34;forest green\u0026#34;)  (setq org-cite-global-bibliography bibtex-completion-bibliography  org-cite-csl-styles-dir \u0026#34;~/Zotero/styles\u0026#34;  org-cite-insert-processor \u0026#39;org-ref-cite  org-cite-follow-processor \u0026#39;org-ref-cite  org-cite-activate-processor \u0026#39;org-ref-cite  org-cite-export-processors \u0026#39;((html csl \u0026#34;elsevier-with-titles.csl\u0026#34;)  (latex org-ref-cite)  (t basic))) Fragtog (package! org-fragtog) Hook org-fragtog-mode to org-mode.\n(use-package! org-fragtog  :hook (org-mode . org-fragtog-mode)) Pretty table (package! org-pretty-table  :recipe (:host github  :repo \u0026#34;Fuco1/org-pretty-table\u0026#34;)) (use-package! org-pretty-table  :hook (org-mode . org-pretty-table-mode)) Org Roam Org-roam is nice by itself, but there are so extra nice packages which integrate with it.\n(unpin! org-roam) ;; To avoid problems with org-roam-ui (package! websocket) (package! org-roam-ui) (use-package! websocket  :after org-roam-ui)  (use-package! org-roam-ui  :commands org-roam-ui-open  :config (setq org-roam-ui-sync-theme t  org-roam-ui-follow t  org-roam-ui-update-on-save t  org-roam-ui-open-on-start t)) Info colors Better colors for manual pages.\n(package! info-colors) (use-package! info-colors  :commands (info-colors-fontify-node))  (add-hook \u0026#39;Info-selection-hook \u0026#39;info-colors-fontify-node) Grammarly (package! grammarly  :recipe (:host github  :repo \u0026#34;emacs-grammarly/grammarly\u0026#34;)  :disable t) ;; TODO: It messes my org files up, need to investigate  (package! flycheck-grammarly  :recipe (:host github  :repo \u0026#34;emacs-grammarly/flycheck-grammarly\u0026#34;)  :disable t) ;; TODO: It messes my org files up, need to investigate (use-package! flycheck-grammarly  :config (load! \u0026#34;lisp/private/+grammarly-account.el\u0026#34;)) Grammalecte (package! flycheck-grammalecte  :recipe (:host github  :repo \u0026#34;milouse/flycheck-grammalecte\u0026#34;)  :disable t) ; FIXME Not working correctly (use-package! flycheck-grammalecte  :config (flycheck-grammalecte-setup))  ;; (use-package flycheck-grammalecte ;; :hook (fountain-mode . flycheck-mode) ;; :init ;; (setq flycheck-grammalecte-report-apos nil ;; flycheck-grammalecte-report-esp nil ;; flycheck-grammalecte-report-nbsp nil) ;; :config ;; (add-to-list \u0026#39;flycheck-grammalecte-enabled-modes \u0026#39;fountain-mode) ;; (grammalecte-download-grammalecte) ;; (flycheck-grammalecte-setup)) Zotero Zotxt (package! zotxt) (use-package! zotxt  :commands org-zotxt-mode) CRDT Collaborative editing for geeks! crdt.el adds support for Conflict-free Replicated Data Type.\n(package! crdt) (use-package! crdt  :commands (crdt-share-buffer  crdt-connect  crdt-visualize-author-mode  crdt-org-sync-overlay-mode)) Programming Repo Make sure the repo tool is installed, if not pacman -S repo on Arch-based distributions, or directly with:\nREPO_PATH=\u0026#34;$HOME/.local/bin/repo\u0026#34; curl \u0026#34;https://storage.googleapis.com/git-repo-downloads/repo\u0026#34; \u0026gt; ${REPO_PATH} chmod a+x ${REPO_PATH} (package! repo) (use-package! repo  :commands repo-status) Devdocs (package! devdocs  :recipe (:host github  :repo \u0026#34;astoff/devdocs.el\u0026#34;  :files (\u0026#34;*.el\u0026#34;))) (use-package! devdocs  :commands (devdocs-lookup devdocs-install)  :config  (setq devdocs-data-dir (expand-file-name \u0026#34;devdocs\u0026#34; doom-etc-dir))) Emacs GDB DAP mode is great, however, it is not mature for C/C++ debugging, it does not support some basic features like Run until cursor, Show disassembled code\u0026hellip; etc. Emacs have builtin gdb support through gdb-mi and gud.\nThe emacs-gdb package overwrites the builtin gdb-mi, it is much faster (thanks to it\u0026rsquo;s C module), and it defines some easy to use UI, with Visual Studio like keybindings.\n(package! gdb-mi  :recipe (:host github  :repo \u0026#34;weirdNox/emacs-gdb\u0026#34;  :files (\u0026#34;*.el\u0026#34; \u0026#34;*.c\u0026#34; \u0026#34;*.h\u0026#34; \u0026#34;Makefile\u0026#34;))) (use-package! gdb-mi  :init  (fmakunbound \u0026#39;gdb)  (fmakunbound \u0026#39;gdb-enable-debug)  :config  (setq ;; gdb-window-setup-function #\u0026#39;gdb--setup-windows ; TODO: Customize this  gdb-ignore-gdbinit nil)) ; I use gdbinit to define some useful stuff Disaster (package! disaster) ;; TODO: Configure to take into account \u0026#34;compile_commands.json\u0026#34; (use-package! disaster  :commands (disaster)) Magit Delta Integrate git-delta with magit. Currently disabled because it is too slow, specially with big change chunks.\n(package! magit-delta  :disable t) (use-package! magit-delta  :commands magit-status  :hook (magit-mode . magit-delta-mode)) Blamer Display Git information (author, date, message\u0026hellip;) for current line\n(package! blamer  :recipe (:host github  :repo \u0026#34;artawower/blamer.el\u0026#34;)) (use-package! blamer  :bind ((\u0026#34;s-i\u0026#34; . blamer-show-commit-info))  :defer 20  :custom  (blamer-idle-time 0.3)  (blamer-min-offset 60)  (blamer-prettify-time-p t)  (blamer-entire-formatter \u0026#34; %s\u0026#34;)  (blamer-author-formatter \u0026#34; %s \u0026#34;)  (blamer-datetime-formatter \u0026#34;[%s], \u0026#34;)  (blamer-commit-formatter \u0026#34;“%s”\u0026#34;)  :custom-face  (blamer-face ((t :foreground \u0026#34;#7a88cf\u0026#34;  :background nil  :height 125  :italic t)))  :config  (global-blamer-mode 1)   ;; Disable in zen (writeroom) mode  (when (featurep! :ui zen)  (add-hook! \u0026#39;writeroom-mode-enable-hook (blamer-mode -1))  (add-hook! \u0026#39;writeroom-mode-disable-hook (blamer-mode 1)))) Systemd For editing systemd unit files.\n(package! systemd) Bitbake (Yocto) This package is not maintained, but still a good for my Yocto projects. I don\u0026rsquo;t really use the bitbake commands from Emacs, so this package can be easily replaced with bitbake-modes.\n(package! bitbake-modes  :recipe (:host bitbucket  :repo \u0026#34;olanilsson/bitbake-modes\u0026#34;)) (use-package bitbake-modes  :commands (bitbake-mode  conf-bitbake-mode  bb-scc-mode wks-mode  bitbake-task-log-mode  bb-sh-mode  mmm-mode)) LaTeX (package! aas  :recipe (:host github  :repo \u0026#34;ymarco/auto-activating-snippets\u0026#34;)) (use-package! aas  :commands aas-mode) project-cmake A good new package to facilitate using CMake projects with Emacs, it glues together project, eglot, cmake and clangd.\n(package! project-cmake  :disable (not (featurep! lsp +eglot)) ; Enable only if (lsp +eglot) is used  :recipe (:host github  :repo \u0026#34;juanjosegarciaripoll/project-cmake\u0026#34;)) (use-package! project-cmake  :config  (require \u0026#39;eglot)  (project-cmake-scan-kits)  (project-cmake-eglot-integration)) Franca IDL (package! franca-idl  :recipe (:host github  :repo \u0026#34;zeph1e/franca-idl.el\u0026#34;)) (use-package! franca-idl  :commands franca-idl-mode) Flycheck + projectile WIP: Not working atm!\n(package! flycheck-projectile  :recipe (:host github  :repo \u0026#34;nbfalcon/flycheck-projectile\u0026#34;)) (use-package! flycheck-projectile  :commands flycheck-projectile-list-errors) Graphviz Graphviz is a nice method of visualizing simple graphs, based on plaintext .dot / .gv files.\n(package! graphviz-dot-mode) (use-package! graphviz-dot-mode  :commands (graphviz-dot-mode graphviz-dot-preview)) Maxima I\u0026rsquo;ve been experiencing an annoying bug with the maxima package, when I launch the interpreter, it complains about a file not being found, the package searches in ~/.emacs-doom/.local/straight/repos-28.0.90/maxima/keywords/functions instead of ~/.../build-28.0.90/..., when I investigated this issue, it turned out that, the package (in the maxima-font-lock.el file), replaces build with repos when it sees straight in the path (as a workaround to support straight), however, Doom Emacs redefine the value of straight-build-dir to be build-\u0026lt;emacs-version\u0026gt;,, so the workaround is no more needed. To fix this, I set the maxima-font-lock-keywords-directory with the right path.\n(package! imaxima) (package! maxima  :recipe (:host gitlab  :repo \u0026#34;sasanidas/maxima\u0026#34;  :files (\u0026#34;*.el\u0026#34; \u0026#34;keywords\u0026#34;))) (use-package! maxima  :init  (add-hook \u0026#39;maxima-mode-hook #\u0026#39;maxima-hook-function)  (add-hook \u0026#39;maxima-inferior-mode-hook #\u0026#39;maxima-hook-function)  (require \u0026#39;straight)  (setq maxima-font-lock-keywords-directory ;; a workaround to undo the straight workaround!  (expand-file-name (format \u0026#34;straight/%s/maxima/keywords\u0026#34; straight-build-dir) straight-base-dir))  (setq maxima-display-maxima-buffer nil)  ;; (require \u0026#39;org) ;; to set `org-format-latex-options\u0026#39;  ;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))  :commands (maxima-mode maxima)  :config  (require \u0026#39;company-maxima)  (add-to-list \u0026#39;company-backends \u0026#39;(company-maxima-symbols company-maxima-libraries))  :mode (\u0026#34;\\\\.mac\\\\\u0026#39;\u0026#34; . maxima-mode)  :interpreter (\u0026#34;maxima\u0026#34; . maxima-mode))  (use-package! imaxima  :commands (imaxima))  (use-package! imath  :commands (imath-mode imath)) ROS ROS Emacs utils This is a WIP, to use the code-iai/ros_emacs_utils for rosemacs integration. I need to be able to use it over Tramp, as I mainly do my ROS stuff on a Docker container or on a remote robot. ATM, I need just to configure rosemacs to use Emacs to develop ROS packages using C++/Python, I\u0026rsquo;m not interested now for ROS Common Lisp development.\n(package! rosemacs  :recipe (:host github  :repo \u0026#34;code-iai/ros_emacs_utils\u0026#34;  :files (\u0026#34;rosemacs/*\u0026#34;))  :disable t) ;; No clear way to make it work on a remote machine (use-package! rosemacs  :config  (require \u0026#39;rosemacs-config)  :commands (ros-core ros-topic-info)) ros.el I found this awesome ros.el package made by Max Beutelspacher, which facilitate working with ROS machines, supports ROS1 and ROS2, with local workspaces or remote ones (over Trump!),\n;; `ros.el\u0026#39; depends on `with-shell-interpreter\u0026#39; among other packages ;; See: https://github.com/DerBeutlin/ros.el/blob/master/Cask (package! with-shell-interpreter) (package! ros  :recipe (:host github  :repo \u0026#34;DerBeutlin/ros.el\u0026#34;)) Now, we configure the ROS1/ROS2 workspaces to work on. But before that, we need to install some tools on the ROS machine, and build the workspace for the first time using colcon build, the repo contains example Docker files for Noetic and Foxy.\n(use-package! ros  :init (map! :leader  :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  :desc \u0026#34;Hydra ROS\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;hydra-ros-main/body)  :commands (hydra-ros-main/body ros-set-workspace)  :config  (setq ros-workspaces  (list (ros-dump-workspace  :tramp-prefix (format \u0026#34;/docker:%s@%s:\u0026#34; \u0026#34;ros\u0026#34; \u0026#34;ros-machine\u0026#34;)  :workspace \u0026#34;~/ros_ws\u0026#34;  :extends \u0026#39;(\u0026#34;/opt/ros/noetic/\u0026#34;))  (ros-dump-workspace  :tramp-prefix (format \u0026#34;/ssh:%s@%s:\u0026#34; \u0026#34;swd_sk\u0026#34; \u0026#34;172.16.96.42\u0026#34;)  :workspace \u0026#34;~/ros_ws\u0026#34;  :extends \u0026#39;(\u0026#34;/opt/ros/noetic/\u0026#34;))  (ros-dump-workspace  :tramp-prefix (format \u0026#34;/ssh:%s@%s:\u0026#34; \u0026#34;swd_sk\u0026#34; \u0026#34;172.16.96.42\u0026#34;)  :workspace \u0026#34;~/ros2_ws\u0026#34;  :extends \u0026#39;(\u0026#34;/opt/ros/foxy/\u0026#34;))))) Emacs Daemon Initialization When the daemon is running, I almost always want to do a few particular things with it, so I may as well eat the load time at startup. We also want to keep mu4e running.\nLastly, while I\u0026rsquo;m not sure quite why it happens, but after a bit it seems that new Emacs client frames start on the *scratch* buffer instead of the dashboard. I prefer the dashboard, so let\u0026rsquo;s ensure that\u0026rsquo;s always switched to in new frames.\n(defun greedy-on-daemon-startup ()  (require \u0026#39;org)  (when (require \u0026#39;mu4e nil t)  (setq mu4e-confirm-quit t)  (setq +mu4e-lock-greedy t)  (setq +mu4e-lock-relaxed t)  (mu4e~start))  (when (require \u0026#39;elfeed nil t)  (run-at-time nil (* 8 60 60) #\u0026#39;elfeed-update)))  (when (daemonp)  (add-hook \u0026#39;emacs-startup-hook #\u0026#39;greedy-on-daemon-startup)  (add-hook! \u0026#39;server-after-make-frame-hook (doom/reload-theme))  (add-hook! \u0026#39;server-after-make-frame-hook  (unless (string-match-p \u0026#34;\\\\*draft\u0026#34; (buffer-name))  (switch-to-buffer +doom-dashboard-name)))) Tweaks Save recent files When editing files with Emacs client, the files does not get stored by recentf, making Emacs forgets about recently opened files. A quick fix is to hook the recentf-save-list command to the delete-frame-functions and delete-terminal-functions which gets executed each time a frame/terminal is deleted.\n(when (daemonp)  (add-hook! \u0026#39;(delete-frame-functions delete-terminal-functions) #\u0026#39;(lambda (arg) (recentf-save-list)))) Package configuration All the icons Set some custom icons for some file extensions, basically for .m files.\n(after! all-the-icons  (setcdr (assoc \u0026#34;m\u0026#34; all-the-icons-extension-icon-alist)  (cdr (assoc \u0026#34;matlab\u0026#34; all-the-icons-extension-icon-alist)))) Centaur tabs A \u0026lsquo;active-bar\u0026rsquo; is nice, so let\u0026rsquo;s have one of those. If we have it under needs us to turn on x-underline-at-decent though. For some reason this didn\u0026rsquo;t seem to work inside the (after! ... ) block ¯\\_(ツ)_/¯.\n(after! centaur-tabs  (centaur-tabs-mode -1)  (setq centaur-tabs-set-icons t  centaur-tabs-modified-marker \u0026#34;⭘\u0026#34;  centaur-tabs-close-button \u0026#34;×\u0026#34;  centaur-tabs-gray-out-icons \u0026#39;buffer)) Better PDFs in mode line First up I\u0026rsquo;m going to want a segment for just the buffer file name, and a PDF icon. Then we\u0026rsquo;ll redefine two functions used to generate the modeline.\n(after! doom-modeline  (doom-modeline-def-segment buffer-name  \u0026#34;Display the current buffer\u0026#39;s name, without any other information.\u0026#34;  (concat  (doom-modeline-spc)  (doom-modeline--buffer-name)))   (doom-modeline-def-segment pdf-icon  \u0026#34;PDF icon from all-the-icons.\u0026#34;  (concat  (doom-modeline-spc)  (doom-modeline-icon \u0026#39;octicon \u0026#34;file-pdf\u0026#34; nil nil  :face (if (doom-modeline--active)  \u0026#39;all-the-icons-red  \u0026#39;mode-line-inactive)  :v-adjust 0.02)))   (defun doom-modeline-update-pdf-pages ()  \u0026#34;Update PDF pages.\u0026#34;  (setq doom-modeline--pdf-pages  (let ((current-page-str (number-to-string (eval `(pdf-view-current-page))))  (total-page-str (number-to-string (pdf-cache-number-of-pages))))  (concat  (propertize  (concat (make-string (- (length total-page-str) (length current-page-str)) ? )  \u0026#34; P\u0026#34; current-page-str)  \u0026#39;face \u0026#39;mode-line)  (propertize (concat \u0026#34;/\u0026#34; total-page-str) \u0026#39;face \u0026#39;doom-modeline-buffer-minor-mode)))))   (doom-modeline-def-segment pdf-pages  \u0026#34;Display PDF pages.\u0026#34;  (if (doom-modeline--active) doom-modeline--pdf-pages  (propertize doom-modeline--pdf-pages \u0026#39;face \u0026#39;mode-line-inactive)))   (doom-modeline-def-modeline \u0026#39;pdf  \u0026#39;(bar window-number pdf-pages pdf-icon buffer-name)  \u0026#39;(misc-info matches major-mode process vcs))) Emojify For starters, twitter\u0026rsquo;s emojis look nicer than emoji-one. Other than that, this is pretty great OOTB 😀.\n(setq emojify-emoji-set \u0026#34;twemoji-v2\u0026#34;) One minor annoyance is the use of emojis over the default character when the default is actually preferred. This occurs with overlay symbols I use in Org mode, such as checkbox state, and a few other miscellaneous cases.\nWe can accommodate our preferences by deleting those entries from the emoji hash table\n(defvar emojify-disabled-emojis  \u0026#39;(;; Org  \u0026#34;◼\u0026#34; \u0026#34;☑\u0026#34; \u0026#34;☸\u0026#34; \u0026#34;⚙\u0026#34; \u0026#34;⏩\u0026#34; \u0026#34;⏪\u0026#34; \u0026#34;⬆\u0026#34; \u0026#34;⬇\u0026#34; \u0026#34;❓\u0026#34; \u0026#34;🔚\u0026#34; \u0026#34;⏱\u0026#34; \u0026#34;®\u0026#34; \u0026#34;™\u0026#34;  ;; Terminal powerline  \u0026#34;✔\u0026#34;  ;; Box drawing  \u0026#34;▶\u0026#34; \u0026#34;◀\u0026#34;)  \u0026#34;Characters that should never be affected by `emojify-mode\u0026#39;.\u0026#34;)  (defadvice! emojify-delete-from-data ()  \u0026#34;Ensure `emojify-disabled-emojis\u0026#39;don\u0026#39;t appear in `emojify-emojis\u0026#39;.\u0026#34;  :after #\u0026#39;emojify-set-emoji-data  (dolist (emoji emojify-disabled-emojis)  (remhash emoji emojify-emojis))) Now, it would be good to have a minor mode which allowed you to type ascii/gh emojis and get them converted to unicode. Let’s make one.\n(defun emojify--replace-text-with-emoji (orig-fn emoji text buffer start end \u0026amp;optional target)  \u0026#34;Modify `emojify--propertize-text-for-emoji\u0026#39;to replace ascii/github emoticons with unicode emojis, on the fly.\u0026#34;  (if (or (not emoticon-to-emoji) (= 1 (length text)))  (funcall orig-fn emoji text buffer start end target)  (delete-region start end)  (insert (ht-get emoji \u0026#34;unicode\u0026#34;))))  (define-minor-mode emoticon-to-emoji  \u0026#34;Write ascii/gh emojis, and have them converted to unicode live.\u0026#34;  :global nil  :init-value nil  (if emoticon-to-emoji  (progn  (setq-local emojify-emoji-styles \u0026#39;(ascii github unicode))  (advice-add \u0026#39;emojify--propertize-text-for-emoji :around #\u0026#39;emojify--replace-text-with-emoji)  (unless emojify-mode  (emojify-turn-on-emojify-mode)))  (setq-local emojify-emoji-styles (default-value \u0026#39;emojify-emoji-styles))  (advice-remove \u0026#39;emojify--propertize-text-for-emoji #\u0026#39;emojify--replace-text-with-emoji))) This new minor mode of ours will be nice for messages, so let\u0026rsquo;s hook it in for Email and IRC.\n(add-hook! \u0026#39;(mu4e-compose-mode org-msg-edit-mode circe-channel-mode) (emoticon-to-emoji 1)) Eros-eval This makes the result of evals slightly prettier.\n(setq eros-eval-result-prefix \u0026#34;⟹ \u0026#34;) Checkers (spell \u0026amp; grammar) Install back-end For flyspell + hunspell\nsudo pacman -S hunspell hunspell-en_US hunspell-en_GB hunspell-fr For spell-fu\nsudo pacman -S aspell aspell-en aspell-fr Spell Fu Now, spell-fu supports multiple languages! Lets add English, French and Arabic. So I can \u0026ldquo;mélanger les langues sans avoir de problèmes!\u0026rdquo;.\n(after! spell-fu  (defun spell-fu-register-dictionary (lang)  \u0026#34;Add `LANG` to spell-fu multi-dict, with a personal dictionary.\u0026#34;  ;; Add the dictionary  (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary lang))  (let ((personal-dict-file (expand-file-name (format \u0026#34;aspell.%s.pws\u0026#34; lang) doom-private-dir)))  ;; Create an empty personal dictionary if it doesn\u0026#39;t exists  (unless (file-exists-p personal-dict-file) (write-region \u0026#34;\u0026#34; nil personal-dict-file))  ;; Add the personal dictionary  (spell-fu-dictionary-add (spell-fu-get-personal-dictionary (format \u0026#34;%s-personal\u0026#34; lang) personal-dict-file))))   (add-hook \u0026#39;spell-fu-mode-hook  (lambda ()  (spell-fu-register-dictionary \u0026#34;en\u0026#34;)  (spell-fu-register-dictionary \u0026#34;fr\u0026#34;)))) Flyspell ;; NOTE: Not tangled, using spell-fu instead (after! (ispell flyspell)  (setq ispell-dictionary \u0026#34;en_US,fr_FR\u0026#34;)   ;; ispell-set-spellchecker-params has to be called  ;; before ispell-hunspell-add-multi-dic will work  (ispell-set-spellchecker-params)  (ispell-hunspell-add-multi-dic \u0026#34;en_US,fr_FR\u0026#34;)   ;; Define the personal dictionary path, and use it only when it exists  (setq ispell-personal-dictionary  (expand-file-name \u0026#34;.ispell_personal_dict\u0026#34; doom-private-dir))  (unless (file-exists-p ispell-personal-dictionary)  (write-region \u0026#34;\u0026#34; nil ispell-personal-dictionary nil 0))) Lazy flyspell (after! flyspell  (setq flyspell-lazy-idle-seconds 2  flyspell-lazy-window-idle-seconds 5)) Shortcuts to change dictionary ;; NOTE: Not tangled, using spell-fu with multiple dictionaries (defun ab-conf/spelldict (lang)  \u0026#34;Switch between language dictionaries.\u0026#34;  (cond ((eq lang :en)  (setq flyspell-default-dictionary \u0026#34;en_US\u0026#34;  ispell-dictionary \u0026#34;en_US\u0026#34;)  (message \u0026#34;Dictionary changed to \u0026#39;english\u0026#39;\u0026#34;))  ((eq lang :fr)  (setq flyspell-default-dictionary \u0026#34;fr_FR\u0026#34;  ispell-dictionary \u0026#34;fr_FR\u0026#34;)  (message \u0026#34;Dictionary changed to \u0026#39;francais\u0026#39;\u0026#34;))  (t (message \u0026#34;No changes have been made.\u0026#34;)))  (flyspell-mode -1)  (flyspell-mode))  (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  (:when (featurep! :checkers spell)  :prefix-map (\u0026#34;y\u0026#34; . \u0026#34;dictionary\u0026#34;)  :desc \u0026#34;English (en_US)\u0026#34; \u0026#34;e\u0026#34; #\u0026#39;(lambda () (interactive) (ab-conf/spelldict :en))  :desc \u0026#34;Français (fr_FR)\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;(lambda () (interactive) (ab-conf/spelldict :fr)))) Shortcuts to check grammar (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  (:when (featurep! :checkers grammar)  :prefix-map (\u0026#34;l\u0026#34; . \u0026#34;langtool\u0026#34;)  :desc \u0026#34;Check\u0026#34; \u0026#34;l\u0026#34; #\u0026#39;langtool-check  :desc \u0026#34;Correct buffer\u0026#34; \u0026#34;b\u0026#34; #\u0026#39;langtool-correct-buffer  :desc \u0026#34;Stop server\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;langtool-server-stop  :desc \u0026#34;Done checking\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;langtool-check-done  :desc \u0026#34;Show msg at point\u0026#34; \u0026#34;m\u0026#34; #\u0026#39;langtool-show-message-at-point  :desc \u0026#34;Next error\u0026#34; \u0026#34;n\u0026#34; #\u0026#39;langtool-goto-next-error  :desc \u0026#34;Previous error\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;langtool-goto-previous-error  :desc \u0026#34;Switch default language\u0026#34; \u0026#34;L\u0026#34; #\u0026#39;langtool-switch-default-language)) Projectile ;; Run `M-x projectile-project-search-path\u0026#39; to reload paths from this variable (setq projectile-project-search-path \u0026#39;(\u0026#34;~/PhD/workspace\u0026#34;  \u0026#34;~/PhD/workspace-no\u0026#34;  \u0026#34;~/PhD/workspace-no/ez-wheel/swd-starter-kit-repo\u0026#34;  \u0026#34;~/Projects/foss_projects\u0026#34;))  (setq projectile-ignored-projects \u0026#39;(\u0026#34;~/\u0026#34;  \u0026#34;/tmp\u0026#34;  \u0026#34;~/.cache\u0026#34;  \u0026#34;~/.emacs.d/.local/straight/repos/\u0026#34;))  (defun projectile-ignored-project-function (filepath)  \u0026#34;Return t if FILEPATH is within any of `projectile-ignored-projects\u0026#39;\u0026#34;  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects))) Tramp Let\u0026rsquo;s try to make tramp handle prompts better\n(after! tramp  (setenv \u0026#34;SHELL\u0026#34; \u0026#34;/bin/bash\u0026#34;)  (setq tramp-shell-prompt-pattern \u0026#34;\\\\(?:^\\\\| \\\\)[^]#$%\u0026gt;\\n]*#?[]#$%\u0026gt;] *\\\\(\u001b\\\\[[0-9;]*[a-zA-Z] *\\\\)*\u0026#34;)) ;; default +  YASnippet Nested snippets are good, enable that.\n(setq yas-triggers-in-field t) Ligatures Extra ligatures are good, however, I\u0026rsquo;d like to see my keywords! Lets disable them in C/C++, Rust and Python modes.\n(setq +ligatures-extras-in-modes \u0026#39;(not c-mode c++-mode rust-mode python-mode)) Applications e-Books nov Use nov to read EPUB e-books.\n(use-package! nov  :mode (\u0026#34;\\\\.epub\\\\\u0026#39;\u0026#34; . nov-mode)  :config  (map! :map nov-mode-map  :n \u0026#34;RET\u0026#34; #\u0026#39;nov-scroll-up)   (defun doom-modeline-segment--nov-info ()  (concat \u0026#34; \u0026#34;  (propertize (cdr (assoc \u0026#39;creator nov-metadata)) \u0026#39;face \u0026#39;doom-modeline-project-parent-dir)  \u0026#34; \u0026#34;  (cdr (assoc \u0026#39;title nov-metadata))  \u0026#34; \u0026#34;  (propertize (format \u0026#34;%d/%d\u0026#34; (1+ nov-documents-index) (length nov-documents)) \u0026#39;face \u0026#39;doom-modeline-info)))   (advice-add \u0026#39;nov-render-title :override #\u0026#39;ignore)   (defun +nov-mode-setup ()  (face-remap-add-relative \u0026#39;variable-pitch  :family \u0026#34;Merriweather\u0026#34;  :height 1.4  :width \u0026#39;semi-expanded)  (face-remap-add-relative \u0026#39;default :height 1.3)  (setq-local line-spacing 0.2  next-screen-context-lines 4  shr-use-colors nil)  (require \u0026#39;visual-fill-column nil t)  (setq-local visual-fill-column-center-text t  visual-fill-column-width 80  nov-text-width 80)  (visual-fill-column-mode 1)  (hl-line-mode -1)   (add-to-list \u0026#39;+lookup-definition-functions #\u0026#39;+lookup/dictionary-definition)   (setq-local mode-line-format  `((:eval  (doom-modeline-segment--workspace-name))  (:eval  (doom-modeline-segment--window-number))  (:eval  (doom-modeline-segment--nov-info))  ,(propertize  \u0026#34; %P \u0026#34;  \u0026#39;face \u0026#39;doom-modeline-buffer-minor-mode)  ,(propertize  \u0026#34; \u0026#34;  \u0026#39;face (if (doom-modeline--active) \u0026#39;mode-line \u0026#39;mode-line-inactive)  \u0026#39;display `((space  :align-to  (- (+ right right-fringe right-margin)  ,(* (let ((width (doom-modeline--font-width)))  (or (and (= width 1) 1)  (/ width (frame-char-width) 1.0)))  (string-width  (format-mode-line (cons \u0026#34;\u0026#34; \u0026#39;(:eval (doom-modeline-segment--major-mode))))))))))  (:eval (doom-modeline-segment--major-mode)))))   (add-hook \u0026#39;nov-mode-hook #\u0026#39;+nov-mode-setup)) News feed elfeed Set RSS news feeds\n(setq elfeed-feeds  \u0026#39;(\u0026#34;https://this-week-in-rust.org/rss.xml\u0026#34;  \u0026#34;https://www.omgubuntu.co.uk/feed\u0026#34;  \u0026#34;https://itsfoss.com/feed\u0026#34;  \u0026#34;https://linuxhandbook.com/feed\u0026#34;  \u0026#34;https://spectrum.ieee.org/rss/robotics/fulltext\u0026#34;  \u0026#34;https://spectrum.ieee.org/rss/aerospace/fulltext\u0026#34;  \u0026#34;https://spectrum.ieee.org/rss/computing/fulltext\u0026#34;  \u0026#34;https://spectrum.ieee.org/rss/blog/automaton/fulltext\u0026#34;  \u0026#34;https://developers.redhat.com/blog/feed\u0026#34;  \u0026#34;https://lwn.net/headlines/rss\u0026#34;)) VPN Config NetExtender wrapper I store my NetExtender VPN parameters in a GPG encrypted file. The credentials file contains a line of private parameters to pass to netExtender, like this:\necho \u0026#34;-u \u0026lt;USERNAME\u0026gt; -d \u0026lt;DOMAINE\u0026gt; -p \u0026lt;PASSWORD\u0026gt; -s \u0026lt;SERVER_IP\u0026gt;\u0026#34; \\  | gpg -c \u0026gt; netExtender-params.gpg Then I like to have a simple script which decrypt the credentials and launch a session via the netExtender command.\n#!/bin/bash  if ! command -v netExtender \u0026amp;\u0026gt; /dev/null then  echo \u0026#34;netExtender not found, installing from AUR using \u0026#39;yay\u0026#39;\u0026#34;  yay -S netextender fi  MY_LOGIN_PARAMS_FILE=\u0026#34;$HOME/.ssh/netExtender-params.gpg\u0026#34;  echo \u0026#34;Y\\n\u0026#34; | netExtender --auto-reconnect \\  $(gpg -q --for-your-eyes-only --no-tty -d ${MY_LOGIN_PARAMS_FILE}) Launch NetExtender session from Emacs (setq netextender-process-name \u0026#34;netextender\u0026#34;  netextender-buffer-name \u0026#34;*netextender*\u0026#34;  netextender-command \u0026#39;(\u0026#34;~/.local/bin/netextender\u0026#34;))  (defun netextender-start ()  \u0026#34;Launch a NetExtender VPN session\u0026#34;  (interactive)  (unless (get-process netextender-process-name)  (if (make-process :name netextender-process-name  :buffer netextender-buffer-name  :command netextender-command)  (message \u0026#34;Started NetExtender VPN session\u0026#34;)  (message \u0026#34;Cannot start NetExtender\u0026#34;))))  (defun netextender-kill ()  \u0026#34;Kill the created NetExtender VPN session\u0026#34;  (interactive)  (when (get-process netextender-process-name)  (if (kill-buffer netextender-buffer-name)  (message \u0026#34;Killed NetExtender VPN session\u0026#34;)  (message \u0026#34;Cannot kill NetExtender\u0026#34;)))) Email mu4e Configuring mu4e email accounts, note that you need to have a proper mbsyncrc file in the right directory.\nYou will need to:\n Install mu and isync (sudo pacman -S mu isync) Set up a proper configuration file for your accounts at ~/.mbsyncrc Run mu init --maildir=~/Maildir --my-address=user@host1 --my-address=user@host2 Run mbsync -c ~/.mbsyncrc -a For sending mails from mu4e, add a ~/.authinfo file, file contains a line in this format machine MAIL.EXAMPLE.ORG port 587 login MY_USER password MY_PASSWORD Encrypt the ~/.authinfo file using GPG gpg -c ~/.authinfo and delete the original unencrypted file.  I use a mbsyncrc file for multi-accounts, with some hacks for Gmail accounts (to rename the [Gmail]/... folders). Here is an explained configuration example.\n# mbsync config file  # GLOBAL OPTIONS BufferLimit 50mb # Global option: Default buffer size is 10M, too small for modern machines. Sync All # Channels global: Sync everything \u0026#34;Pull Push New ReNew Delete Flags\u0026#34; (default option) Create Both # Channels global: Automatically create missing mailboxes on both sides Expunge Both # Channels global: Delete messages marked for deletion on both sides CopyArrivalDate yes # Channels global: Propagate arrival time with the messages  # SECTION (IMAP4 Accounts) IMAPAccount work # IMAP Account name Host mail.host.ccc # The host to connect to User user@host.ccc # Login user name SSLVersions TLSv1.2 TLSv1.1 # Supported SSL versions # Extract password from encrypted ~/.authinfo.gpg # File format: \u0026#34;machine \u0026lt;SERVER\u0026gt; login \u0026lt;LOGIN\u0026gt; port \u0026lt;PORT\u0026gt; password \u0026lt;PASSWORD\u0026gt;\u0026#34; # This uses sed to extract \u0026lt;PASSWORD\u0026gt; from line matching the account\u0026#39;s \u0026lt;SERVER\u0026gt; PassCmd \u0026#34;echo $(gpg --no-tty -qd ~/.authinfo.gpg 2\u0026gt; /dev/null | sed -n \u0026#39;s,^machine smtp\\\\.host\\\\.ccc .*password \\\\(..*\\\\)$,\\\\1,p\u0026#39;)\u0026#34; AuthMechs * # Authentication mechanisms SSLType IMAPS # Protocol (STARTTLS/IMAPS) CertificateFile /etc/ssl/certs/ca-certificates.crt # END OF SECTION # IMPORTANT NOTE: you need to keep the blank line after each section  # SECTION (IMAP Stores) IMAPStore work-remote # Remote storage name Account work # Associated account # END OF SECTION  # SECTION (Maildir Stores) MaildirStore work-local # Local storage (create directories with mkdir -p ~/Maildir/\u0026lt;ACCOUNT-NAME\u0026gt;) Path ~/Maildir/work/ # The local store path Inbox ~/Maildir/work/Inbox # Location of the INBOX SubFolders Verbatim # Download all sub-folders # END OF SECTION  # Connections specify links between remote and local folders # they are specified using patterns, which match remote mail # folders. Some commonly used patters include: # # - \u0026#34;*\u0026#34; to match everything # - \u0026#34;!DIR\u0026#34; to exclude \u0026#34;DIR\u0026#34; # - \u0026#34;DIR\u0026#34; to match DIR # # SECTION (Channels) Channel work # Channel name Far :work-remote: # Connect remote store Near :work-local: # to the local one Patterns \u0026#34;INBOX\u0026#34; \u0026#34;Drafts\u0026#34; \u0026#34;Sent\u0026#34; \u0026#34;Archives/*\u0026#34; \u0026#34;Spam\u0026#34; \u0026#34;Trash\u0026#34; SyncState * # Save state in near side mailbox file \u0026#34;.mbsyncstate\u0026#34; # END OF SECTION  # ================================================================================  IMAPAccount gmail Host imap.gmail.com User user@gmail.com PassCmd \u0026#34;echo $(gpg --no-tty -qd ~/.authinfo.gpg 2\u0026gt; /dev/null | sed -n \u0026#39;s,^machine smtp\\\\.googlemail\\\\.com .*password \\\\(..*\\\\)$,\\\\1,p\u0026#39;)\u0026#34; AuthMechs LOGIN SSLType IMAPS CertificateFile /etc/ssl/certs/ca-certificates.crt  IMAPStore gmail-remote Account gmail  MaildirStore gmail-local Path ~/Maildir/gmail/ Inbox ~/Maildir/gmail/Inbox  # For Gmail, I like to make multiple channels, one for each remote directory # this is a trick to rename remote \u0026#34;[Gmail]/mailbox\u0026#34; to \u0026#34;mailbox\u0026#34; Channel gmail-inbox Far :gmail-remote: Near :gmail-local: Patterns \u0026#34;INBOX\u0026#34; SyncState *  Channel gmail-trash Far :gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :gmail-local:\u0026#34;Trash\u0026#34; SyncState *  Channel gmail-drafts Far :gmail-remote:\u0026#34;[Gmail]/Drafts\u0026#34; Near :gmail-local:\u0026#34;Drafts\u0026#34; SyncState *  Channel gmail-sent Far :gmail-remote:\u0026#34;[Gmail]/Sent Mail\u0026#34; Near :gmail-local:\u0026#34;Sent Mail\u0026#34; SyncState *  Channel gmail-all Far :gmail-remote:\u0026#34;[Gmail]/All Mail\u0026#34; Near :gmail-local:\u0026#34;All Mail\u0026#34; SyncState *  Channel gmail-starred Far :gmail-remote:\u0026#34;[Gmail]/Starred\u0026#34; Near :gmail-local:\u0026#34;Starred\u0026#34; SyncState *  Channel gmail-spam Far :gmail-remote:\u0026#34;[Gmail]/Spam\u0026#34; Near :gmail-local:\u0026#34;Spam\u0026#34; SyncState *  # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE # MBSYNC ON A GROUP TO SYNC ALL CHANNELS # # FOR INSTANCE: \u0026#34;mbsync gmail\u0026#34; GETS MAIL FROM # \u0026#34;gmail-inbox\u0026#34;, \u0026#34;gmail-sent\u0026#34;, and \u0026#34;gmail-trash\u0026#34; # # SECTION (Groups) Group gmail Channel gmail-inbox Channel gmail-sent Channel gmail-trash Channel gmail-drafts Channel gmail-all Channel gmail-starred Channel gmail-spam # END OF SECTION (add-to-list \u0026#39;load-path \u0026#34;/usr/local/share/emacs/site-lisp/mu4e\u0026#34;) I configure my email accounts in a private file in lisp/private/+mu4e-accounts.el, which will be loaded after this common part:\n(after! mu4e  (require \u0026#39;org-msg)  (require \u0026#39;smtpmail)   ;; Common parameters  (setq smtpmail-auth-credentials \u0026#34;~/.authinfo.gpg\u0026#34;  mu4e-maildir \u0026#34;~/Maildir\u0026#34;  mu4e-update-interval (* 3 60) ;; Every 3 min  ;; mu4e-get-mail-command \u0026#34;mbsync -a\u0026#34; ;; Not needed, as +mu4e-backend is \u0026#39;mbsync by default  mu4e-main-hide-personal-addresses t ;; No need to display a long list of my own addresses!  mu4e-attachment-dir (expand-file-name \u0026#34;~/Maildir/attachements\u0026#34;)  ;; message-send-mail-function \u0026#39;smtpmail-send-it ;; Set by default  mu4e-sent-messages-behavior \u0026#39;sent ;; Save sent messages  mu4e-context-policy \u0026#39;pick-first ;; Start with the first context  mu4e-compose-context-policy \u0026#39;ask) ;; Always ask which context to use when composing a new mail   (setq mu4e-headers-fields \u0026#39;((:flags . 6) ;; 3 flags  (:account-stripe . 2)  (:from-or-to . 25)  (:folder . 10)  (:recipnum . 2)  (:subject . 80)  (:human-date . 8))  +mu4e-min-header-frame-width 142  mu4e-headers-date-format \u0026#34;%d/%m/%y\u0026#34;  mu4e-headers-time-format \u0026#34;⧖ %H:%M\u0026#34;  mu4e-headers-results-limit 1000  mu4e-index-cleanup t)   (defvar +mu4e-header--folder-colors nil)  (appendq! mu4e-header-info-custom  \u0026#39;((:folder .  (:name \u0026#34;Folder\u0026#34; :shortname \u0026#34;Folder\u0026#34; :help \u0026#34;Lowest level folder\u0026#34; :function  (lambda (msg)  (+mu4e-colorize-str  (replace-regexp-in-string \u0026#34;\\\\`.*/\u0026#34; \u0026#34;\u0026#34; (mu4e-message-field msg :maildir))  \u0026#39;+mu4e-header--folder-colors))))))   ;; Add shortcut to view yesterday\u0026#39;s messages  (add-to-list \u0026#39;mu4e-bookmarks  \u0026#39;(:name \u0026#34;Yesterday\u0026#39;s messages\u0026#34; :query \u0026#34;date:2d..1d\u0026#34; :key ?y) t)   ;; Use a nicer icon in alerts  (setq mu4e-alert-icon \u0026#34;/usr/share/icons/Papirus/64x64/apps/mail-client.svg\u0026#34;)   ;; Org-Msg stuff  ;; org-msg-signature is set for each account separately  (map! :map org-msg-edit-mode-map  :after org-msg  :n \u0026#34;G\u0026#34; #\u0026#39;org-msg-goto-body)   ;; I like to always BCC myself  (defun ab/bcc-me ()  \u0026#34;Add my email to BCC.\u0026#34;  (save-excursion (message-add-header (concat \u0026#34;Bcc: \u0026#34; user-mail-address \u0026#34;\\n\u0026#34;))))   (add-hook \u0026#39;mu4e-compose-mode-hook \u0026#39;ab/bcc-me)   ;; Load  (load! \u0026#34;lisp/private/+mu4e-smart-refiling.el\u0026#34;)   ;; Load my accounts  (load! \u0026#34;lisp/private/+mu4e-accounts.el\u0026#34;)) The lisp/private/+mu4e-accounts.el file includes Doom\u0026rsquo;s mu4e multi-account configuration as follows:\n(set-email-account! \u0026#34;Work\u0026#34;  \u0026#39;((mu4e-sent-folder . \u0026#34;/work-dir/Sent\u0026#34;)  (mu4e-drafts-folder . \u0026#34;/work-dir/Drafts\u0026#34;)  (mu4e-trash-folder . \u0026#34;/work-dir/Trash\u0026#34;)  (mu4e-refile-folder . \u0026#34;/work-dir/Archive\u0026#34;)  (org-msg-signature . \u0026#34;-- SIGNATURE\u0026#34;)  (smtpmail-smtp-user . \u0026#34;username@server.com\u0026#34;)  (smtpmail-stream-type . ssl)  (smtpmail-default-smtp-server . \u0026#34;smtps.server.com\u0026#34;)  (smtpmail-smtp-server . \u0026#34;smtps.server.com\u0026#34;)  (smtpmail-smtp-service . 465))  t)  (set-email-account! \u0026#34;Gmail\u0026#34;  \u0026#39;((mu4e-sent-folder . \u0026#34;/gmail-dir/Sent\u0026#34;)  (mu4e-drafts-folder . \u0026#34;/gmail-dir/Drafts\u0026#34;)  (mu4e-trash-folder . \u0026#34;/gmail-dir/Trash\u0026#34;)  (mu4e-refile-folder . \u0026#34;/gmail-dir/Archive\u0026#34;)  (org-msg-signature . \u0026#34;-- SIGNATURE\u0026#34;)  (smtpmail-smtp-user . \u0026#34;username@gmail.com\u0026#34;)  ...))  ; Tell Doom\u0026#39;s mu4e module to override some commands to fix issues on Gmail accounts (setq +mu4e-gmail-accounts \u0026#39;((\u0026#34;username@gmail.com\u0026#34; . \u0026#34;/gmail-dir\u0026#34;))) Programming File Templates For some file types, we overwrite defaults in the snippets directory, others need to have a template assigned.\n(set-file-template! \u0026#34;\\\\.tex$\u0026#34; :trigger \u0026#34;__\u0026#34; :mode \u0026#39;latex-mode) (set-file-template! \u0026#34;\\\\.org$\u0026#34; :trigger \u0026#34;__\u0026#34; :mode \u0026#39;org-mode) (set-file-template! \u0026#34;/LICEN[CS]E$\u0026#34; :trigger \u0026#39;+file-templates/insert-license) GNU Octave Files with .m extension gets recognized automatically as Objective C files. Lets change this to be recognized as Octave/Matlab files.\n(autoload \u0026#39;octave-mode \u0026#34;octave-mode\u0026#34; \u0026#34;Loding octave-mode\u0026#34; t) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.m\\\\\u0026#39;\u0026#34; . octave-mode)) ROS Add ROS specific file formats:\n(add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.launch$\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.urdf$\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.xacro$\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.rviz$\u0026#34; . conf-unix-mode)) LSP Enable some useful UI stuff LSP mode provides a set of configurable UI stuff, Doom Emacs disables a set of UI components to provide a less intrusive UI, however I like to enable some less intrusive, more useful UI stuff.\n(after! lsp-ui  (setq lsp-ui-sideline-enable t  lsp-ui-sideline-show-code-actions t  lsp-ui-sideline-show-diagnostics t  lsp-ui-sideline-show-hover nil  lsp-log-io nil  lsp-lens-enable nil ; not working properly with ccls!  lsp-diagnostics-provider :auto  lsp-enable-symbol-highlighting t  lsp-headerline-breadcrumb-enable nil  lsp-headerline-breadcrumb-segments \u0026#39;(symbols))) Fringe Increase the left fringe width, to enable rendering breakpoints correctly.\n(after! lsp-mode  (add-hook \u0026#39;lsp-mode-hook (lambda () (set-fringe-mode \u0026#39;(15 . 15))))) Eglot Eglot uses project.el to detect the project root. This is a workaround to make it work with projectile:\n(after! eglot  ;; A hack to make it works with projectile  (defun projectile-project-find-function (dir)  (let* ((root (projectile-project-root dir)))  (and root (cons \u0026#39;transient root))))   (with-eval-after-load \u0026#39;project  (add-to-list \u0026#39;project-find-functions \u0026#39;projectile-project-find-function))   ;; Use clangd with some options  (set-eglot-client! \u0026#39;c++-mode \u0026#39;(\u0026#34;clangd\u0026#34; \u0026#34;-j=3\u0026#34; \u0026#34;--clang-tidy\u0026#34;))) LSP mode with clangd (after! lsp-clangd  (setq lsp-clients-clangd-args  \u0026#39;(\u0026#34;-j=4\u0026#34;  \u0026#34;--background-index\u0026#34;  \u0026#34;--clang-tidy\u0026#34;  \u0026#34;--completion-style=detailed\u0026#34;  \u0026#34;--header-insertion=never\u0026#34;  \u0026#34;--header-insertion-decorators=0\u0026#34;))  (set-lsp-priority! \u0026#39;clangd 2)) LSP mode with ccls ;; NOTE: Not tangled, using the default ccls (after! ccls  (setq ccls-initialization-options  \u0026#39;(:index (:comments 2  :trackDependency 1  :threads 4)  :completion (:detailedLabel t)))  (set-lsp-priority! \u0026#39;ccls 2)) ; optional as ccls is the default in Doom Enable lsp over tramp For Python (after! tramp  (require \u0026#39;lsp-mode)  (require \u0026#39;lsp-pyright)   (setq lsp-enable-snippet nil  lsp-log-io nil  ;; To bypass the \u0026#34;lsp--document-highlight fails if  ;; textDocument/documentHighlight is not supported\u0026#34; error  lsp-enable-symbol-highlighting nil)   (lsp-register-client  (make-lsp-client  :new-connection (lsp-tramp-connection \u0026#34;pyls\u0026#34;)  :major-modes \u0026#39;(python-mode)  :remote? t  :server-id \u0026#39;pyls-remote))) For C/C++ with ccls ;; NOTE: WIP: Not tangled (after! tramp  (require \u0026#39;lsp-mode)  (require \u0026#39;ccls)   (setq lsp-enable-snippet nil  lsp-log-io nil  lsp-enable-symbol-highlighting t)   (lsp-register-client  (make-lsp-client  :new-connection  (lsp-tramp-connection  (lambda ()  (cons ccls-executable ; executable name on remote machine \u0026#39;ccls\u0026#39;  ccls-args)))  :major-modes \u0026#39;(c-mode c++-mode objc-mode cuda-mode)  :remote? t  :server-id \u0026#39;ccls-remote))   (add-to-list \u0026#39;tramp-remote-path \u0026#39;tramp-own-remote-path)) For C/C++ with clangd (after! tramp  (require \u0026#39;lsp-mode)   (setq lsp-enable-snippet nil  lsp-log-io nil  ;; To bypass the \u0026#34;lsp--document-highlight fails if  ;; textDocument/documentHighlight is not supported\u0026#34; error  lsp-enable-symbol-highlighting nil)   (lsp-register-client  (make-lsp-client  :new-connection  (lsp-tramp-connection  (lambda ()  (cons \u0026#34;clangd-12\u0026#34; ; executable name on remote machine \u0026#39;ccls\u0026#39;  lsp-clients-clangd-args)))  :major-modes \u0026#39;(c-mode c++-mode objc-mode cuda-mode)  :remote? t  :server-id \u0026#39;clangd-remote))) DAP I like to use cpptools over webfreak.debug. So I enable it after loading dap-mode. I like also to have a mode minimal UI. I like to trigger dap-hydra when the program hits a break point, and automatically delete the session and close Hydra when DAP is terminated.\n(after! dap-mode  (require \u0026#39;dap-cpptools)   ;; More minimal UI  (setq dap-auto-configure-features \u0026#39;(locals tooltip)  lsp-enable-dap-auto-configure t  dap-auto-show-output nil) ;; Hide the annoying server output   ;; Automatically trigger dap-hydra when a program hits a breakpoint.  (add-hook \u0026#39;dap-stopped-hook (lambda (arg) (call-interactively #\u0026#39;dap-hydra)))   ;; Automatically delete session and close dap-hydra when DAP is terminated.  (add-hook \u0026#39;dap-terminated-hook  (lambda (arg)  (progn (call-interactively #\u0026#39;dap-delete-session)  (dap-hydra/nil))))) Doom store Doom Emacs stores session information persistently using the core store mechanism. However, relaunching a new session doesn\u0026rsquo;t overwrite the last stored session, to do so, I define a helper function to clear data stored in the \u0026quot;+debugger\u0026quot; location. (see +debugger--get-last-config function.)\n(defun +debugger/clear-last-session ()  \u0026#34;Clear the last stored session\u0026#34;  (interactive)  (doom-store-clear \u0026#34;+debugger\u0026#34;))  (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  (:when (featurep! :tools debugger +lsp)  :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;)  :desc \u0026#34;Clear last DAP session\u0026#34; \u0026#34;c\u0026#34; #\u0026#39;+debugger/clear-last-session)) The Grand \u0026ldquo;Cathedral\u0026rdquo; Debugger For C/C++, DAP mode is missing so much features. In my experience, both cpptools and gdb DAP interfaces aren\u0026rsquo;t mature, it stops and disconnect while debugging, making it a double pain.\nAdditional commands Using a pure GDB makes things more flexible, I also use rr (by substituting gdb by rr replay when starting the session), which gives me the possibility to do reverse debugging.\n(after! realgud  (require \u0026#39;hydra)   ;; Add some missing gdb/rr commands  (defun ab/realgud:cmd-start(arg)  \u0026#34;start = break main + run\u0026#34;  (interactive \u0026#34;p\u0026#34;)  (realgud-command \u0026#34;start\u0026#34;))   (defun ab/realgud:cmd-reverse-next(arg)  \u0026#34;Reverse next\u0026#34;  (interactive \u0026#34;p\u0026#34;)  (realgud-command \u0026#34;reverse-next\u0026#34;))   (defun ab/realgud:cmd-reverse-step(arg)  \u0026#34;Reverse step\u0026#34;  (interactive \u0026#34;p\u0026#34;)  (realgud-command \u0026#34;reverse-step\u0026#34;))   (defun ab/realgud:cmd-reverse-continue(arg)  \u0026#34;Reverse continue\u0026#34;  (interactive \u0026#34;p\u0026#34;)  (realgud-command \u0026#34;reverse-continue\u0026#34;))   (defun ab/realgud:cmd-reverse-finish(arg)  \u0026#34;Reverse finish\u0026#34;  (interactive \u0026#34;p\u0026#34;)  (realgud-command \u0026#34;reverse-finish\u0026#34;))   ;; Define a hydra binding  (defhydra realgud-hydra (:color pink :hint nil :foreign-keys run)  \u0026#34; Stepping | _n_: next | _i_: step | _o_: finish | _c_: continue | _R_: restart | _u_: until-here Revese | _rn_: next | _ri_: step | _ro_: finish | _rc_: continue | Breakpts | _ba_: break | _bD_: delete | _bt_: tbreak | _bd_: disable | _be_: enable | _tr_: backtrace Eval | _ee_: at-point | _er_: region | _eE_: eval | | _!_: shell | _Qk_: kill | _Qq_: quit | _Sg_: gdb | _Ss_: start \u0026#34;  (\u0026#34;n\u0026#34; realgud:cmd-next)  (\u0026#34;i\u0026#34; realgud:cmd-step)  (\u0026#34;o\u0026#34; realgud:cmd-finish)  (\u0026#34;c\u0026#34; realgud:cmd-continue)  (\u0026#34;R\u0026#34; realgud:cmd-restart)  (\u0026#34;u\u0026#34; realgud:cmd-until-here)  (\u0026#34;rn\u0026#34; ab/realgud:cmd-reverse-next)  (\u0026#34;ri\u0026#34; ab/realgud:cmd-reverse-step)  (\u0026#34;ro\u0026#34; ab/realgud:cmd-reverse-finish)  (\u0026#34;rc\u0026#34; ab/realgud:cmd-reverse-continue)  (\u0026#34;ba\u0026#34; realgud:cmd-break)  (\u0026#34;bt\u0026#34; realgud:cmd-tbreak)  (\u0026#34;bD\u0026#34; realgud:cmd-delete)  (\u0026#34;be\u0026#34; realgud:cmd-enable)  (\u0026#34;bd\u0026#34; realgud:cmd-disable)  (\u0026#34;ee\u0026#34; realgud:cmd-eval-at-point)  (\u0026#34;er\u0026#34; realgud:cmd-eval-region)  (\u0026#34;tr\u0026#34; realgud:cmd-backtrace)  (\u0026#34;eE\u0026#34; realgud:cmd-eval)  (\u0026#34;!\u0026#34; realgud:cmd-shell)  (\u0026#34;Qk\u0026#34; realgud:cmd-kill)  (\u0026#34;Sg\u0026#34; realgud:gdb)  (\u0026#34;Ss\u0026#34; ab/realgud:cmd-start)  (\u0026#34;q\u0026#34; nil \u0026#34;quit\u0026#34; :color blue) ;; :exit  (\u0026#34;Qq\u0026#34; realgud:cmd-quit :color blue)) ;; :exit   (defun +debugger/realgud:gdb-hydra ()  \u0026#34;Run `realgud-hydra\u0026#39;.\u0026#34;  (interactive)  (realgud-hydra/body))   (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  (:when (featurep! :tools debugger)  :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;)  :desc \u0026#34;RealGUD hydra\u0026#34; \u0026#34;h\u0026#34; #\u0026#39;+debugger/realgud:gdb-hydra))) RealGUD .dir-locals.el support (Only for GDB) I do a lot of development on C/C++ apps which gets data from command line arguments, which means I have to type my arguments manually after calling realgud:gdb, which is very annoying.\nFor DAP mode, there is support for either dap-debug-edit-template, or launch.json. For RealGUD though, I didn\u0026rsquo;t find any ready-to-use feature like this. So I define a parameter list named ab/realgud:launch-plist, which supports :program and :args. The first is a string of the program path, and the second is a list of string arguments to pass to the program.\n;; A variable which to be used in .dir-locals.el, formatted as a property list; ;; \u0026#39;(:program \u0026#34;...\u0026#34; :args (\u0026#34;args1\u0026#34; \u0026#34;arg2\u0026#34; ...)) ;; \u0026#34;${workspaceFolder}\u0026#34; =\u0026gt; gets replaced with project workspace (from projectile) ;; \u0026#34;${workspaceFolderBasename}\u0026#34; =\u0026gt; gets replaced with project workspace\u0026#39;s basename (defvar ab/realgud:launch-plist nil) This variable is set in a per-project basis thanks to .dir-locals.el, some thing like this:\n;; Example entry in .dir-locals.el ((nil . ((ab/realgud:launch-plist . \u0026#39;(:program \u0026#34;${workspaceFolder}/build/bin/my_prog\u0026#34; :args (\u0026#34;--in_file=${workspaceFolder}/some/file.csv\u0026#34; \u0026#34;--out_file=/tmp/some_randome_file\u0026#34; \u0026#34;-a\u0026#34;)))))) The special variables ${workspaceFolder} and ${workspaceFolderBasename} are defined as in VS Code, the actual values are filled from projectile-project-root.\n(cl-defun ab/realgud:get-launch-debugger-args (\u0026amp;key program args)  (let ((debugger--args \u0026#34;\u0026#34;))  (when program  (setq debugger--args program)  (when args  (setq debugger--args (concat debugger--args \u0026#34; \u0026#34; (s-join \u0026#34; \u0026#34; args)))))  ;; Replace special variables  (let* ((ws--root (expand-file-name (or (projectile-project-root) \u0026#34;.\u0026#34;)))  (ws--basename (file-name-nondirectory  (if (s-ends-with-p \u0026#34;/\u0026#34; ws--root)  (substring ws--root 0 -1)  ws--root))))  (s-replace-all  (list (cons \u0026#34;${workspaceFolder}\u0026#34; ws--root)  (cons \u0026#34;${workspaceFolderBasename}\u0026#34; ws--basename))  debugger--args))))  (defun +debugger/realgud:gdb-launch ()  \u0026#34;Launch RealGUD with parameters from `ab/realgud:launch-plist\u0026#39;\u0026#34;  (interactive)  (require \u0026#39;realgud)  (if ab/realgud:launch-plist  (realgud:gdb  (concat realgud:gdb-command-name  \u0026#34; --args \u0026#34;  (apply \u0026#39;ab/realgud:get-launch-debugger-args ab/realgud:launch-plist)))  (progn  (message \u0026#34;Variable `ab/realgud:launch-plist\u0026#39;is `nil\u0026#39;\u0026#34;)  (realgud:gdb))))  (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  (:when (featurep! :tools debugger)  :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;)  :desc \u0026#34;RealGUD launch\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;+debugger/realgud:gdb-launch)) Record and replay rr Add shortcuts to run rr from Emacs, the rr record takes the program name and arguments from my local ab/realgud:gdb-launch-plist, when rr replay respects the arguments configured in RealGUD\u0026rsquo;s GDB command name. Some useful hints could be found here, here, here and here.\n(after! realgud  (require \u0026#39;s)   (defun +debugger/rr-replay ()  \u0026#34;Launch `rr replay\u0026#39;\u0026#34;  (interactive)  (realgud:gdb (s-replace \u0026#34;gdb\u0026#34; \u0026#34;rr replay\u0026#34; realgud:gdb-command-name)))   (defun +debugger/rr-record ()  \u0026#34;Launch `rr record\u0026#39; with parameters from `ab/realgud:launch-plist\u0026#39;\u0026#34;  (interactive)  (let ((debugger--args (apply \u0026#39;ab/realgud:get-launch-debugger-args ab/realgud:launch-plist)))  (unless (make-process :name \u0026#34;*rr record*\u0026#34;  :buffer \u0026#34;*rr record*\u0026#34;  :command (append \u0026#39;(\u0026#34;rr\u0026#34; \u0026#34;record\u0026#34;) (s-split \u0026#34; \u0026#34; debugger--args)))  (message \u0026#34;Cannot make process \u0026#39;rr record\u0026#39;\u0026#34;))))   (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;)  (:when (featurep! :tools debugger)  :prefix-map (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;)  :desc \u0026#34;rr record\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;+debugger/rr-record  :desc \u0026#34;rr replay\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;+debugger/rr-replay))) GDB Custom layout for gdb-many-windows Stolen from https://stackoverflow.com/a/41326527/3058915. I used it to change the builtin gdb-many-windows layout.\n(setq gdb-many-windows nil)  (defun set-gdb-layout(\u0026amp;optional c-buffer)  (if (not c-buffer)  (setq c-buffer (window-buffer (selected-window)))) ;; save current buffer   ;; from http://stackoverflow.com/q/39762833/846686  (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed  (switch-to-buffer gud-comint-buffer)  (delete-other-windows) ;; clean all   (let* ((w-source (selected-window)) ;; left top  (w-gdb (split-window w-source nil \u0026#39;right)) ;; right bottom  (w-locals (split-window w-gdb nil \u0026#39;above)) ;; right middle bottom  (w-stack (split-window w-locals nil \u0026#39;above)) ;; right middle top  (w-breakpoints (split-window w-stack nil \u0026#39;above)) ;; right top  (w-io (split-window w-source (floor(* 0.9 (window-body-height))) \u0026#39;below))) ;; left bottom  (set-window-buffer w-io (gdb-get-buffer-create \u0026#39;gdb-inferior-io))  (set-window-dedicated-p w-io t)  (set-window-buffer w-breakpoints (gdb-get-buffer-create \u0026#39;gdb-breakpoints-buffer))  (set-window-dedicated-p w-breakpoints t)  (set-window-buffer w-locals (gdb-get-buffer-create \u0026#39;gdb-locals-buffer))  (set-window-dedicated-p w-locals t)  (set-window-buffer w-stack (gdb-get-buffer-create \u0026#39;gdb-stack-buffer))  (set-window-dedicated-p w-stack t)   (set-window-buffer w-gdb gud-comint-buffer)   (select-window w-source)  (set-window-buffer w-source c-buffer)))  (defadvice gdb (around args activate)  \u0026#34;Change the way to gdb works.\u0026#34;  (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing)  (let ((c-buffer (window-buffer (selected-window)))) ;; save current buffer  ad-do-it  (set-gdb-layout c-buffer)))  (defadvice gdb-reset (around args activate)  \u0026#34;Change the way to gdb exit.\u0026#34;  ad-do-it  (set-window-configuration global-config-editing)) Highlight current line (defvar gud-overlay  (let* ((ov (make-overlay (point-min) (point-min))))  (overlay-put ov \u0026#39;face \u0026#39;secondary-selection)  ov)  \u0026#34;Overlay variable for GUD highlighting.\u0026#34;)  (defadvice gud-display-line (after my-gud-highlight act)  \u0026#34;Highlight current line.\u0026#34;  (let* ((ov gud-overlay)  (bf (gud-find-file true-file)))  (with-current-buffer bf  (move-overlay ov (line-beginning-position) (line-beginning-position 2)  ;; (move-overlay ov (line-beginning-position) (line-end-position)  (current-buffer)))))  (defun gud-kill-buffer ()  (if (derived-mode-p \u0026#39;gud-mode)  (delete-overlay gud-overlay)))  (add-hook \u0026#39;kill-buffer-hook \u0026#39;gud-kill-buffer) History (after! gdb-mi  (defvar ab/gdb-history-file \u0026#34;~/.gdb_history\u0026#34;)  (defun ab/gud-gdb-mode-hook-setup ()  \u0026#34;GDB setup.\u0026#34;   ;; Suposes \u0026#34;~/.gdbinit\u0026#34; contains:  ;; set history save on  ;; set history filename ~/.gdb_history  ;; set history remove-duplicates 2048  (when (and (ring-empty-p comint-input-ring)  (file-exists-p ab/gdb-history-file))  (setq comint-input-ring-file-name ab/gdb-history-file)  (comint-read-input-ring t)))   (add-hook \u0026#39;gud-gdb-mode-hook \u0026#39;ab/gud-gdb-mode-hook-setup)) Cppcheck Check for everything!\n(after! flycheck  (setq flycheck-cppcheck-checks \u0026#39;(\u0026#34;information\u0026#34;  \u0026#34;missingInclude\u0026#34;  \u0026#34;performance\u0026#34;  \u0026#34;portability\u0026#34;  \u0026#34;style\u0026#34;  \u0026#34;unusedFunction\u0026#34;  \u0026#34;warning\u0026#34;))) ;; Actually, we can use \u0026#34;all\u0026#34; Plain text It\u0026rsquo;s nice to see ANSI color codes displayed. However, until Emacs 28 it\u0026rsquo;s not possible to do this without modifying the buffer, so let\u0026rsquo;s condition this block on that.\n(after! text-mode  (add-hook! \u0026#39;text-mode-hook  ;; Apply ANSI color codes  (with-silent-modifications  (ansi-color-apply-on-region (point-min) (point-max) t)))) Org Intro Because this section is fairly expensive to initialize, we\u0026rsquo;ll wrap it in a (after! ...) block.\n(after! org  \u0026lt;\u0026lt;org-conf\u0026gt;\u0026gt; ) Behavior Tweaking defaults (setq org-directory \u0026#34;~/Dropbox/Org/\u0026#34; ; let\u0026#39;s put files here  org-use-property-inheritance t ; it\u0026#39;s convenient to have properties inherited  org-log-done \u0026#39;time ; having the time an item is done sounds convenient  org-list-allow-alphabetical t ; have a. A. a) A) list bullets ;; org-export-in-background t ; run export processes in external emacs process ;; org-export-async-debug t  org-catch-invisible-edits \u0026#39;smart ; try not to accidently do weird stuff in invisible regions  org-export-with-sub-superscripts \u0026#39;{}) ; don\u0026#39;t treat lone _ / ^ as sub/superscripts, require _{} / ^{} I also like the :comments header-argument, so let\u0026rsquo;s make that a default.\n(setq org-babel-default-header-args  \u0026#39;((:session . \u0026#34;none\u0026#34;)  (:results . \u0026#34;replace\u0026#34;)  (:exports . \u0026#34;code\u0026#34;)  (:cache . \u0026#34;no\u0026#34;)  (:noweb . \u0026#34;no\u0026#34;)  (:hlines . \u0026#34;no\u0026#34;)  (:tangle . \u0026#34;no\u0026#34;)  (:comments . \u0026#34;link\u0026#34;))) By default, visual-line-mode is turned on, and auto-fill-mode off by a hook. However, this messes with tables in Org-mode, and other plaintext files (e.g. markdown, \\LaTeX) so I\u0026rsquo;ll turn it off for this, and manually enable it for more specific modes as desired.\n(remove-hook \u0026#39;text-mode-hook #\u0026#39;visual-line-mode) (add-hook \u0026#39;text-mode-hook #\u0026#39;auto-fill-mode) There also seem to be a few keybindings which use hjkl, but miss arrow key equivalents.\n(map! :map evil-org-mode-map  :after evil-org  :n \u0026#34;g \u0026lt;up\u0026gt;\u0026#34; #\u0026#39;org-backward-heading-same-level  :n \u0026#34;g \u0026lt;down\u0026gt;\u0026#34; #\u0026#39;org-forward-heading-same-level  :n \u0026#34;g \u0026lt;left\u0026gt;\u0026#34; #\u0026#39;org-up-element  :n \u0026#34;g \u0026lt;right\u0026gt;\u0026#34; #\u0026#39;org-down-element) Babel is really annoying when it comes to working with Scheme (via Geiser), it keeps asking about which Scheme implementation to use, I tried to set this in file local variables and dir-locals but it didn\u0026rsquo;t work. This should work now!\n;; NOTE: Not tangled, I managed to fix the problem by specifying ;; the implementation in file var prop line ;; ===\u0026gt; # -*- geiser-scheme-implementation: \u0026#39;guile; -*- (after! geiser  (setq geiser-default-implementation \u0026#39;guile))  ;; stolen from https://github.com/yohan-pereira/.emacs#babel-config (defun my-org-confirm-babel-evaluate (lang body)  (not (string= lang \u0026#34;scheme\u0026#34;))) ; don\u0026#39;t ask for ditaa  (setq org-confirm-babel-evaluate #\u0026#39;my-org-confirm-babel-evaluate) Extra functionality List bullet sequence I think it makes sense to have list bullets change with depth\n(setq org-list-demote-modify-bullet \u0026#39;((\u0026#34;+\u0026#34; . \u0026#34;-\u0026#34;) (\u0026#34;-\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;*\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;1.\u0026#34; . \u0026#34;a.\u0026#34;))) Citations   org-ref\n(use-package! org-ref  :after org  :config  (defadvice! org-ref-open-bibtex-pdf-a ()  :override #\u0026#39;org-ref-open-bibtex-pdf  (save-excursion  (bibtex-beginning-of-entry)  (let* ((bibtex-expand-strings t)  (entry (bibtex-parse-entry t))  (key (reftex-get-bib-field \u0026#34;=key=\u0026#34; entry))  (pdf (or  (car (-filter (lambda (f) (string-match-p \u0026#34;\\\\.pdf$\u0026#34; f))  (split-string (reftex-get-bib-field \u0026#34;file\u0026#34; entry) \u0026#34;;\u0026#34;)))  (funcall \u0026#39;org-ref-get-pdf-filename key))))  (if (file-exists-p pdf)  (org-open-file pdf)  (ding)))))   (defadvice! org-ref-open-pdf-at-point-a ()  \u0026#34;Open the pdf for bibtex key under point if it exists.\u0026#34;  :override #\u0026#39;org-ref-open-pdf-at-point  (interactive)  (let* ((results (org-ref-get-bibtex-key-and-file))  (key (car results))  (pdf-file (funcall \u0026#39;org-ref-get-pdf-filename key)))  (with-current-buffer (find-file-noselect (cdr results))  (save-excursion  (bibtex-search-entry (car results))  (org-ref-open-bibtex-pdf))))))     org-cite\n(after! oc  (defun org-ref-to-org-cite ()  \u0026#34;Attempt to convert org-ref citations to org-cite syntax.\u0026#34;  (interactive)  (let* ((cite-conversions \u0026#39;((\u0026#34;cite\u0026#34; . \u0026#34;//b\u0026#34;) (\u0026#34;Cite\u0026#34; . \u0026#34;//bc\u0026#34;)  (\u0026#34;nocite\u0026#34; . \u0026#34;/n\u0026#34;)  (\u0026#34;citep\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;citep*\u0026#34; . \u0026#34;//f\u0026#34;)  (\u0026#34;parencite\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;Parencite\u0026#34; . \u0026#34;//c\u0026#34;)  (\u0026#34;citeauthor\u0026#34; . \u0026#34;/a/f\u0026#34;) (\u0026#34;citeauthor*\u0026#34; . \u0026#34;/a\u0026#34;)  (\u0026#34;citeyear\u0026#34; . \u0026#34;/na/b\u0026#34;)  (\u0026#34;Citep\u0026#34; . \u0026#34;//c\u0026#34;) (\u0026#34;Citealp\u0026#34; . \u0026#34;//bc\u0026#34;)  (\u0026#34;Citeauthor\u0026#34; . \u0026#34;/a/cf\u0026#34;) (\u0026#34;Citeauthor*\u0026#34; . \u0026#34;/a/c\u0026#34;)  (\u0026#34;autocite\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;Autocite\u0026#34; . \u0026#34;//c\u0026#34;)  (\u0026#34;notecite\u0026#34; . \u0026#34;/l/b\u0026#34;) (\u0026#34;Notecite\u0026#34; . \u0026#34;/l/bc\u0026#34;)  (\u0026#34;pnotecite\u0026#34; . \u0026#34;/l\u0026#34;) (\u0026#34;Pnotecite\u0026#34; . \u0026#34;/l/bc\u0026#34;)))  (cite-regexp (rx (regexp (regexp-opt (mapcar #\u0026#39;car cite-conversions) t))  \u0026#34;:\u0026#34; (group (+ (not (any \u0026#34;\\n ,.)]}\u0026#34;)))))))  (save-excursion  (goto-char (point-min))  (while (re-search-forward cite-regexp nil t)  (message (format \u0026#34;[cite%s:@%s]\u0026#34;  (cdr (assoc (match-string 1) cite-conversions))  (match-string 2)))  (replace-match (format \u0026#34;[cite%s:@%s]\u0026#34;  (cdr (assoc (match-string 1) cite-conversions))  (match-string 2))))))))   Spellcheck I turn off spell checking by default to make Org files open quickly.\n;;(add-hook \u0026#39;org-mode-hook \u0026#39;turn-off-flyspell) ;;(add-hook \u0026#39;org-mode-hook \u0026#39;turn-on-flyspell) ;;(add-hook \u0026#39;org-mode-hook \u0026#39;spell-fu-mode-disable) TODOs (setq org-todo-keywords  \u0026#39;((sequence \u0026#34;TODO(t)\u0026#34; \u0026#34;PROJ(p)\u0026#34; \u0026#34;LOOP(r)\u0026#34; \u0026#34;STRT(s)\u0026#34; \u0026#34;WAIT(w)\u0026#34; \u0026#34;HOLD(h)\u0026#34; \u0026#34;IDEA(i)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d)\u0026#34; \u0026#34;KILL(k)\u0026#34;)  (sequence \u0026#34;[ ](T)\u0026#34; \u0026#34;[-](S)\u0026#34; \u0026#34;[?](W)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;[X](D)\u0026#34;)  (sequence \u0026#34;|\u0026#34; \u0026#34;OKAY(o)\u0026#34; \u0026#34;YES(y)\u0026#34; \u0026#34;NO(n)\u0026#34;)))  (defun log-todo-next-creation-date (\u0026amp;rest ignore)  \u0026#34;Log NEXT creation time in the property drawer under the key \u0026#39;ACTIVATED\u0026#39;\u0026#34;  (when (and (string= (org-get-todo-state) \u0026#34;NEXT\u0026#34;)  (not (org-entry-get nil \u0026#34;ACTIVATED\u0026#34;)))  (org-entry-put nil \u0026#34;ACTIVATED\u0026#34; (format-time-string \u0026#34;[%Y-%m-%d]\u0026#34;))))  (add-hook \u0026#39;org-after-todo-state-change-hook #\u0026#39;log-todo-next-creation-date) Super agenda Set files for org-agenda\n(setq org-agenda-files (list (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory)  (expand-file-name \u0026#34;agenda.org\u0026#34; org-directory)  (expand-file-name \u0026#34;gcal-agenda.org\u0026#34; org-directory)  (expand-file-name \u0026#34;notes.org\u0026#34; org-directory)  (expand-file-name \u0026#34;projects.org\u0026#34; org-directory))) Configure org-super-agenda\n(use-package! org-super-agenda  :after org-agenda  :config (org-super-agenda-mode))  (setq org-agenda-skip-scheduled-if-done t  org-agenda-skip-deadline-if-done t  org-agenda-include-deadlines t  org-agenda-block-separator nil  org-agenda-tags-column 100 ;; from testing this seems to be a good value  org-agenda-compact-blocks t)  (setq org-agenda-custom-commands  \u0026#39;((\u0026#34;o\u0026#34; \u0026#34;Overview\u0026#34;  ((agenda \u0026#34;\u0026#34; ((org-agenda-span \u0026#39;day)  (org-super-agenda-groups  \u0026#39;((:name \u0026#34;Today\u0026#34;  :time-grid t  :date today  :todo \u0026#34;TODAY\u0026#34;  :scheduled today  :order 1)))))  (alltodo \u0026#34;\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;)  (org-super-agenda-groups  \u0026#39;((:name \u0026#34;Next to do\u0026#34;  :todo \u0026#34;NEXT\u0026#34;  :order 1)  (:name \u0026#34;Important\u0026#34;  :tag \u0026#34;Important\u0026#34;  :priority \u0026#34;A\u0026#34;  :order 6)  (:name \u0026#34;Due Today\u0026#34;  :deadline today  :order 2)  (:name \u0026#34;Due Soon\u0026#34;  :deadline future  :order 8)  (:name \u0026#34;Overdue\u0026#34;  :deadline past  :face error  :order 7)  (:name \u0026#34;Assignments\u0026#34;  :tag \u0026#34;Assignment\u0026#34;  :order 10)  (:name \u0026#34;Issues\u0026#34;  :tag \u0026#34;Issue\u0026#34;  :order 12)  (:name \u0026#34;Emacs\u0026#34;  :tag \u0026#34;Emacs\u0026#34;  :order 13)  (:name \u0026#34;Projects\u0026#34;  :tag \u0026#34;Project\u0026#34;  :order 14)  (:name \u0026#34;Research\u0026#34;  :tag \u0026#34;Research\u0026#34;  :order 15)  (:name \u0026#34;To read\u0026#34;  :tag \u0026#34;Read\u0026#34;  :order 30)  (:name \u0026#34;Waiting\u0026#34;  :todo \u0026#34;WAIT\u0026#34;  :order 20)  (:name \u0026#34;University\u0026#34;  :tag \u0026#34;Univ\u0026#34;  :order 32)  (:name \u0026#34;Trivial\u0026#34;  :priority\u0026lt;= \u0026#34;E\u0026#34;  :tag (\u0026#34;Trivial\u0026#34; \u0026#34;Unimportant\u0026#34;)  :todo (\u0026#34;SOMEDAY\u0026#34;)  :order 90)  (:discard (:tag (\u0026#34;Chore\u0026#34; \u0026#34;Routine\u0026#34; \u0026#34;Daily\u0026#34;))))))))))) Google calendar (org-gcal) I store my org-gcal configuration privately, it contains something like this:\n(after! org-gcal  (setq org-gcal-client-id \u0026#34;\u0026lt;SOME_ID\u0026gt;.apps.googleusercontent.com\u0026#34;  org-gcal-client-secret \u0026#34;\u0026lt;SOME_SECRET\u0026gt;\u0026#34;  org-gcal-fetch-file-alist \u0026#39;((\u0026#34;\u0026lt;USERNAME\u0026gt;@gmail.com\u0026#34; . \u0026#34;~/Dropbox/Org/gcal-agenda.org\u0026#34;)))) (load! \u0026#34;lisp/private/+org-gcal.el\u0026#34;) Capture Set capture files\n(setq +org-capture-emails-file (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory)  +org-capture-todo-file (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory)  +org-capture-projects-file (expand-file-name \u0026#34;projects.org\u0026#34; org-directory)) Lets set up some org-capture templates, and make them visually nice to access.\n(use-package! doct  :commands (doct))  (after! org-capture  \u0026lt;\u0026lt;prettify-capture\u0026gt;\u0026gt;   (defun +doct-icon-declaration-to-icon (declaration)  \u0026#34;Convert :icon declaration to icon\u0026#34;  (let ((name (pop declaration))  (set (intern (concat \u0026#34;all-the-icons-\u0026#34; (plist-get declaration :set))))  (face (intern (concat \u0026#34;all-the-icons-\u0026#34; (plist-get declaration :color))))  (v-adjust (or (plist-get declaration :v-adjust) 0.01)))  (apply set `(,name :face ,face :v-adjust ,v-adjust))))   (defun +doct-iconify-capture-templates (groups)  \u0026#34;Add declaration\u0026#39;s :icon to each template group in GROUPS.\u0026#34;  (let ((templates (doct-flatten-lists-in groups)))  (setq doct-templates (mapcar (lambda (template)  (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template))  (spec (plist-get (plist-get props :doct) :icon)))  (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec)  \u0026#34;\\t\u0026#34;  (nth 1 template))))  template)  templates))))   (setq doct-after-conversion-functions \u0026#39;(+doct-iconify-capture-templates))   (defun set-org-capture-templates ()  (setq org-capture-templates  (doct `((\u0026#34;Personal todo\u0026#34; :keys \u0026#34;t\u0026#34;  :icon (\u0026#34;checklist\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;green\u0026#34;)  :file +org-capture-todo-file  :prepend t  :headline \u0026#34;Inbox\u0026#34;  :type entry  :template (\u0026#34;* TODO %?\u0026#34;  \u0026#34;%i %a\u0026#34;))  (\u0026#34;Personal note\u0026#34; :keys \u0026#34;n\u0026#34;  :icon (\u0026#34;sticky-note-o\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;green\u0026#34;)  :file +org-capture-todo-file  :prepend t  :headline \u0026#34;Inbox\u0026#34;  :type entry  :template (\u0026#34;* %?\u0026#34;  \u0026#34;%i %a\u0026#34;))  (\u0026#34;Email\u0026#34; :keys \u0026#34;e\u0026#34;  :icon (\u0026#34;envelope\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;)  :file +org-capture-todo-file  :prepend t  :headline \u0026#34;Inbox\u0026#34;  :type entry  :template (\u0026#34;* TODO %^{type|reply to|contact} %\\\\3 %? ✉️\u0026#34;  \u0026#34;Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}\u0026#34;  \u0026#34;about %^{topic}\u0026#34;  \u0026#34;%U %i %a\u0026#34;))  (\u0026#34;Interesting\u0026#34; :keys \u0026#34;i\u0026#34;  :icon (\u0026#34;eye\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;lcyan\u0026#34;)  :file +org-capture-todo-file  :prepend t  :headline \u0026#34;Interesting\u0026#34;  :type entry  :template (\u0026#34;* [ ] %{desc}%? :%{i-type}:\u0026#34;  \u0026#34;%i %a\u0026#34;)  :children ((\u0026#34;Webpage\u0026#34; :keys \u0026#34;w\u0026#34;  :icon (\u0026#34;globe\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;green\u0026#34;)  :desc \u0026#34;%(org-cliplink-capture) \u0026#34;  :i-type \u0026#34;read:web\u0026#34;)  (\u0026#34;Article\u0026#34; :keys \u0026#34;a\u0026#34;  :icon (\u0026#34;file-text\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;)  :desc \u0026#34;\u0026#34;  :i-type \u0026#34;read:reaserch\u0026#34;)  (\u0026#34;Information\u0026#34; :keys \u0026#34;i\u0026#34;  :icon (\u0026#34;info-circle\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;)  :desc \u0026#34;\u0026#34;  :i-type \u0026#34;read:info\u0026#34;)  (\u0026#34;Idea\u0026#34; :keys \u0026#34;I\u0026#34;  :icon (\u0026#34;bubble_chart\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;silver\u0026#34;)  :desc \u0026#34;\u0026#34;  :i-type \u0026#34;idea\u0026#34;)))  (\u0026#34;Tasks\u0026#34; :keys \u0026#34;k\u0026#34;  :icon (\u0026#34;inbox\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;)  :file +org-capture-todo-file  :prepend t  :headline \u0026#34;Tasks\u0026#34;  :type entry  :template (\u0026#34;* TODO %? %^G%{extra}\u0026#34;  \u0026#34;%i %a\u0026#34;)  :children ((\u0026#34;General Task\u0026#34; :keys \u0026#34;k\u0026#34;  :icon (\u0026#34;inbox\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;)  :extra \u0026#34;\u0026#34;  )  (\u0026#34;Task with deadline\u0026#34; :keys \u0026#34;d\u0026#34;  :icon (\u0026#34;timer\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;orange\u0026#34; :v-adjust -0.1)  :extra \u0026#34;\\nDEADLINE: %^{Deadline:}t\u0026#34;  )  (\u0026#34;Scheduled Task\u0026#34; :keys \u0026#34;s\u0026#34;  :icon (\u0026#34;calendar\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;orange\u0026#34;)  :extra \u0026#34;\\nSCHEDULED: %^{Start time:}t\u0026#34;)))  (\u0026#34;Project\u0026#34; :keys \u0026#34;p\u0026#34;  :icon (\u0026#34;repo\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;silver\u0026#34;)  :prepend t  :type entry  :headline \u0026#34;Inbox\u0026#34;  :template (\u0026#34;* %{time-or-todo} %?\u0026#34;  \u0026#34;%i\u0026#34;  \u0026#34;%a\u0026#34;)  :file \u0026#34;\u0026#34;  :custom (:time-or-todo \u0026#34;\u0026#34;)  :children ((\u0026#34;Project-local todo\u0026#34; :keys \u0026#34;t\u0026#34;  :icon (\u0026#34;checklist\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;green\u0026#34;)  :time-or-todo \u0026#34;TODO\u0026#34;  :file +org-capture-project-todo-file)  (\u0026#34;Project-local note\u0026#34; :keys \u0026#34;n\u0026#34;  :icon (\u0026#34;sticky-note\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;yellow\u0026#34;)  :time-or-todo \u0026#34;%U\u0026#34;  :file +org-capture-project-notes-file)  (\u0026#34;Project-local changelog\u0026#34; :keys \u0026#34;c\u0026#34;  :icon (\u0026#34;list\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;)  :time-or-todo \u0026#34;%U\u0026#34;  :heading \u0026#34;Unreleased\u0026#34;  :file +org-capture-project-changelog-file)))  (\u0026#34;\\tCentralised project templates\u0026#34;  :keys \u0026#34;o\u0026#34;  :type entry  :prepend t  :template (\u0026#34;* %{time-or-todo} %?\u0026#34;  \u0026#34;%i\u0026#34;  \u0026#34;%a\u0026#34;)  :children ((\u0026#34;Project todo\u0026#34;  :keys \u0026#34;t\u0026#34;  :prepend nil  :time-or-todo \u0026#34;TODO\u0026#34;  :heading \u0026#34;Tasks\u0026#34;  :file +org-capture-central-project-todo-file)  (\u0026#34;Project note\u0026#34;  :keys \u0026#34;n\u0026#34;  :time-or-todo \u0026#34;%U\u0026#34;  :heading \u0026#34;Notes\u0026#34;  :file +org-capture-central-project-notes-file)  (\u0026#34;Project changelog\u0026#34;  :keys \u0026#34;c\u0026#34;  :time-or-todo \u0026#34;%U\u0026#34;  :heading \u0026#34;Unreleased\u0026#34;  :file +org-capture-central-project-changelog-file)))))))   (set-org-capture-templates)  (unless (display-graphic-p)  (add-hook \u0026#39;server-after-make-frame-hook  (defun org-capture-reinitialise-hook ()  (when (display-graphic-p)  (set-org-capture-templates)  (remove-hook \u0026#39;server-after-make-frame-hook  #\u0026#39;org-capture-reinitialise-hook)))))) It would also be nice to improve how the capture dialogue looks\n(defun org-capture-select-template-prettier (\u0026amp;optional keys)  \u0026#34;Select a capture template, in a prettier way than default Lisp programs can force the template by setting KEYS to a string.\u0026#34;  (let ((org-capture-templates  (or (org-contextualize-keys  (org-capture-upgrade-templates org-capture-templates)  org-capture-templates-contexts)  \u0026#39;((\u0026#34;t\u0026#34; \u0026#34;Task\u0026#34; entry (file+headline \u0026#34;\u0026#34; \u0026#34;Tasks\u0026#34;)  \u0026#34;* TODO %?\\n %u\\n %a\u0026#34;)))))  (if keys  (or (assoc keys org-capture-templates)  (error \u0026#34;No capture template referred to by \\\u0026#34;%s\\\u0026#34; keys\u0026#34; keys))  (org-mks org-capture-templates  \u0026#34;Select a capture template\\n━━━━━━━━━━━━━━━━━━━━━━━━━\u0026#34;  \u0026#34;Template key: \u0026#34;  `((\u0026#34;q\u0026#34; ,(concat (all-the-icons-octicon \u0026#34;stop\u0026#34; :face \u0026#39;all-the-icons-red :v-adjust 0.01) \u0026#34;\\tAbort\u0026#34;))))))) (advice-add \u0026#39;org-capture-select-template :override #\u0026#39;org-capture-select-template-prettier)  (defun org-mks-pretty (table title \u0026amp;optional prompt specials)  \u0026#34;Select a member of an alist with multiple keys. Prettified. TABLE is the alist which should contain entries where the car is a string. There should be two types of entries. 1. prefix descriptions like (\\\u0026#34;a\\\u0026#34; \\\u0026#34;Description\\\u0026#34;) This indicates that `a\u0026#39;is a prefix key for multi-letter selection, and that there are entries following with keys like \\\u0026#34;ab\\\u0026#34;, \\\u0026#34;ax\\\u0026#34;… 2. Select-able members must have more than two elements, with the first being the string of keys that lead to selecting it, and the second a short description string of the item. The command will then make a temporary buffer listing all entries that can be selected with a single key, and all the single key prefixes. When you press the key for a single-letter entry, it is selected. When you press a prefix key, the commands (and maybe further prefixes) under this key will be shown and offered for selection. TITLE will be placed over the selection in the temporary buffer, PROMPT will be used when prompting for a key. SPECIALS is an alist with (\\\u0026#34;key\\\u0026#34; \\\u0026#34;description\\\u0026#34;) entries. When one of these is selected, only the bare key is returned.\u0026#34;  (save-window-excursion  (let ((inhibit-quit t)  (buffer (org-switch-to-buffer-other-window \u0026#34;*Org Select*\u0026#34;))  (prompt (or prompt \u0026#34;Select: \u0026#34;))  case-fold-search  current)  (unwind-protect  (catch \u0026#39;exit  (while t  (setq-local evil-normal-state-cursor (list nil))  (erase-buffer)  (insert title \u0026#34;\\n\\n\u0026#34;)  (let ((des-keys nil)  (allowed-keys \u0026#39;(\u0026#34;\\C-g\u0026#34;))  (tab-alternatives \u0026#39;(\u0026#34;\\s\u0026#34; \u0026#34;\\t\u0026#34; \u0026#34;\\r\u0026#34;))  (cursor-type nil))  ;; Populate allowed keys and descriptions keys  ;; available with CURRENT selector.  (let ((re (format \u0026#34;\\\\`%s\\\\(.\\\\)\\\\\u0026#39;\u0026#34;  (if current (regexp-quote current) \u0026#34;\u0026#34;)))  (prefix (if current (concat current \u0026#34; \u0026#34;) \u0026#34;\u0026#34;)))  (dolist (entry table)  (pcase entry  ;; Description.  (`(,(and key (pred (string-match re))) ,desc)  (let ((k (match-string 1 key)))  (push k des-keys)  ;; Keys ending in tab, space or RET are equivalent.  (if (member k tab-alternatives)  (push \u0026#34;\\t\u0026#34; allowed-keys)  (push k allowed-keys))  (insert (propertize prefix \u0026#39;face \u0026#39;font-lock-comment-face) (propertize k \u0026#39;face \u0026#39;bold) (propertize \u0026#34;›\u0026#34; \u0026#39;face \u0026#39;font-lock-comment-face) \u0026#34; \u0026#34; desc \u0026#34;…\u0026#34; \u0026#34;\\n\u0026#34;)))  ;; Usable entry.  (`(,(and key (pred (string-match re))) ,desc . ,_)  (let ((k (match-string 1 key)))  (insert (propertize prefix \u0026#39;face \u0026#39;font-lock-comment-face) (propertize k \u0026#39;face \u0026#39;bold) \u0026#34; \u0026#34; desc \u0026#34;\\n\u0026#34;)  (push k allowed-keys)))  (_ nil))))  ;; Insert special entries, if any.  (when specials  (insert \u0026#34;─────────────────────────\\n\u0026#34;)  (pcase-dolist (`(,key ,description) specials)  (insert (format \u0026#34;%s %s\\n\u0026#34; (propertize key \u0026#39;face \u0026#39;(bold all-the-icons-red)) description))  (push key allowed-keys)))  ;; Display UI and let user select an entry or  ;; a sublevel prefix.  (goto-char (point-min))  (unless (pos-visible-in-window-p (point-max))  (org-fit-window-to-buffer))  (let ((pressed (org--mks-read-key allowed-keys  prompt  (not (pos-visible-in-window-p (1- (point-max)))))))  (setq current (concat current pressed))  (cond  ((equal pressed \u0026#34;\\C-g\u0026#34;) (user-error \u0026#34;Abort\u0026#34;))  ;; Selection is a prefix: open a new menu.  ((member pressed des-keys))  ;; Selection matches an association: return it.  ((let ((entry (assoc current table)))  (and entry (throw \u0026#39;exit entry))))  ;; Selection matches a special entry: return the  ;; selection prefix.  ((assoc current specials) (throw \u0026#39;exit current))  (t (error \u0026#34;No entry available\u0026#34;)))))))  (when buffer (kill-buffer buffer)))))) (advice-add \u0026#39;org-mks :override #\u0026#39;org-mks-pretty) The org-capture bin is rather nice, but I\u0026rsquo;d be nicer with a smaller frame, and no modeline.\n(setf (alist-get \u0026#39;height +org-capture-frame-parameters) 15) ;; (alist-get \u0026#39;name +org-capture-frame-parameters) \u0026#34;❖ Capture\u0026#34;) ;; ATM hardcoded in other places, so changing breaks stuff (setq +org-capture-fn  (lambda ()  (interactive)  (set-window-parameter nil \u0026#39;mode-line-format \u0026#39;none)  (org-capture))) Roam Basic settings (setq org-roam-directory \u0026#34;~/Dropbox/Org/slip-box\u0026#34;) (setq org-roam-db-location (expand-file-name \u0026#34;org-roam.db\u0026#34; org-roam-directory)) That said, if the directory doesn\u0026rsquo;t exist we likely don\u0026rsquo;t want to be using roam. Since we don\u0026rsquo;t want to trigger errors (which will happen as soon as roam tries to initialize), let\u0026rsquo;s not load roam.\n(package! org-roam :disable t) Mode line file name All those numbers! It\u0026rsquo;s messy. Let\u0026rsquo;s adjust this similarly that I have in the window title\n(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun)  :around #\u0026#39;doom-modeline-buffer-file-name ; takes no args  (if (s-contains-p org-roam-directory (or buffer-file-name \u0026#34;\u0026#34;))  (replace-regexp-in-string  \u0026#34;\\\\(?:^\\\\|.*/\\\\)\\\\([0-9]\\\\{4\\\\}\\\\)\\\\([0-9]\\\\{2\\\\}\\\\)\\\\([0-9]\\\\{2\\\\}\\\\)[0-9]*-\u0026#34;  \u0026#34;🢔(\\\\1-\\\\2-\\\\3) \u0026#34;  (subst-char-in-string ?_ ?  buffer-file-name))  (funcall orig-fun))) Org Roam Capture template (after! org-roam  (setq org-roam-capture-ref-templates  \u0026#39;((\u0026#34;r\u0026#34; \u0026#34;ref\u0026#34; plain \u0026#34;%?\u0026#34;  :if-new (file+head \u0026#34;web/%\u0026lt;%Y%m%d%H%M%S\u0026gt;-${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+created: %U\\n\\n${body}\\n\u0026#34;)  :unnarrowed t)))) Snippet Helpers I often want to set src-block headers, and it\u0026rsquo;s a pain to:\n type them out remember what the accepted values are oh, and specifying the same language again and again  We can solve this in three steps:\n having one-letter snippets, conditioned on (point) being within a src header creating a nice prompt showing accepted values and the current default pre-filling the src-block language with the last language used  For header args, the keys I\u0026rsquo;ll use are:\n r for :results e for :exports v for :eval s for :session d for :dir  (defun +yas/org-src-header-p ()  \u0026#34;Determine whether `point\u0026#39;is within a src-block header or header-args.\u0026#34;  (pcase (org-element-type (org-element-context))  (\u0026#39;src-block (\u0026lt; (point) ; before code part of the src-block  (save-excursion (goto-char (org-element-property :begin (org-element-context)))  (forward-line 1)  (point))))  (\u0026#39;inline-src-block (\u0026lt; (point) ; before code part of the inline-src-block  (save-excursion (goto-char (org-element-property :begin (org-element-context)))  (search-forward \u0026#34;]{\u0026#34;)  (point))))  (\u0026#39;keyword (string-match-p \u0026#34;^header-args\u0026#34; (org-element-property :value (org-element-context)))))) Now let\u0026rsquo;s write a function we can reference in yasnippets to produce a nice interactive way to specify header args.\n(defun +yas/org-prompt-header-arg (arg question values)  \u0026#34;Prompt the user to set ARG header property to one of VALUES with QUESTION. The default value is identified and indicated. If either default is selected, or no selection is made: nil is returned.\u0026#34;  (let* ((src-block-p (not (looking-back \u0026#34;^#\\\\+property:[ \\t]+header-args:.*\u0026#34; (line-beginning-position))))  (default  (or  (cdr (assoc arg  (if src-block-p  (nth 2 (org-babel-get-src-block-info t))  (org-babel-merge-params  org-babel-default-header-args  (let ((lang-headers  (intern (concat \u0026#34;org-babel-default-header-args:\u0026#34;  (+yas/org-src-lang)))))  (when (boundp lang-headers) (eval lang-headers t)))))))  \u0026#34;\u0026#34;))  default-value)  (setq values (mapcar  (lambda (value)  (if (string-match-p (regexp-quote value) default)  (setq default-value  (concat value \u0026#34; \u0026#34;  (propertize \u0026#34;(default)\u0026#34; \u0026#39;face \u0026#39;font-lock-doc-face)))  value))  values))  (let ((selection (consult--read question values :default default-value)))  (unless (or (string-match-p \u0026#34;(default)$\u0026#34; selection)  (string= \u0026#34;\u0026#34; selection))  selection)))) Finally, we fetch the language information for new source blocks.\nSince we\u0026rsquo;re getting this info, we might as well go a step further and also provide the ability to determine the most popular language in the buffer that doesn\u0026rsquo;t have any header-args set for it (with #+properties).\n(defun +yas/org-src-lang ()  \u0026#34;Try to find the current language of the src/header at `point\u0026#39;. Return nil otherwise.\u0026#34;  (let ((context (org-element-context)))  (pcase (org-element-type context)  (\u0026#39;src-block (org-element-property :language context))  (\u0026#39;inline-src-block (org-element-property :language context))  (\u0026#39;keyword (when (string-match \u0026#34;^header-args:\\\\([^ ]+\\\\)\u0026#34; (org-element-property :value context))  (match-string 1 (org-element-property :value context)))))))  (defun +yas/org-last-src-lang ()  \u0026#34;Return the language of the last src-block, if it exists.\u0026#34;  (save-excursion  (beginning-of-line)  (when (re-search-backward \u0026#34;^[ \\t]*#\\\\+begin_src\u0026#34; nil t)  (org-element-property :language (org-element-context)))))  (defun +yas/org-most-common-no-property-lang ()  \u0026#34;Find the lang with the most source blocks that has no global header-args, else nil.\u0026#34;  (let (src-langs header-langs)  (save-excursion  (goto-char (point-min))  (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+begin_src\u0026#34; nil t)  (push (+yas/org-src-lang) src-langs))  (goto-char (point-min))  (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+property: +header-args\u0026#34; nil t)  (push (+yas/org-src-lang) header-langs)))   (setq src-langs  (mapcar #\u0026#39;car  ;; sort alist by frequency (desc.)  (sort  ;; generate alist with form (value . frequency)  (cl-loop for (n . m) in (seq-group-by #\u0026#39;identity src-langs)  collect (cons n (length m)))  (lambda (a b) (\u0026gt; (cdr a) (cdr b))))))   (car (cl-set-difference src-langs header-langs :test #\u0026#39;string=)))) Translate capital keywords (old) to lower case (new) Everyone used to use #+CAPITAL keywords. Then people realised that #+lowercase is actually both marginally easier and visually nicer, so now the capital version is just used in the manual.\n Org is standardized on lower case. Uppercase is used in the manual as a poor man\u0026rsquo;s bold, and supported for historical reasons. \u0026mdash; Nicolas Goaziou on the Org ML\n To avoid sometimes having to choose between the hassle out of updating old documents and using mixed syntax, I\u0026rsquo;ll whip up a basic transcode-y function. It likely misses some edge cases, but should mostly work.\n(defun org-syntax-convert-keyword-case-to-lower ()  \u0026#34;Convert all #+KEYWORDS to #+keywords.\u0026#34;  (interactive)  (save-excursion  (goto-char (point-min))  (let ((count 0)  (case-fold-search nil))  (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+[A-Z_]+\u0026#34; nil t)  (unless (s-matches-p \u0026#34;RESULTS\u0026#34; (match-string 0))  (replace-match (downcase (match-string 0)) t)  (setq count (1+ count))))  (message \u0026#34;Replaced %d occurances\u0026#34; count)))) Fix problematic hooks When one of the org-mode-hook functions errors, it halts the hook execution. This is problematic, and there are two hooks in particular which cause issues. Let\u0026rsquo;s make their failure less eventful.\n(defadvice! shut-up-org-problematic-hooks (orig-fn \u0026amp;rest args)  :around #\u0026#39;org-fancy-priorities-mode  :around #\u0026#39;org-superstar-mode ; :around #\u0026#39;dap-mode-hook  (ignore-errors (apply orig-fn args))) Custom links Subfig This defines a new link type subfig to enable exporting sub-figures to LaTeX, taken form \u0026ldquo;Export subfigures to LaTeX (and HTML)\u0026rdquo;.\n(org-link-set-parameters  \u0026#34;subfig\u0026#34;  :follow (lambda (file) (find-file file))  :face \u0026#39;(:foreground \u0026#34;chocolate\u0026#34; :weight bold :underline t)  :display \u0026#39;full  :export (lambda (file desc backend)  (when (eq backend \u0026#39;latex)  (if (string-match \u0026#34;\u0026gt;(\\\\(.+\\\\))\u0026#34; desc)  (concat \u0026#34;\\\\begin{subfigure}[b]\u0026#34;  \u0026#34;\\\\caption{\u0026#34;  (replace-regexp-in-string \u0026#34;\\s+\u0026gt;(.+)\u0026#34; \u0026#34;\u0026#34; desc)  \u0026#34;}\u0026#34;  \u0026#34;\\\\includegraphics\u0026#34;  \u0026#34;[\u0026#34;  (match-string 1 desc)  \u0026#34;]\u0026#34;  \u0026#34;{\u0026#34;  file  \u0026#34;}\u0026#34;  \u0026#34;\\\\end{subfigure}\u0026#34;)  (format \u0026#34;\\\\begin{subfigure}\\\\includegraphics{%s}\\\\end{subfigure}\u0026#34; desc file))))) Example of usage:\n#+caption: Lorem impsum dolor #+attr_latex: :options \\centering #+begin_figure [[subfig:img1.jpg][Caption of img1 \u0026gt;(width=.3\\textwidth)]]  [[subfig:img2.jpg][Caption of img2 \u0026gt;(width=.3\\textwidth)]]  [[subfig:img3.jpg][Caption of img3 \u0026gt;(width=.6\\textwidth)]] #+end_figure Visuals Here I try to do two things: improve the styling of the various documents, via font changes etc., and also propagate colours from the current theme.\nFont Display Headings Let\u0026rsquo;s make the title and the headings a bit bigger:\n(custom-set-faces!  \u0026#39;(org-document-title :height 1.2))  (custom-set-faces!  \u0026#39;(outline-1 :weight extra-bold :height 1.25)  \u0026#39;(outline-2 :weight bold :height 1.15)  \u0026#39;(outline-3 :weight bold :height 1.12)  \u0026#39;(outline-4 :weight semi-bold :height 1.09)  \u0026#39;(outline-5 :weight semi-bold :height 1.06)  \u0026#39;(outline-6 :weight semi-bold :height 1.03)  \u0026#39;(outline-8 :weight semi-bold)  \u0026#39;(outline-9 :weight semi-bold)) Deadlines It seems reasonable to have deadlines in the error face when they\u0026rsquo;re passed.\n(setq org-agenda-deadline-faces  \u0026#39;((1.001 . error)  (1.0 . org-warning)  (0.5 . org-upcoming-deadline)  (0.0 . org-upcoming-distant-deadline))) Org Pretty Mode Activate +org-pretty-mode.\nnilbody Font styling We can then have quote blocks stand out a bit more by making them italic.\n(setq org-fontify-quote-and-verse-blocks t) While org-hide-emphasis-markers is very nice, it can sometimes make edits which occur at the border a bit more fiddley. We can improve this situation without sacrificing visual amenities with the org-appear package.\n(use-package! org-appear  :hook (org-mode . org-appear-mode)  :config  (setq org-appear-autoemphasis t  org-appear-autosubmarkers t  org-appear-autolinks nil)  ;; for proper first-time setup, `org-appear--set-elements\u0026#39;  ;; needs to be run after other hooks have acted.  (run-at-time nil nil #\u0026#39;org-appear--set-elements)) Fontifying inline src blocks Org does lovely things with #+begin_src blocks, like using font-lock for language\u0026rsquo;s major-mode behind the scenes and pulling out the lovely colorful results. By contrast, inline src_ blocks are somewhat neglected.\nI am not the first person to feel this way, thankfully others have taken to stackexchange to voice their desire for inline src fontification. I was going to steal their work, but unfortunately they didn\u0026rsquo;t perform true source code fontification, but simply applied the org-code face to the content.\nWe can do better than that, and we shall! Using org-src-font-lock-fontify-block we can apply language-appropriate syntax highlighting. Then, continuing on to {{{results(...)}}} , it can have the org-block face applied to match, and then the value-surrounding constructs hidden by mimicking the behavior of prettify-symbols-mode.\nThis currently only highlights a single inline src block per line. I have no idea why it stops, but I\u0026rsquo;d rather it didn\u0026rsquo;t. If you have any idea what\u0026rsquo;s going on or how to fix this please get in touch.\n(defvar org-prettify-inline-results t  \u0026#34;Whether to use (ab)use prettify-symbols-mode on {{{results(...)}}}. Either t or a cons cell of strings which are used as substitutions for the start and end of inline results, respectively.\u0026#34;)  (defvar org-fontify-inline-src-blocks-max-length 200  \u0026#34;Maximum content length of an inline src block that will be fontified.\u0026#34;)  (defun org-fontify-inline-src-blocks (limit)  \u0026#34;Try to apply `org-fontify-inline-src-blocks-1\u0026#39;.\u0026#34;  (condition-case nil  (org-fontify-inline-src-blocks-1 limit)  (error (message \u0026#34;Org mode fontification error in %S at %d\u0026#34;  (current-buffer)  (line-number-at-pos)))))  (defun org-fontify-inline-src-blocks-1 (limit)  \u0026#34;Fontify inline src_LANG blocks, from `point\u0026#39;up to LIMIT.\u0026#34;  (let ((case-fold-search t)  (initial-point (point)))  (while (re-search-forward \u0026#34;\\\\_\u0026lt;src_\\\\([^ \\t\\n[{]+\\\\)[{[]?\u0026#34; limit t) ; stolen from `org-element-inline-src-block-parser\u0026#39;  (let ((beg (match-beginning 0))  pt  (lang-beg (match-beginning 1))  (lang-end (match-end 1)))  (remove-text-properties beg lang-end \u0026#39;(face nil))  (font-lock-append-text-property lang-beg lang-end \u0026#39;face \u0026#39;org-meta-line)  (font-lock-append-text-property beg lang-beg \u0026#39;face \u0026#39;shadow)  (font-lock-append-text-property beg lang-end \u0026#39;face \u0026#39;org-block)  (setq pt (goto-char lang-end))  ;; `org-element--parse-paired-brackets\u0026#39; doesn\u0026#39;t take a limit, so to  ;; prevent it searching the entire rest of the buffer we temporarily  ;; narrow the active region.  (save-restriction  (narrow-to-region beg (min (point-max) limit (+ lang-end org-fontify-inline-src-blocks-max-length)))  (when (ignore-errors (org-element--parse-paired-brackets ?\\[))  (remove-text-properties pt (point) \u0026#39;(face nil))  (font-lock-append-text-property pt (point) \u0026#39;face \u0026#39;org-block)  (setq pt (point)))  (when (ignore-errors (org-element--parse-paired-brackets ?\\{))  (remove-text-properties pt (point) \u0026#39;(face nil))  (font-lock-append-text-property pt (1+ pt) \u0026#39;face \u0026#39;(org-block shadow))  (unless (= (1+ pt) (1- (point)))  (if org-src-fontify-natively  (org-src-font-lock-fontify-block (buffer-substring-no-properties lang-beg lang-end) (1+ pt) (1- (point)))  (font-lock-append-text-property (1+ pt) (1- (point)) \u0026#39;face \u0026#39;org-block)))  (font-lock-append-text-property (1- (point)) (point) \u0026#39;face \u0026#39;(org-block shadow))  (setq pt (point))))  (when (and org-prettify-inline-results (re-search-forward \u0026#34;\\\\= {{{results(\u0026#34; limit t))  (font-lock-append-text-property pt (1+ pt) \u0026#39;face \u0026#39;org-block)  (goto-char pt))))  (when org-prettify-inline-results  (goto-char initial-point)  (org-fontify-inline-src-results limit))))  (defun org-fontify-inline-src-results (limit)  (while (re-search-forward \u0026#34;{{{results(\\\\(.+?\\\\))}}}\u0026#34; limit t)  (remove-list-of-text-properties (match-beginning 0) (point)  \u0026#39;(composition  prettify-symbols-start  prettify-symbols-end))  (font-lock-append-text-property (match-beginning 0) (match-end 0) \u0026#39;face \u0026#39;org-block)  (let ((start (match-beginning 0)) (end (match-beginning 1)))  (with-silent-modifications  (compose-region start end (if (eq org-prettify-inline-results t) \u0026#34;⟨\u0026#34; (car org-prettify-inline-results)))  (add-text-properties start end `(prettify-symbols-start ,start prettify-symbols-end ,end))))  (let ((start (match-end 1)) (end (point)))  (with-silent-modifications  (compose-region start end (if (eq org-prettify-inline-results t) \u0026#34;⟩\u0026#34; (cdr org-prettify-inline-results)))  (add-text-properties start end `(prettify-symbols-start ,start prettify-symbols-end ,end))))))  (defun org-fontify-inline-src-blocks-enable ()  \u0026#34;Add inline src fontification to font-lock in Org. Must be run as part of `org-font-lock-set-keywords-hook\u0026#39;.\u0026#34;  (setq org-font-lock-extra-keywords  (append org-font-lock-extra-keywords \u0026#39;((org-fontify-inline-src-blocks)))))  (add-hook \u0026#39;org-font-lock-set-keywords-hook #\u0026#39;org-fontify-inline-src-blocks-enable) Symbols It\u0026rsquo;s also nice to change the character used for collapsed items (by default …), I think ▾ is better for indicating \u0026lsquo;collapsed section\u0026rsquo;. and add an extra org-bullet to the default list of four. I\u0026rsquo;ve also added some fun alternatives, just commented out.\n(after! org-superstar  (setq org-superstar-headline-bullets-list \u0026#39;(\u0026#34;◉\u0026#34; \u0026#34;○\u0026#34; \u0026#34;✸\u0026#34; \u0026#34;✿\u0026#34; \u0026#34;✤\u0026#34; \u0026#34;✜\u0026#34; \u0026#34;◆\u0026#34; \u0026#34;▶\u0026#34;)  org-superstar-prettify-item-bullets t))  (setq org-ellipsis \u0026#34; ▾ \u0026#34;  org-hide-leading-stars t  org-priority-highest ?A  org-priority-lowest ?E  org-priority-faces  \u0026#39;((?A . \u0026#39;all-the-icons-red)  (?B . \u0026#39;all-the-icons-orange)  (?C . \u0026#39;all-the-icons-yellow)  (?D . \u0026#39;all-the-icons-green)  (?E . \u0026#39;all-the-icons-blue))) It\u0026rsquo;s also nice to make use of the Unicode characters for check boxes, and other commands.\n(appendq! +ligatures-extra-symbols  \u0026#39;(:checkbox \u0026#34;☐\u0026#34;  :pending \u0026#34;◼\u0026#34;  :checkedbox \u0026#34;☑\u0026#34;  :list_property \u0026#34;∷\u0026#34;  :em_dash \u0026#34;—\u0026#34;  :ellipses \u0026#34;…\u0026#34;  :arrow_right \u0026#34;→\u0026#34;  :arrow_left \u0026#34;←\u0026#34;  :title \u0026#34;𝙏\u0026#34;  :subtitle \u0026#34;𝙩\u0026#34;  :language \u0026#34;𝙇\u0026#34;  :author \u0026#34;𝘼\u0026#34;  :email \u0026#34;@\u0026#34;  :date \u0026#34;𝘿\u0026#34;  :property \u0026#34;☸\u0026#34;  :options \u0026#34;⌥\u0026#34;  :startup \u0026#34;⏻\u0026#34;  :macro \u0026#34;𝓜\u0026#34;  :html_head \u0026#34;🅷\u0026#34;  :html \u0026#34;🅗\u0026#34;  :latex_class \u0026#34;🄻\u0026#34;  :latex_class_options \u0026#34;🄻\u0026#34;  :latex_header \u0026#34;🅻\u0026#34;  :beamer_header \u0026#34;🅑\u0026#34;  :latex \u0026#34;🅛\u0026#34;  :attr_latex \u0026#34;🄛\u0026#34;  :attr_html \u0026#34;🄗\u0026#34;  :attr_org \u0026#34;⒪\u0026#34;  :begin_quote \u0026#34;❝\u0026#34;  :end_quote \u0026#34;❞\u0026#34;  :begin_signature \u0026#34;❝\u0026#34;  :end_signature \u0026#34;❞\u0026#34;  :caption \u0026#34;☰\u0026#34;  :name \u0026#34;⁍\u0026#34;  :header \u0026#34;›\u0026#34;  :results \u0026#34;🠶\u0026#34;  :begin_export \u0026#34;⏩\u0026#34;  :end_export \u0026#34;⏪\u0026#34;  :filetags \u0026#34;#\u0026#34;  :created \u0026#34;⏱\u0026#34;  :include \u0026#34;⇩\u0026#34;  :setupfile \u0026#34;⇩\u0026#34;  :export_file_name \u0026#34;⇧\u0026#34;  :properties \u0026#34;⚙\u0026#34;  :end \u0026#34;᛫\u0026#34;  :priority_a ,(propertize \u0026#34;⚑\u0026#34; \u0026#39;face \u0026#39;all-the-icons-red)  :priority_b ,(propertize \u0026#34;⬆\u0026#34; \u0026#39;face \u0026#39;all-the-icons-orange)  :priority_c ,(propertize \u0026#34;■\u0026#34; \u0026#39;face \u0026#39;all-the-icons-yellow)  :priority_d ,(propertize \u0026#34;⬇\u0026#34; \u0026#39;face \u0026#39;all-the-icons-green)  :priority_e ,(propertize \u0026#34;❓\u0026#34; \u0026#39;face \u0026#39;all-the-icons-blue)))  (set-ligatures! \u0026#39;org-mode  :merge t  :checkbox \u0026#34;[ ]\u0026#34;  :pending \u0026#34;[-]\u0026#34;  :checkedbox \u0026#34;[X]\u0026#34;  :list_property \u0026#34;::\u0026#34;  :em_dash \u0026#34;---\u0026#34;  :ellipsis \u0026#34;...\u0026#34;  :arrow_right \u0026#34;-\u0026gt;\u0026#34;  :arrow_left \u0026#34;\u0026lt;-\u0026#34;  :title \u0026#34;#+title:\u0026#34;  :subtitle \u0026#34;#+subtitle:\u0026#34;  :language \u0026#34;#+language:\u0026#34;  :author \u0026#34;#+author:\u0026#34;  :email \u0026#34;#+email:\u0026#34;  :date \u0026#34;#+date:\u0026#34;  :property \u0026#34;#+property:\u0026#34;  :options \u0026#34;#+options:\u0026#34;  :startup \u0026#34;#+startup:\u0026#34;  :macro \u0026#34;#+macro:\u0026#34;  :html_head \u0026#34;#+html_head:\u0026#34;  :html \u0026#34;#+html:\u0026#34;  :latex_class \u0026#34;#+latex_class:\u0026#34;  :latex_class_options \u0026#34;#+latex_class_options\u0026#34;  :latex_header \u0026#34;#+latex_header:\u0026#34;  :beamer_header \u0026#34;#+beamer_header:\u0026#34;  :latex \u0026#34;#+latex:\u0026#34;  :attr_latex \u0026#34;#+attr_latex:\u0026#34;  :attr_html \u0026#34;#+attr_html:\u0026#34;  :attr_org \u0026#34;#+attr_org:\u0026#34;  :begin_quote \u0026#34;#+begin_quote\u0026#34;  :end_quote \u0026#34;#+end_quote\u0026#34;  :begin_signature \u0026#34;#+begin_signature\u0026#34;  :end_signature \u0026#34;#+end_signature\u0026#34;  :caption \u0026#34;#+caption:\u0026#34;  :header \u0026#34;#+header:\u0026#34;  :begin_export \u0026#34;#+begin_export\u0026#34;  :end_export \u0026#34;#+end_export\u0026#34;  :filetags \u0026#34;#+filetags:\u0026#34;  :created \u0026#34;#+created:\u0026#34;  :include \u0026#34;#+include:\u0026#34;  :setupfile \u0026#34;#+setupfile:\u0026#34;  :export_file_name \u0026#34;#+export_file_name:\u0026#34;  :results \u0026#34;#+RESULTS:\u0026#34;  :property \u0026#34;:PROPERTIES:\u0026#34;  :end \u0026#34;:END:\u0026#34;  :priority_a \u0026#34;[#A]\u0026#34;  :priority_b \u0026#34;[#B]\u0026#34;  :priority_c \u0026#34;[#C]\u0026#34;  :priority_d \u0026#34;[#D]\u0026#34;  :priority_e \u0026#34;[#E]\u0026#34;) LaTeX Fragments Prettier highlighting First off, we want those fragments to look good.\n(setq org-highlight-latex-and-related \u0026#39;(native script entities)) However, by using native highlighting the org-block face is added, and that doesn\u0026rsquo;t look too great \u0026mdash; particularly when the fragments are previewed.\nIdeally org-src-font-lock-fontify-block wouldn\u0026rsquo;t add the org-block face, but we can avoid advising that entire function by just adding another face with :inherit default which will override the background color.\nInspecting org-do-latex-and-related shows that \u0026quot;latex\u0026quot; is the language argument passed, and so we can override the background as discussed above.\n(require \u0026#39;org-src) (add-to-list \u0026#39;org-src-block-faces \u0026#39;(\u0026#34;latex\u0026#34; (:inherit default :extend t))) Prettier rendering It\u0026rsquo;s nice to customize the look of LaTeX fragments, so they fit better in the text \u0026mdash; like this \\(\\sqrt{\\beta^2+3}-\\sum_{\\phi=1}^\\infty \\frac{x^\\phi-1}{\\Gamma(a)}\\).\n;; (setq org-format-latex-header \u0026#34;\\\\documentclass{article} ;; \\\\usepackage[usenames]{xcolor} ;; \\\\usepackage[T1]{fontenc} ;; \\\\usepackage{booktabs}  ;; \\\\pagestyle{empty} % do not remove  ;; \\\\setlength{\\\\textwidth}{\\\\paperwidth} ;; \\\\addtolength{\\\\textwidth}{-3cm} ;; \\\\setlength{\\\\oddsidemargin}{1.5cm} ;; \\\\addtolength{\\\\oddsidemargin}{-2.54cm} ;; \\\\setlength{\\\\evensidemargin}{\\\\oddsidemargin} ;; \\\\setlength{\\\\textheight}{\\\\paperheight} ;; \\\\addtolength{\\\\textheight}{-\\\\headheight} ;; \\\\addtolength{\\\\textheight}{-\\\\headsep} ;; \\\\addtolength{\\\\textheight}{-\\\\footskip} ;; \\\\addtolength{\\\\textheight}{-3cm} ;; \\\\setlength{\\\\topmargin}{1.5cm} ;; \\\\addtolength{\\\\topmargin}{-2.54cm} ;; \\\\usepackage{arev} ;; \u0026#34;) Since we can, instead of making the background color match the default face, let\u0026rsquo;s make it transparent.\n(setq org-format-latex-options  (plist-put org-format-latex-options :background \u0026#34;Transparent\u0026#34;))  ;; Can be dvipng, dvisvgm, imagemagick (setq org-preview-latex-default-process \u0026#39;dvisvgm)  ;; Define a function to set the format latex scale (to be reused in hooks) (defun ab/set-org-latex-scale (scale)  (setq org-format-latex-options  (plist-put org-format-latex-options :scale scale)))  ;; Set the default scale (ab/set-org-latex-scale 1.4)  ;; Change scale in Zen mode (when (featurep! :ui zen)  (add-hook! \u0026#39;writeroom-mode-enable-hook (ab/set-org-latex-scale 2.0))  (add-hook! \u0026#39;writeroom-mode-disable-hook (ab/set-org-latex-scale 1.4))) Better equation numbering Numbered equations all have (1) as the number for fragments with vanilla org-mode. This code (from scimax) injects the correct numbers into the previews so they look good. Not working right now!\n(defun scimax-org-renumber-environment (orig-func \u0026amp;rest args)  \u0026#34;A function to inject numbers in LaTeX fragment previews.\u0026#34;  (let ((results \u0026#39;())  (counter -1)  (numberp))  (setq results (cl-loop for (begin . env) in  (org-element-map (org-element-parse-buffer) \u0026#39;latex-environment  (lambda (env)  (cons  (org-element-property :begin env)  (org-element-property :value env))))  collect  (cond  ((and (string-match \u0026#34;\\\\\\\\begin{equation}\u0026#34; env)  (not (string-match \u0026#34;\\\\\\\\tag{\u0026#34; env)))  (cl-incf counter)  (cons begin counter))  ((string-match \u0026#34;\\\\\\\\begin{align}\u0026#34; env)  (prog2  (cl-incf counter)  (cons begin counter)  (with-temp-buffer  (insert env)  (goto-char (point-min))  ;; \\\\ is used for a new line. Each one leads to a number  (cl-incf counter (count-matches \u0026#34;\\\\\\\\$\u0026#34;))  ;; unless there are nonumbers.  (goto-char (point-min))  (cl-decf counter (count-matches \u0026#34;\\\\nonumber\u0026#34;)))))  (t  (cons begin nil)))))   (when (setq numberp (cdr (assoc (point) results)))  (setf (car args)  (concat  (format \u0026#34;\\\\setcounter{equation}{%s}\\n\u0026#34; numberp)  (car args)))))   (apply orig-func args))   (defun scimax-toggle-latex-equation-numbering ()  \u0026#34;Toggle whether LaTeX fragments are numbered.\u0026#34;  (interactive)  (if (not (get \u0026#39;scimax-org-renumber-environment \u0026#39;enabled))  (progn  (advice-add \u0026#39;org-create-formula-image :around #\u0026#39;scimax-org-renumber-environment)  (put \u0026#39;scimax-org-renumber-environment \u0026#39;enabled t)  (message \u0026#34;Latex numbering enabled\u0026#34;))  (advice-remove \u0026#39;org-create-formula-image #\u0026#39;scimax-org-renumber-environment)  (put \u0026#39;scimax-org-renumber-environment \u0026#39;enabled nil)  (message \u0026#34;Latex numbering disabled.\u0026#34;))) Org Plot We can use some variables in org-plot to use the current doom theme colors.\n(after! org-plot  (defun org-plot/generate-theme (_type)  \u0026#34;Use the current Doom theme colours to generate a GnuPlot preamble.\u0026#34;  (format \u0026#34; fgt = \\\u0026#34;textcolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground text fgat = \\\u0026#34;textcolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground alt text fgl = \\\u0026#34;linecolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground line fgal = \\\u0026#34;linecolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground alt line # foreground colors set border lc rgb \u0026#39;%s\u0026#39; # change text colors of tics set xtics @fgt set ytics @fgt # change text colors of labels set title @fgt set xlabel @fgt set ylabel @fgt # change a text color of key set key @fgt # line styles set linetype 1 lw 2 lc rgb \u0026#39;%s\u0026#39; # red set linetype 2 lw 2 lc rgb \u0026#39;%s\u0026#39; # blue set linetype 3 lw 2 lc rgb \u0026#39;%s\u0026#39; # green set linetype 4 lw 2 lc rgb \u0026#39;%s\u0026#39; # magenta set linetype 5 lw 2 lc rgb \u0026#39;%s\u0026#39; # orange set linetype 6 lw 2 lc rgb \u0026#39;%s\u0026#39; # yellow set linetype 7 lw 2 lc rgb \u0026#39;%s\u0026#39; # teal set linetype 8 lw 2 lc rgb \u0026#39;%s\u0026#39; # violet # palette set palette maxcolors 8 set palette defined ( 0 \u0026#39;%s\u0026#39;,\\ 1 \u0026#39;%s\u0026#39;,\\ 2 \u0026#39;%s\u0026#39;,\\ 3 \u0026#39;%s\u0026#39;,\\ 4 \u0026#39;%s\u0026#39;,\\ 5 \u0026#39;%s\u0026#39;,\\ 6 \u0026#39;%s\u0026#39;,\\ 7 \u0026#39;%s\u0026#39; ) \u0026#34;  (doom-color \u0026#39;fg)  (doom-color \u0026#39;fg-alt)  (doom-color \u0026#39;fg)  (doom-color \u0026#39;fg-alt)  (doom-color \u0026#39;fg)  ;; colours  (doom-color \u0026#39;red)  (doom-color \u0026#39;blue)  (doom-color \u0026#39;green)  (doom-color \u0026#39;magenta)  (doom-color \u0026#39;orange)  (doom-color \u0026#39;yellow)  (doom-color \u0026#39;teal)  (doom-color \u0026#39;violet)  ;; duplicated  (doom-color \u0026#39;red)  (doom-color \u0026#39;blue)  (doom-color \u0026#39;green)  (doom-color \u0026#39;magenta)  (doom-color \u0026#39;orange)  (doom-color \u0026#39;yellow)  (doom-color \u0026#39;teal)  (doom-color \u0026#39;violet)  ))  (defun org-plot/gnuplot-term-properties (_type)  (format \u0026#34;background rgb \u0026#39;%s\u0026#39; size 1050,650\u0026#34;  (doom-color \u0026#39;bg)))  (setq org-plot/gnuplot-script-preamble #\u0026#39;org-plot/generate-theme)  (setq org-plot/gnuplot-term-extra #\u0026#39;org-plot/gnuplot-term-properties)) Bibliography (setq org-cite-csl-styles-dir \u0026#34;~/Zotero/styles\u0026#34;) (setq! bibtex-completion-bibliography \u0026#39;(\u0026#34;~/Zotero/library.bib\u0026#34;)) (setq! citar-bibliography \u0026#39;(\u0026#34;~/Zotero/library.bib\u0026#34;)) You may also set the respective note and library path variables as well for enhanced functionality:\n;; (setq! bibtex-completion-library-path \u0026#39;(\u0026#34;~/Zotero/storage\u0026#34;) ;; bibtex-completion-notes-path \u0026#34;/path/to/your/notes/\u0026#34;) ;; (setq! citar-library-paths \u0026#39;(\u0026#34;/path/to/library/files/\u0026#34;) ;; citar-notes-paths \u0026#39;(\u0026#34;/path/to/your/notes/\u0026#34;)) Exporting General settings By default Org only exports the first three levels of headings as \u0026hellip; headings. This is rather unfortunate as my documents frequently stray far beyond three levels of depth. The two main formats I care about exporting to are LaTeX and HTML. When using an article class, LaTeX headlines go from \\section, \\subsection, \\subsubsection, and \\paragraph to \\subgraph \u0026mdash; five levels. HTML5 has six levels of headings (\u0026lt;h1\u0026gt; to \u0026lt;h6\u0026gt;), but first level Org headings get exported as \u0026lt;h2\u0026gt; elements \u0026mdash; leaving five usable levels.\nAs such, it would seem to make sense to recognize the first five levels of Org headings when exporting.\n(setq org-export-headline-levels 5) ; I like nesting I\u0026rsquo;m also going to make use of an item in ox-extra so that I can add an :ignore: tag to headings for the content to be kept, but the heading itself ignored (unlike :noexport: which ignored both heading and content). This is useful when I want to use headings to provide a structure for writing that doesn\u0026rsquo;t appear in the final documents.\n(require \u0026#39;ox-extra) (ox-extras-activate \u0026#39;(ignore-headlines)) Since I (roughly) track Org HEAD, it makes sense to include the git version in the creator string.\n(setq org-export-creator-string  (format \u0026#34;Emacs %s (Org mode %s %s)\u0026#34; emacs-version (org-release) (org-git-version))) LaTeX Export Compiling By default Org uses pdflatex × 3 + bibtex. This simply won\u0026rsquo;t do in our modern world. latexmk + biber (which is used automatically with latexmk) is a simply superior combination.\n;; `org-latex-compilers\u0026#39; contains a list of possible values (\u0026#34;pdflatex\u0026#34; \u0026#34;xelatex\u0026#34; \u0026#34;lualatex\u0026#34;) ;; for the `%latex\u0026#39; argument. (setq org-latex-pdf-process \u0026#39;(\u0026#34;latexmk -f -pdf -%latex -shell-escape -interaction=nonstopmode -output-directory=%o %f\u0026#34;)) ;; NOTE: Not tangled; old school (setq org-latex-pdf-process  \u0026#39;(\u0026#34;pdflatex -interaction nonstopmode -output-directory %o %f\u0026#34;  \u0026#34;bibtex %b\u0026#34;  \u0026#34;pdflatex -interaction nonstopmode -output-directory %o %f\u0026#34;  \u0026#34;pdflatex -interaction nonstopmode -output-directory %o %f\u0026#34;)) While org-latex-pdf-process does support a function, and we could use that instead, this would no longer use the log buffer \u0026mdash; it\u0026rsquo;s a bit blind, you give it the file name and expect it to do its thing.\nThe default values of org-latex-compilers is given in commented form to see how org-latex-pdf-process works with them.\nWhile the -%latex above is slightly hacky (-pdflatex expects to be given a value) it allows us to leave org-latex-compilers unmodified. This is nice in case I open an org file that uses #+LATEX_COMPILER for example, it should still work.\nClass templates (after! ox-latex  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;scr-article\u0026#34;  \u0026#34;\\\\documentclass{scrartcl}\u0026#34;  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)  (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;)))  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;blank\u0026#34;  \u0026#34;[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34;  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)  (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;)))  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;bmc-article\u0026#34;  \u0026#34;\\\\documentclass[article,code,maths]{bmc}\\n[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34;  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)  (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;)))  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;bmc\u0026#34;  \u0026#34;\\\\documentclass[code,maths]{bmc}\\n[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34;  (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;)  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)  (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;)))  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;IEEEtran\u0026#34;  \u0026#34;\\\\documentclass{IEEEtran}\u0026#34;  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)  (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;)))  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;thesis\u0026#34;  \u0026#34;\\\\documentclass[11pt]{book}\u0026#34;  (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;)  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)))  (add-to-list \u0026#39;org-latex-classes  \u0026#39;(\u0026#34;thesis-fr\u0026#34;  \u0026#34;\\\\documentclass[french,12pt,a4paper]{book}\u0026#34;  (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;)  (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;)  (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;)  (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;)  (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;))))  (setq org-latex-default-class \u0026#34;article\u0026#34;) ;; org-latex-tables-booktabs t ;; org-latex-reference-command \u0026#34;\\\\cref{%s}\u0026#34;) Hugo Update files with last modified date, when #+lastmod: is available\n(setq time-stamp-active t  time-stamp-start \u0026#34;#\\\\+lastmod:[ \\t]*\u0026#34;  time-stamp-end \u0026#34;$\u0026#34;  time-stamp-format \u0026#34;%04Y-%02m-%02d\u0026#34;)  (add-hook \u0026#39;before-save-hook \u0026#39;time-stamp nil) System configuration Mime types Org Mode files Org mode isn\u0026rsquo;t recognized as its own mime type by default, but that can easily be changed with the following file. For system-wide changes try /usr/share/mime/packages/org.xml.\n\u0026lt;mime-info xmlns=\u0026#39;http://www.freedesktop.org/standards/shared-mime-info\u0026#39;\u0026gt;  \u0026lt;mime-type type=\u0026#34;text/org\u0026#34;\u0026gt;  \u0026lt;comment\u0026gt;Emacs Org-mode File\u0026lt;/comment\u0026gt;  \u0026lt;glob pattern=\u0026#34;*.org\u0026#34;/\u0026gt;  \u0026lt;alias type=\u0026#34;text/org\u0026#34;/\u0026gt;  \u0026lt;/mime-type\u0026gt; \u0026lt;/mime-info\u0026gt; What\u0026rsquo;s nice is that Papirus now has an icon for text/org. One simply needs to refresh their mime database\nupdate-mime-database ~/.local/share/mime Then set Emacs as the default editor:\nxdg-mime default emacs-client.desktop text/org Registering org-protocol:// The recommended method of registering a protocol is by registering a desktop application, which seems reasonable.\n[Desktop Entry] Name=Emacs Org-Protocol Exec=emacsclient %u Icon=/home/hacko/.doom.d/assets/org-mode.svg Type=Application Terminal=false MimeType=x-scheme-handler/org-protocol To associate org-protocol:// links with the desktop file:\nxdg-mime default org-protocol.desktop x-scheme-handler/org-protocol Configuring Chrome/Brave As specified in the official documentation, we would like to invoke the org-protocol:// without confirmation. To do this, we need to add this system-wide configuration.\nread -p \u0026#34;Do you want to set Chrome/Brave to show the \u0026#39;Always open ...\u0026#39; checkbox, to be used with the \u0026#39;org-protocol://\u0026#39; registration? [Y | N]: \u0026#34; INSTALL_CONFIRM  if [[ $INSTALL_CONFIRM == \u0026#34;Y\u0026#34; ]] then  sudo mkdir -p /etc/opt/chrome/policies/managed/   sudo tee /etc/opt/chrome/policies/managed/external_protocol_dialog.json \u0026gt; /dev/null \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; { \u0026#34;ExternalProtocolDialogShowAlwaysOpenCheckbox\u0026#34;: true } EOF   sudo chmod 644 /etc/opt/chrome/policies/managed/external_protocol_dialog.json fi Then add a bookmarklet in your browser with this code:\njavascript:location.href =  \u0026#39;org-protocol://roam-ref?template=r\u0026amp;ref=\u0026#39;  + encodeURIComponent(location.href)  + \u0026#39;\u0026amp;title=\u0026#39;  + encodeURIComponent(document.title)  + \u0026#39;\u0026amp;body=\u0026#39;  + encodeURIComponent(window.getSelection()) Git Git diffs Based on this gist and this article.\n*.tex diff=tex *.bib diff=bibtex *.{c,h,c++,h++,cc,hh,cpp,hpp} diff=cpp *.m diff=matlab *.py diff=python *.rb diff=ruby *.php diff=php *.pl diff=perl *.{html,xhtml} diff=html *.f diff=fortran *.{el,lisp,scm} diff=lisp *.r diff=rstats *.texi* diff=texinfo *.org diff=org *.rs diff=rust *.odt diff=odt *.odp diff=libreoffice *.ods diff=libreoffice *.doc diff=doc *.xls diff=xls *.ppt diff=ppt *.docx diff=docx *.xlsx diff=xlsx *.pptx diff=pptx *.rtf diff=rtf *.{png,jpg,jpeg,gif} diff=exif *.pdf diff=pdf *.djvu diff=djvu *.epub diff=pandoc *.chm diff=tika *.mhtml? diff=tika *.{class,jar} diff=tika *.{rar,7z,zip,apk} diff=tika Then adding some regular expressions for it to ~/.config/git/config, with some tools to view diffs on binary files.\n# ===== TEXT FORMATS ===== [diff \u0026#34;org\u0026#34;] xfuncname = \u0026#34;^(\\\\*+ +.*)$\u0026#34; [diff \u0026#34;lisp\u0026#34;] xfuncname = \u0026#34;^(\\\\(.*)$\u0026#34; [diff \u0026#34;rstats\u0026#34;] xfuncname = \u0026#34;^([a-zA-z.]+ \u0026lt;- function.*)$\u0026#34; [diff \u0026#34;texinfo\u0026#34;] # from http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=blob;f=.gitattributes;h=c3b2926c78c939d94358cc63d051a70d38cfea5d;hb=HEAD xfuncname = \u0026#34;^@node[ \\t][ \\t]*\\\\([^,][^,]*\\\\)\u0026#34; [diff \u0026#34;orgmode\u0026#34;] xfuncname = \u0026#34;^(\\\\*+.*)$\u0026#34; [diff \u0026#34;rust\u0026#34;] xfuncname = \u0026#34;^[ \\t]*(pub|)[ \\t]*((fn|struct|enum|impl|trait|mod)[^;]*)$\u0026#34; # ===== BINARY FORMATS ===== [diff \u0026#34;pdf\u0026#34;] binary = true # textconv = pdfinfo # textconv = sh -c \u0026#39;pdftotext \u0026#34;$@\u0026#34; -\u0026#39; # sudo apt install pdftotext textconv = sh -c \u0026#39;pdftotext -layout \u0026#34;$0\u0026#34; -enc UTF-8 -nopgbrk -q -\u0026#39; cachetextconv = true [diff \u0026#34;djvu\u0026#34;] binary = true # textconv = pdfinfo textconv = djvutxt # yay -S djvulibre cachetextconv = true [diff \u0026#34;odt\u0026#34;] textconv = odt2txt # textconv = pandoc --standalone --from=odt --to=plain binary = true cachetextconv = true [diff \u0026#34;doc\u0026#34;] # textconv = wvText textconv = catdoc # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;xls\u0026#34;] # textconv = in2csv # textconv = xlscat -a UTF-8 # textconv = soffice --headless --convert-to csv textconv = xls2csv # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;ppt\u0026#34;] textconv = catppt # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;docx\u0026#34;] textconv = pandoc --standalone --from=docx --to=plain # textconv = sh -c \u0026#39;docx2txt.pl \u0026#34;$0\u0026#34; -\u0026#39; binary = true cachetextconv = true [diff \u0026#34;xlsx\u0026#34;] textconv = xlsx2csv # pip install xlsx2csv # textconv = in2csv # textconv = soffice --headless --convert-to csv binary = true cachetextconv = true [diff \u0026#34;pptx\u0026#34;] # pip install --user pptx2md (currently not wotking with Python 3.10) # textconv = sh -c \u0026#39;pptx2md --disable_image --disable_wmf -i \u0026#34;$0\u0026#34; -o ~/.cache/git/presentation.md \u0026gt;/dev/null \u0026amp;\u0026amp; cat ~/.cache/git/presentation.md\u0026#39; # Alternative hack, convert PPTX to PPT, then use the catppt tool textconv = sh -c \u0026#39;soffice --headless --convert-to ppt --outdir /tmp \u0026#34;$0\u0026#34; \u0026amp;\u0026amp; TMP_FILENAME=$(basename -- \u0026#34;$0\u0026#34;) \u0026amp;\u0026amp; catppt \u0026#34;/tmp/${TMP_FILENAME%.*}.ppt\u0026#34;\u0026#39; binary = true cachetextconv = true [diff \u0026#34;rtf\u0026#34;] textconv = unrtf --text # yay -S unrtf binary = true cachetextconv = true [diff \u0026#34;epub\u0026#34;] textconv = pandoc --standalone --from=epub --to=plain binary = true cachetextconv = true [diff \u0026#34;tika\u0026#34;] textconv = tika --config=~/.local/share/tika/tika-conf.xml --text binary = true cachetextconv = true [diff \u0026#34;libreoffice\u0026#34;] textconv = soffice --cat binary = true cachetextconv = true [diff \u0026#34;exif\u0026#34;] binary = true textconv = exiftool # sudo apt install perl-image-exiftool Apache Tika App wrapper Apache Tika is a content detection and analysis framework. It detects and extracts metadata and text from over a thousand different file types. We will be using the Tika App in command-line mode to show some meaningful diff information for some binary files.\nFirst, let\u0026rsquo;s add a custom script to run tika-app:\n#!/bin/sh APACHE_TIKA_JAR=\u0026#34;$HOME/.local/share/tika/tika-app.jar\u0026#34;  if [ -f ${APACHE_TIKA_JAR} ] then  exec java -Dfile.encoding=UTF-8 -jar ${APACHE_TIKA_JAR} \u0026#34;$@\u0026#34; 2\u0026gt;/dev/null else  echo \u0026#34;JAR file not found at ${APACHE_TIKA_JAR}\u0026#34; fi Add tika\u0026rsquo;s installation instructions to the setup.sh file.\nupdate_apache_tika () {  TIKA_JAR_PATH=$HOME/.local/share/tika   if [ ! -d ${TIKA_JAR_PATH} ]  then  mkdir -p ${TIKA_JAR_PATH}  fi   TIKA_BASE_URL=https://archive.apache.org/dist/tika/  TIKA_JAR_LINK=\u0026#34;${TIKA_JAR_PATH}/tika-app.jar\u0026#34;   echo -n \u0026#34;Checking for new Apache Tika App version... \u0026#34;   # Get the lastest version  TIKA_VERSION=$(  curl -s ${TIKA_BASE_URL} | # Get the page  pandoc -f html -t plain | # Convert HTML page to plain text.  awk \u0026#39;/([0-9]+\\.)+[0-1]\\// {print substr($1, 0, length($1)-1)}\u0026#39; | # Get the versions directories (pattern: X.X.X/)  sort -rV | # Sort versions, the newest first  head -n 1 # Get the first (newest) version  )   if [ -z ${TIKA_VERSION} ]  then  echo \u0026#34;Failed, check your internet connection.\u0026#34;  exit 1  fi   echo \u0026#34;Lastest version is ${TIKA_VERSION}\u0026#34;   TIKA_JAR=\u0026#34;${TIKA_JAR_PATH}/tika-app-${TIKA_VERSION}.jar\u0026#34;  TIKA_JAR_URL=\u0026#34;${TIKA_BASE_URL}${TIKA_VERSION}/tika-app-${TIKA_VERSION}.jar\u0026#34;   if [ ! -f ${TIKA_JAR} ]  then  echo \u0026#34;New version available!\u0026#34;  read -p \u0026#34;Do you want to download Apache Tika App v${TIKA_VERSION}? [Y | N]: \u0026#34; INSTALL_CONFIRM  if [[ $INSTALL_CONFIRM == \u0026#34;Y\u0026#34; ]]  then  curl -o ${TIKA_JAR} ${TIKA_JAR_URL} \u0026amp;\u0026amp; echo \u0026#34;Apache Tika App v${TIKA_VERSION}downloaded successfully\u0026#34;  fi  else  echo \u0026#34;Apache Tika App is up-to-date, version ${TIKA_VERSION}already downloaded to \u0026#39;${TIKA_JAR}\u0026#39;\u0026#34;  fi   # Check the existance of the symbolic link  if [ -L ${TIKA_JAR_LINK} ]  then  unlink ${TIKA_JAR_LINK}  fi   # Create a symbolic link to the installed version  ln -s ${TIKA_JAR} ${TIKA_JAR_LINK} }  update_apache_tika; When it detects that Tesseract is installed, Tika App will try to extract text from some file types. For some reason, it tries to use Tesseract with some compressed files like *.bz2, *.apk\u0026hellip; etc. I would like to disable this feature by exporting an XML config file which will be used when launching the Tika App (using --config=\u0026lt;tika-config.xml\u0026gt;).\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;properties\u0026gt;  \u0026lt;parsers\u0026gt;  \u0026lt;parser class=\u0026#34;org.apache.tika.parser.DefaultParser\u0026#34;\u0026gt;  \u0026lt;parser-exclude class=\u0026#34;org.apache.tika.parser.ocr.TesseractOCRParser\u0026#34;/\u0026gt;  \u0026lt;/parser\u0026gt;  \u0026lt;/parsers\u0026gt; \u0026lt;/properties\u0026gt; Emacs\u0026rsquo; Systemd Daemon Let\u0026rsquo;s define a Systemd service to launch Emacs server automatically.\n[Unit] Description=Emacs server daemon Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/  [Service] Type=forking ExecStart=sh -c \u0026#39;emacs --daemon \u0026amp;\u0026amp; emacsclient -c --eval \u0026#34;(delete-frame)\u0026#34;\u0026#39; ExecStop=/usr/bin/emacsclient --no-wait --eval \u0026#34;(progn (setq kill-emacs-hook nil) (kill-emacs))\u0026#34; Restart=on-failure  [Install] WantedBy=default.target Which is then enabled by:\nsystemctl --user enable emacs.service For some reason if a frame isn\u0026rsquo;t opened early in the initialization process, the daemon doesn\u0026rsquo;t seem to like opening frames later \u0026mdash; hence the \u0026amp;\u0026amp; emacsclient part of the ExecStart value.\nEmacs Client Desktop Integration It can now be nice to use this as a \u0026lsquo;default app\u0026rsquo; for opening files. If we add an appropriate desktop entry, and enable it in the desktop environment.\n[Desktop Entry] Name=Emacs (Client) GenericName=Text Editor Comment=A flexible platform for end-user applications MimeType=text/english;text/plain;text/org;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++; Exec=emacsclient -create-frame --frame-parameters=\u0026#34;\u0026#39;(fullscreen . maximized)\u0026#34; --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; --no-wait %F Icon=emacs Type=Application Terminal=false Categories=TextEditor;Utility; StartupWMClass=Emacs Keywords=Text;Editor; X-KDE-StartupNotify=false Command-line Wrapper A wrapper around emacsclient:\n Accepting stdin by putting it in a temporary file and immediately opening it. Guessing that the tty is a good idea when $DISPLAY is unset (relevant with SSH sessions, among other things). With a whiff of 24-bit color support, sets TERM variable to a terminfo that (probably) announces 24-bit color support. Changes GUI emacsclient instances to be non-blocking by default (--no-wait), and instead take a flag to suppress this behavior (-w).  I would use sh, but using arrays for argument manipulation is just too convenient, so I\u0026rsquo;ll raise the requirement to bash. Since arrays are the only \u0026rsquo;extra\u0026rsquo; compared to sh, other shells like ksh etc. should work too.\n#!/usr/bin/env bash force_tty=false force_wait=false stdin_mode=\u0026#34;\u0026#34;  args=()  usage () {  echo -e \u0026#34;Usage: e [-t] [-m MODE] [OPTIONS] FILE [-] Emacs client convenience wrapper. Options: -h, --help Show this message -t, -nw, --tty Force terminal mode -w, --wait Don\u0026#39;t supply --no-wait to graphical emacsclient - Take stdin (when last argument) -m MODE, --mode MODE Mode to open stdin with -mm, --maximized Start Emacs client in maximized window Run emacsclient --help to see help for the emacsclient.\u0026#34; }  while : do  case \u0026#34;$1\u0026#34; in  -t | -nw | --tty)  force_tty=true  shift ;;  -w | --wait)  force_wait=true  shift ;;  -m | --mode)  stdin_mode=\u0026#34; ($2-mode)\u0026#34;  shift 2 ;;  -mm | --maximized)  args+=(\u0026#34;--frame-parameters=\u0026#39;(fullscreen . maximized)\u0026#34;)  shift ;;  -h | --help)  usage  exit 0 ;;  --*=*)  set -- \u0026#34;$@\u0026#34; \u0026#34;${1%%=*}\u0026#34; \u0026#34;${1#*=}\u0026#34;  shift ;;  *)  [ \u0026#34;$#\u0026#34; = 0 ] \u0026amp;\u0026amp; break  args+=(\u0026#34;$1\u0026#34;)  shift ;;  esac done  if [ ! \u0026#34;${#args[*]}\u0026#34; = 0 ] \u0026amp;\u0026amp; [ \u0026#34;${args[-1]}\u0026#34; = \u0026#34;-\u0026#34; ] then  unset \u0026#39;args[-1]\u0026#39;  TMP=\u0026#34;$(mktemp /tmp/emacsstdin-XXX)\u0026#34;  cat \u0026gt; \u0026#34;$TMP\u0026#34;  args+=(--eval \u0026#34;(let ((b (generate-new-buffer \\\u0026#34;*stdin*\\\u0026#34;))) (switch-to-buffer b) (insert-file-contents \\\u0026#34;$TMP\\\u0026#34;) (delete-file \\\u0026#34;$TMP\\\u0026#34;)${stdin_mode})\u0026#34;) fi  if [ -z \u0026#34;$DISPLAY\u0026#34; ] || $force_tty then  # detect terminals with sneaky 24-bit support  if { [ \u0026#34;$COLORTERM\u0026#34; = truecolor ] || [ \u0026#34;$COLORTERM\u0026#34; = 24bit ]; } \\  \u0026amp;\u0026amp; [ \u0026#34;$(tput colors 2\u0026gt;/dev/null)\u0026#34; -lt 257 ]  then  if echo \u0026#34;$TERM\u0026#34; | grep -q \u0026#34;^\\w\\+-[0-9]\u0026#34;  then  termstub=\u0026#34;${TERM%%-*}\u0026#34;  else  termstub=\u0026#34;${TERM#*-}\u0026#34;  fi   if infocmp \u0026#34;$termstub-direct\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1  then  TERM=\u0026#34;$termstub-direct\u0026#34;  else  TERM=\u0026#34;xterm-direct\u0026#34;  fi # should be fairly safe  fi   emacsclient --tty -create-frame --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; \u0026#34;${args[@]}\u0026#34; else  if ! $force_wait  then  args+=(--no-wait)  fi   emacsclient -create-frame --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; \u0026#34;${args[@]}\u0026#34; fi Useful aliases Now, to set an alias to use e with magit, and then for maximum laziness we can set aliases for the terminal-forced variants.\n# Aliases to run emacs+magit alias magit=\u0026#39;e --eval \u0026#34;(progn (magit-status) (delete-other-windows))\u0026#34;\u0026#39; alias magitt=\u0026#39;e -t --eval \u0026#34;(progn (magit-status) (delete-other-windows))\u0026#34;\u0026#39;  # Aliases to run emacs+mu4e alias emu=\u0026#39;e --eval \u0026#34;(progn (=mu4e) (delete-other-windows))\u0026#34;\u0026#39; alias emut=\u0026#39;e -t --eval \u0026#34;(progn (=mu4e) (delete-other-windows))\u0026#34;\u0026#39; And this to launch Emacs in terminal mode et, I use this as a default $EDITOR\n#!/usr/bin/env bash e -t \u0026#34;$@\u0026#34; And ev for use with $VISUAL:\n#!/usr/bin/env bash e -w \u0026#34;$@\u0026#34; export EDITOR=$HOME/.local/bin/et # export VISUAL=$HOME/.local/bin/ev TODOtmux Configure remote/local mixed tmux configuration, an example in this repo and this article.\nAppImage Install/update the appimageupdatetool.AppImage tool:\nupdate_appimageupdatetool () {  TOOL_NAME=appimageupdatetool  MACHINE_ARCH=$(uname -m)  APPIMAGE_UPDATE_TOOL_PATH=\u0026#34;$HOME/.local/bin/${TOOL_NAME}\u0026#34;  APPIMAGE_UPDATE_TOOL_URL=\u0026#34;https://github.com/AppImage/AppImageUpdate/releases/download/continuous/${TOOL_NAME}-${MACHINE_ARCH}.AppImage\u0026#34;   if [ -f ${APPIMAGE_UPDATE_TOOL_PATH} ] \u0026amp;\u0026amp; $APPIMAGE_UPDATE_TOOL_PATH -j ${APPIMAGE_UPDATE_TOOL_PATH} 2\u0026amp;\u0026gt;/dev/null  then  echo \u0026#34;${TOOL_NAME}already up to date\u0026#34;  else  if [ -f ${APPIMAGE_UPDATE_TOOL_PATH} ]  then  echo \u0026#34;Update available, downloading latest ${MACHINE_ARCH}version to ${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34;  mv ${APPIMAGE_UPDATE_TOOL_PATH} \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34;  else  echo \u0026#34;${TOOL_NAME}not found, downloading latest ${MACHINE_ARCH}version to ${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34;  fi  wget -O ${APPIMAGE_UPDATE_TOOL_PATH} ${APPIMAGE_UPDATE_TOOL_URL} 2\u0026amp;\u0026gt;/dev/null \u0026amp;\u0026amp;  echo \u0026#34;Downloaded ${TOOL_NAME}-${MACHINE_ARCH}.AppImage\u0026#34; \u0026amp;\u0026amp;  [ -f \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; ] \u0026amp;\u0026amp;  rm \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34;  chmod a+x ${APPIMAGE_UPDATE_TOOL_PATH}  fi }  update_appimageupdatetool; Custom environment I would like to customize my Linux environment in a separate file, which I source from my ~/.zshrc file.\nI like to define MacOS-like commands (pbcopy and pbpaste) to copy and paste in terminal (from stdin, to stdout). The pbcopy and pbpaste are defined using either xclip or xsel, you would need to install these tools, otherwise we wouldn\u0026rsquo;t define the aliases.\n# Define aliases to \u0026#39;pbcopy\u0026#39; and \u0026#39;pbpaste\u0026#39; if command -v xclip \u0026amp;\u0026gt; /dev/null then  # Define aliases using xclip  alias pbcopy=\u0026#39;xclip -selection clipboard\u0026#39;  alias pbpaste=\u0026#39;xclip -selection clipboard -o\u0026#39; elif command -v xsel \u0026amp;\u0026gt; /dev/null then  # Define aliases using xsel  alias pbcopy=\u0026#39;xsel --clipboard --input\u0026#39;  alias pbpaste=\u0026#39;xsel --clipboard --output\u0026#39; fi And then define gsuon and gsuoff aliases to run graphical apps from terminal with root permissions, this requires xhost.\n# To run GUI apps from terminal with root permissions if command -v xhost \u0026amp;\u0026gt; /dev/null then  alias gsuon=\u0026#39;xhost si:localuser:root\u0026#39;  alias gsuoff=\u0026#39;xhost -si:localuser:root\u0026#39; fi Define a netpaste command to paste to https://ptpb.pw.\n# To copy the output of a command to ptpb.pw alias netpaste=\u0026#39;curl -F c=@- https://ptpb.pw\u0026#39; Use NeoVIM instead of VIM to provide vi and vim commands.\n# NeoVim if command -v nvim \u0026amp;\u0026gt; /dev/null then  alias vim=\u0026#34;nvim\u0026#34;  alias vi=\u0026#34;nvim\u0026#34; fi Add some aliases to work with the ESP-IDF framework.\nif [ -d $HOME/Softwares/src/esp-idf/ ] then  alias esp-prepare-env=\u0026#39;source $HOME/Softwares/src/esp-idf/export.sh\u0026#39;  alias esp-update=\u0026#39;echo \u0026#34;Updating ESP-IDF framework...\u0026#34; \u0026amp;\u0026amp; cd $HOME/src/esp-idf \u0026amp;\u0026amp; git pull --all \u0026amp;\u0026amp; echo \u0026#34;Updated successfully\u0026#34;\u0026#39; else  alias esp-prepare-env=\u0026#39;echo \u0026#34;esp-idf repo not found. You can clone the esp-idf repo using git clone https://github.com/espressif/esp-idf.git\u0026#34;\u0026#39;  alias esp-update=esp-prepare-env fi For the moment, I\u0026rsquo;m not using a particular tool to manage my dotfiles, instead, I use a bare Git repository to manage files, when the workspace is set to the home directory. To be able to add/commit files to the dotfiles repository, I define an alias to git which takes the bare repository as --git-dir, and my home directory as --work-tree.\nalias dotfiles=\u0026#39;git --git-dir=$HOME/Projects/dotfiles.git --work-tree=$HOME\u0026#39; Define an alias to get weather information for my city:\nexport WTTRIN_CITY=Orsay  alias wttrin=\u0026#39;curl wttr.in/$WTTRIN_CITY\u0026#39; alias wttrin2=\u0026#39;curl v2.wttr.in/$WTTRIN_CITY\u0026#39; Enable Meta key and colors in minicom:\nexport MINICOM=\u0026#39;-m -c on\u0026#39; Define Rust sources path, and add packages installed from cargo to the PATH.\nexport RUST_SRC_PATH=$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/ export PATH=$PATH:$HOME/.cargo/bin I\u0026rsquo;m using the AUR package clang-format-static-bin, which provide multiple versions of Clang-format, I use it with some work projects requiring a specific version of Clang-format.\nexport PATH=/opt/clang-format-static:$PATH Add my manually installed libraries to CMake and PATH.\nexport CMAKE_PREFIX_PATH=$HOME/Softwares/src/install export PATH=$PATH:$HOME/.cargo/bin:$HOME/Softwares/src/install/bin Set NPM installation path to local:\nNPM_PACKAGES=\u0026#34;${HOME}/.npm-packages\u0026#34;  # Export NPM bin path export PATH=\u0026#34;$PATH:$NPM_PACKAGES/bin\u0026#34;  # Preserve MANPATH if you already defined it somewhere in your config. # Otherwise, fall back to `manpath` so we can inherit from `/etc/manpath`. export MANPATH=\u0026#34;${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man\u0026#34; Some useful stuff (fzf, opam, Doom Emacs\u0026hellip;)\n# FZF [ -f ~/.fzf.zsh ] \u0026amp;\u0026amp; source ~/.fzf.zsh  # opam configuration [[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh \u0026gt; /dev/null 2\u0026gt; /dev/null  # Add ~/.config/emacs.doom/bin to path (for DOOM Emacs stuff) export PATH=$PATH:$HOME/.config/emacs.doom/bin I like to use tmux by default, even on my local sessions, I like to start a tmux in a default session on the first time I launch a terminal, and then, attach any other terminal to this default session:\nif command -v tmux \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; [ -z \u0026#34;$TMUX\u0026#34; ] then  tmux attach -t default || tmux new -s default fi export DS_DIR=~/PhD/datasets-no/experiment_images/ System dark theme trick Zotero does not support dark mode (ATM), when using a system-wide dark theme (at least on KDE), Zotero UI gets messed up, to fix this, we can force Zotero to use its default GTK theme by defining the GTK_THEME=Default.\n[Desktop Entry] Type=Application Name=Zotero GenericName=A free, easy-to-use tool to help you collect, organize, cite, and share your research sources. Icon=zotero Exec=GTK_THEME=Default /usr/bin/zotero --url %u Categories=Office Terminal=false MimeType=x-scheme-handler/zotero Same thing for Scilab\n[Desktop Entry] Comment=Scientific software package for numerical computations Exec=GTK_THEME=Default scilab -f %f GenericName=Scientific Software Package Icon=scilab Name=Scilab StartupNotify=false Terminal=false Type=Application Categories=Science;Math; Keywords=Science;Math;Numerical;Simulation MimeType=application/x-scilab-sci;application/x-scilab-sce;application/x-scilab-tst;application/x-scilab-dem;application/x-scilab-sod;application/x-scilab-xcos;application/x-scilab-zcos;application/x-scilab-bin;application/x-scilab-cosf;application/x-scilab-cos; [Desktop Entry] Comment=Hybrid simulator Exec=GTK_THEME=Default xcos GenericName=Scientific Software Package Icon=xcos Name=Xcos StartupNotify=false Terminal=false Type=Application Categories=Science;Physics; Keywords=Science;Physics;Simulation MimeType=application/x-scilab-xcos;application/x-scilab-zcos;application/x-scilab-cosf;application/x-scilab-cos; Rust format For Rust code base, the file $HOME/.rustfmt.toml contains the global format settings, I like to set it to:\n# Rust edition 2018 edition = \u0026#34;2018\u0026#34;  # Use Unix style newlines, with 2 spaces tabulation. newline_style = \u0026#34;Unix\u0026#34; tab_spaces = 2 hard_tabs = false  # Make one line functions in a single line fn_single_line = true  # Format strings format_strings = true  # Increase the max line width max_width = 120  # Merge nested imports merge_imports = true  # Enum and Struct alignement enum_discrim_align_threshold = 20 struct_field_align_threshold = 20  # Reorder impl items: type \u0026gt; const \u0026gt; macros \u0026gt; methods. reorder_impl_items = true  # Comments and documentation formating wrap_comments = true normalize_comments = true normalize_doc_attributes = true format_code_in_doc_comments = true report_fixme = \u0026#34;Always\u0026#34; todo = \u0026#34;Always\u0026#34; Ecryptfs Unlock and mount script #!/bin/sh -e # This script mounts a user\u0026#39;s confidential private folder # # Original by Michael Halcrow, IBM # Extracted to a stand-alone script by Dustin Kirkland \u0026lt;kirkland@ubuntu.com\u0026gt; # Modified by: Abdelhak Bougouffa \u0026lt;abougouffa@fedoraproject.org\u0026gt; # # This script: # * interactively prompts for a user\u0026#39;s wrapping passphrase (defaults to their # login passphrase) # * checks it for validity # * unwraps a users mount passphrase with their supplied wrapping passphrase # * inserts the mount passphrase into the keyring # * and mounts a user\u0026#39;s encrypted private folder  PRIVATE_DIR=\u0026#34;Private\u0026#34; PW_ATTEMPTS=3 MESSAGE=`gettext \u0026#34;Enter your login passphrase:\u0026#34;`  if [ -f $HOME/.ecryptfs/wrapping-independent ] then  # use a wrapping passphrase different from the login passphrase  MESSAGE=`gettext \u0026#34;Enter your wrapping passphrase:\u0026#34;` fi  WRAPPED_PASSPHRASE_FILE=\u0026#34;$HOME/.ecryptfs/wrapped-passphrase\u0026#34; MOUNT_PASSPHRASE_SIG_FILE=\u0026#34;$HOME/.ecryptfs/$PRIVATE_DIR.sig\u0026#34;  # First, silently try to perform the mount, which would succeed if the appropriate # key is available in the keyring if /sbin/mount.ecryptfs_private \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 then  exit 0 fi  # Otherwise, interactively prompt for the user\u0026#39;s password if [ -f \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; -a -f \u0026#34;$MOUNT_PASSPHRASE_SIG_FILE\u0026#34; ] then  tries=0   while [ $tries -lt $PW_ATTEMPTS ]  do  LOGINPASS=`zenity --password --title \u0026#34;eCryptFS: $MESSAGE\u0026#34;`  if [ $(wc -l \u0026lt; \u0026#34;$MOUNT_PASSPHRASE_SIG_FILE\u0026#34;) = \u0026#34;1\u0026#34; ]  then  # No filename encryption; only insert fek  if printf \u0026#34;%s\\0\u0026#34; \u0026#34;$LOGINPASS\u0026#34; | ecryptfs-unwrap-passphrase \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; - | ecryptfs-add-passphrase -  then  break  else  zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Error: Your passphrase is incorrect\u0026#34;  tries=$(($tries + 1))  continue  fi  else  if printf \u0026#34;%s\\0\u0026#34; \u0026#34;$LOGINPASS\u0026#34; | ecryptfs-insert-wrapped-passphrase-into-keyring \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; -  then  break  else  zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Error: Your passphrase is incorrect\u0026#34;  tries=$(($tries + 1))  continue  fi  fi  done   if [ $tries -ge $PW_ATTEMPTS ]  then  zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Too many incorrect password attempts, exiting\u0026#34;  exit 1  fi   /sbin/mount.ecryptfs_private else  zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Encrypted private directory is not setup properly\u0026#34;  exit 1 fi  if grep -qs \u0026#34;$HOME/.Private $PWDecryptfs \u0026#34; /proc/mounts 2\u0026gt;/dev/null; then  zenity --info --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Your private directory has been mounted.\u0026#34; fi  dolphin \u0026#34;$HOME/Private\u0026#34; exit 0 Desktop integration [Desktop Entry] Type=Application Version=1.0 Name=eCryptfs Unlock Private Directory Icon=unlock Exec=/home/hacko/.ecryptfs/ecryptfs-mount-private-gui Terminal=False GDB Early init I like to disable the initial message (containing copyright info and other stuff), the right way to do this is either by starting gdb with -q option, or (since GDB v11 I think), by setting in ~/.gdbearlyinit.\n# GDB early init file # Abdelhak Bougouffa (c) 2022 # Disable showing the initial message set startup-quietly Init GDB loads $HOME/.gdbinit at startup, I like to define some default options in this file, this is a WIP, but won\u0026rsquo;t evolve too much, as it is recommended to keep the .gdbinit simple. For the moment, it does just enable pretty printing, and defines c and n commands to wrap continue and next with a post refresh, this is just to avoid the annoying TUI when the program outputs to the stdout.\n# GDB init file # Abdelhak Bougouffa (c) 2022 # Save history set history save on set history filename ~/.gdb_history set history remove-duplicates 2048 # Set pretty print set print pretty on # This fixes the annoying ncurses TUI gliches and saves typing C-l each time to refresh the screen define cc continue refresh end define nn next refresh end guile \u0026lt;\u0026lt;guile-check-for-script\u0026gt;\u0026gt; end WIP: Guile Scheme per program/project script I often debug programs with a lot of arguments, I like to be able to set the arguments and the binary file to be launched in a per project script (currently using Guile Scheme). This bit of code checks if the gdb.scm file exists in the working directory, and if so, loads it.\nA more flexible way is to provide a per program config files (to debug a program named fft, I like to create a script named fft.scm which gets loaded after the file). The following is a WIP, for the moment, I need to call my custom command dbg-guile when GDB done loading symbols from the file, otherwise, the used (current-progspace) returns an object with no filename. I need a mechanism to hook the (dbg-find-and-load) to GDB\u0026rsquo;s load file functionality.\n(use-modules (gdb))  (define (dbg-check-and-load filename)  (if (file-exists? filename)  (begin (display (string-append \u0026#34;Found a Guile Scheme script, loading file \u0026#34; filename \u0026#34;\\n\u0026#34;))  (load filename)  #t)  #f))  (define (dbg-find-and-load)  ;; Get the program name from the current progspace  ;; For a program named \u0026#34;prog\u0026#34;, the priorities goes like this:  ;; 1. a script with the same program name (prog.scm) exists in the current directory  ;; 2. a script with the same program name (prog.scm) exists in the program directory  ;; 3. a script with the name (gdb.scm) exists in the current directory  (let ((dbg-prg-filename (progspace-filename (current-progspace))))  (if dbg-prg-filename  (or (dbg-check-and-load (string-append (basename dbg-prg-filename) \u0026#34;.scm\u0026#34;))  (dbg-check-and-load (string-append dbg-prg-filename \u0026#34;.scm\u0026#34;)))  (dbg-check-and-load \u0026#34;gdb.scm\u0026#34;))))  ;; Run by default (dbg-find-and-load)  ;; Define a command to load binary specific config (register-command! (make-command \u0026#34;dbg-guile\u0026#34; #:invoke (lambda (self arg from-tty) (dbg-find-and-load)))) In my project, I create a gdb.scm (or \u0026lt;program-name\u0026gt;.scm) with something like this:\n;; Load program executable (execute \u0026#34;file ./build/bin/my_program\u0026#34;)  ;; Load program arguments (execute (string-join \u0026#39;(\u0026#34;set args \u0026#34;  \u0026#34;arg1\u0026#34;  \u0026#34;--param=arg2\u0026#34;))) GnuPG I add this to my ~/.gnupg/gpg-agent.conf, to set the time-to-live to one day.\n# Do not ask me about entered passwords for 24h (during the same session) default-cache-ttl 86400 max-cache-ttl 86400 Packages I like to use the BMC class, however, I do not like to manually install stuff in system directories, so I made an Arch Linux AUR package bmc-git for it.\nI do use the metropolis theme for Beamer presentations, so I\u0026rsquo;m maintaining a package of it in the AUR too.\ncheck_and_install_pkg () {  PKG_NAME=\u0026#34;$1\u0026#34;  if ! pacman -Qiq ${PKG_NAME} \u0026amp;\u0026gt; /dev/null  then  echo \u0026#34;Package ${PKG_NAME}is missing, installing it using yay\u0026#34;  yay -S ${PKG_NAME}  fi }  check_and_install_pkg bmc-git check_and_install_pkg beamer-theme-metropolis KDE Plasma On KDE, there is a good support for HiDPI displays, however, an annoying thing is the small icons in some contexts (for example, a right click on desktop). This can be fixed by setting PLASMA_USE_QT_SCALING=1. KDE sources the files with .sh extension found on ~/.config/plasma-workspace/env, so lets create our\u0026rsquo;s.\n# export PLASMA_USE_QT_SCALING=1 ","date":"April 24, 2022","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/config/","summary":"Intro I\u0026rsquo;ve been using Linux exclusively since 2010, GNU Emacs was always installed on my machine, but I didn\u0026rsquo;t discover the real Emacs until 2020, in the beginning, I started my Vanilla Emacs configuration from scratch, but after a while, it becomes a mess. As a new Emacs user, I didn\u0026rsquo;t understand the in the beginning how to optimize my configuration and how to do things correctly. I discovered then Spacemacs, which made things much easier, but it was a little slow, and just after, I found the awesome Doom Emacs, and since, I didn\u0026rsquo;t quit my Emacs screen!","tags":null,"title":"Doom Emacs Configuration"},{"categories":[],"contents":" Prepare your device   In your Android phone, enter recovery mode and enable ADB (usually, you need a custom recovery like TWRP, OrangeFox or LineageOS\u0026#39; recovery… etc). On a Linux machine, forward a local TCP port to a remote port on the Android device (let say local 6789, remote 9876).  adb forward tcp:6789 tcp:9876 adb shell    Netcat your file  Once connected to the device\u0026#39;s shell, start netcat in listen mode on port 9876, and redirect stdout to the partition block device:\nnc -l -p 9876 \u0026gt; /dev/block/sda16   Now on the Linux shell, dd the partition backup file and redirect the output to netcat:\ndd if=/path/to/backup.img | nc localhost 6789 \u0026amp;  See progress information  Using dd, you can check for the progress using the user defined signal USR1, you can see the progress information by sending a USR1 signal to the dd process (knowing it\u0026#39;s PID):\nkill -USR1 [PID]   That\u0026#39;s it!\n    ","date":"January 23, 2022","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/push-partition-android/","summary":"Prepare your device   In your Android phone, enter recovery mode and enable ADB (usually, you need a custom recovery like TWRP, OrangeFox or LineageOS\u0026#39; recovery… etc). On a Linux machine, forward a local TCP port to a remote port on the Android device (let say local 6789, remote 9876).  adb forward tcp:6789 tcp:9876 adb shell    Netcat your file  Once connected to the device\u0026#39;s shell, start netcat in listen mode on port 9876, and redirect stdout to the partition block device:","tags":[],"title":"Push partition image to an Android phone"},{"categories":null,"contents":"","date":"January 3, 2021","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/publication/pso-scanmatching2021/","summary":"","tags":["Mobile robot","LiDAR","SLAM","NDT","PSO"],"title":"Particle swarm optimization for solving a scan-matching problem based on the normal distributions transform"},{"categories":null,"contents":"","date":"December 10, 2020","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/publication/ndtpso-icarcv2020/","summary":"","tags":["Mobile robot","LiDAR","SLAM","NDT","PSO"],"title":"NDT-PSO, a New NDT based SLAM Approach using Particle Swarm Optimization"},{"categories":null,"contents":"Note This work is part of an industrial project, the source code is not shared. For any details about implementation or results please contact me.\n","date":"November 8, 2020","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/publication/smarttrolley-rcae2020/","summary":"Note This work is part of an industrial project, the source code is not shared. For any details about implementation or results please contact me.","tags":["Mobile robot","Indoor Localization","LiDAR","Sensor Fusion","SLAM","NDT","PSO","EKF","SmartTrolley"],"title":"SmartTrolley: An Experimental Mobile Platform for Indoor Localization in Warehouses"},{"categories":[],"contents":"  Sometimes; when working with partimage, someone can create a backup of a 1TB partition which contains -for example- only 10GB of data; in this case, when we want to restore it, partimage will fail if the restore disk does not have enough space (1TB in this case).\n I faced this problem and here the trick I used to restore the backup image to a smaller disk image.\nCreate an image file  Create an image file with the right size (with seek, we don\u0026#39;t need to actually have the whole space):\n# Make sure that the seek=[SIZE] is sufficient dd if=/dev/zero of=disk_image.img bs=1 count=1 seek=1TB    Use image file as loopback  Make the image looks like a disk, by making it as a loopback device.\nsudo losetup /dev/loop0 disk_image.img    Restore!  Restore the backup image to the loopback device.\nsudo partimage restore /dev/loop0 backup.partimage.000    Done!  Done, now you can mount /dev/loop0 or delete the loopback device and mount the `disk_image.img` directly!\nsudo losetup -d /dev/loop0 # delete loopback device  mount disk_image.img /mount/point   This was a trick that I want to share!\n  ","date":"April 16, 2020","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/restore-partimage-small-disk/","summary":"Sometimes; when working with partimage, someone can create a backup of a 1TB partition which contains -for example- only 10GB of data; in this case, when we want to restore it, partimage will fail if the restore disk does not have enough space (1TB in this case).\n I faced this problem and here the trick I used to restore the backup image to a smaller disk image.","tags":[],"title":"Restore a partimage to a smaller disk"},{"categories":null,"contents":"","date":"June 20, 2017","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/publication/master-thesis-2017/","summary":"","tags":["Mobile robot","LiDAR","SLAM","NDT","PSO"],"title":"Contribution à la Localisation et la Cartographie Simultanées (SLAM) dans un Environnement Urbain Inconnu"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/search/","summary":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```","tags":null,"title":"Search Results"}]
[{"categories":null,"contents":" This repository How to install Emacs stuff Intro My private Doom modules This file Doom configuration files Pseudo early-init Useful functions Fixes Check for external tools Doom modules (init.el) File skeleton Input (:input) General (:config) Completion (:completion) User interface (:ui) Editor (:editor) Emacs builtin stuff (:emacs) Terminals (:term) Checkers (:checkers) Tools (:tools) Operating system (:os) Language support (:lang) Email (:email) Apps (:app) Private Additional packages (packages.el) General Emacs settings User information Common variables Secrets Better defaults File deletion Window Split defaults Messages buffer Undo and auto-save Auto-save Undo Visual undo (vundo) Editing Emacs sources Frame Focus created frame Browsers Emacs daemon Initialization Tweaks Save recent files Package configuration User interface Font Theme Doom Modus themes Ef (εὖ) themes Lambda themes Mode line Clock Battery Mode line customization Set transparency Dashboard Custom splash image Dashboard Which key Window title SVG tag and svg-lib Focus Scrolling All the icons Tabs Zen (writeroom) mode Highlight indent guides Editing File templates Scratch buffer Mouse buttons Very large files Evil Aggressive indent YASnippet Completion \u0026amp; IDE Company Tweak company-box Treemacs Projectile Tramp Eros-eval dir-locals.el Language Server Protocol Eglot LSP mode Unpin package Tweaks LSP mode with clangd LSP mode with ccls Enable lsp over tramp VHDL SonarLint Cppcheck Project CMake Clang-format Auto-include C++ headers C/C++ preprocessor conditions Erefactor Lorem ipsum Coverage test Debugging DAP Doom store RealGUD Additional commands Record and replay rr Additional debuggers for RealGUD GDB Emacs GDB a.k.a. gdb-mi Custom layout for gdb-many-windows Highlight current line WIP launch.json support for GUD and RealGUD Valgrind Symbols Emojify Ligatures Natural languages Spell-Fu Proselint Grammarly Eglot LSP Mode Grammalecte LTeX/LanguageTool Go Translate (Google, Bing and DeepL) Offline dictionaries System tools Disk usage Chezmoi Aweshell Lemon eCryptfs Features Workspaces Weather OpenStreetMap Islamic prayer times Info colors Zotero Zotxt CRDT The Silver Searcher Page break lines Emacs Application Framework Bitwarden PDF tools LTDR FZF Fun Speed Type 2048 Game Snow xkcd Applications Calendar e-Books (nov) News feed (elfeed) VPN configuration NetExtender wrapper Emacs + NetExtender Email (mu4e) IMAP (mbsync) SMTP (msmtp) Mail client and indexer (mu and mu4e) Dashboard Save all attachements IRC Multimedia MPD and MPC EMMS EMPV Keybindings Cycle song information in mode line Maxima Maxima IMaxima FriCAS Roam Basic settings Mode line file name Org Roam Capture template View notes in Deft Programming CSV rainbow Vimrc ESS Python IDE Semgrep GNU Octave ROS File extensions ROS bags ros.el Scheme Embedded systems Embed.el Arduino Bitbake (Yocto) Git \u0026amp; VC Magit Granular diff-highlights for all hunks Gravatars WIP Company for commit messages Pretty graph Repo Blamer Assembly Disaster Devdocs Systemd PKGBUILD Franca IDL LaTeX Flycheck + Projectile Graphviz Modula-II Mermaid The V Programming Language Inspector Office Org additional packages Org mode Intro Behavior Tweaking defaults Org basics Babel EVIL TODOs Tags Agenda Super agenda Calendar Google calendar (org-gcal) TODO CalDAV Capture Snippet Helpers Translate capital keywords to lower case Org notifier Org menu LSP in src blocks Custom links Sub-figures LaTeX inline markup Visuals Font display Headings Deadlines Font styling Inline blocks Org Modern Image previews List bullet sequence Symbols LaTeX fragments Prettier highlighting Prettier rendering Better equation numbering Fragtog Org plot Large tables Bibliography BibTeX Org-bib Org-cite Citar Exporting General settings LaTeX export Compiling Org LaTeX packages Export PDFs with syntax highlighting Class templates Export multi-files Org documents Hugo Text editing Plain text Academic phrases French apostrophes Yanking multi-lines paragraphs System configuration Mime types Org mode files Registering org-protocol:// Configuring Chrome/Brave Git Git diffs Apache Tika App wrapper Emacs\u0026rsquo; Systemd daemon Emacs client Desktop integration Command-line wrapper Useful aliases AppImage Oh-my-Zsh Path Themes and customization: Behavior Plugins Bootstrap Oh-my-Zsh Aliases Zsh user configuration pbcopy and pbpaste netpaste Sudo GUI! Neovim ESP-IDF CLI wttrin client Minicom Rust Clang-format CMake Node tmux Other stuff Rust format eCryptfs Unlock and mount script Desktop integration GDB Early init Init GnuPG OCR This Slack Arch Linux packages KDE Plasma This repository This repository (abougouffa/dotfiles) contains my configuration files for Zsh, Emacs, Vim, Alacritty and other Linux related stuff.\nIf you want to reuse some of these configurations, you will need to modify some directories and add some user specific information (usernames, passwords\u0026hellip;)\nThis is the main configuration file .doom.d/config.org, (available also as a PDF file), it contains the literal configuration for Doom Emacs, and I use it to generate some other user configuration files (define aliases, environment variables, user tools, Git configuration\u0026hellip;).\nHow to install Since commit 55c92810, I\u0026rsquo;m using chezmoi to manage my Dotfiles.\nNow the Dotfiles can be installed using the following command; however, I don\u0026rsquo;t recommend installing all of my dotfiles, try instead to adapt them or to copy some interesting chunks.\nsudo pacman -S chezmoi chezmoi init --apply abougouffa Emacs stuff To use my Doom Emacs configuration, you need first to install Doom Emacs to ~/.config/emacs or .emacs.d:\ngit clone https://github.com/doomemacs/doomemacs.git ~/.config/emacs ~/.config/emacs/bin/doom install Until 12b3d20e, I was using Chemacs2 to manage multiple Emacs profiles. Since I\u0026rsquo;m using only Doom Emacs and Doom recently introduced a new feature to bootstrap other Emacs configs, so I switched to a plain Doom Emacs config.\nIntro I\u0026rsquo;ve been using Linux exclusively since 2010, GNU Emacs was always installed on my machine, but I didn\u0026rsquo;t discover the real Emacs until 2020, in the beginning, I started my Vanilla Emacs configuration from scratch, but after a while, it becomes a mess. As a new Emacs user, I didn\u0026rsquo;t understand the in the beginning how to optimize my configuration and how to do things correctly. I discovered then Spacemacs, which made things much easier, but it was a little slow, and just after, I found the awesome Doom Emacs, and since, I didn\u0026rsquo;t quit my Emacs screen!\nIn the beginning, I was basically copying chunks of Emacs Lisp code from the internet, which quickly becomes a mess, specially because I was using a mixture of vanilla Emacs style configurations and Doom style ones.\nNow I decided to rewrite a cleaner version of my configuration which will be more Doom friendly, and for that, I found an excellent example in tecosaur\u0026rsquo;s emacs-config, so my current configuration is heavily inspired by tecosaur\u0026rsquo;s one.\nMy private Doom modules I\u0026rsquo;m moving the big reusable configuration parts to separate modules. See the .doom.d/modules/private for the currently implemented modules.\nThis file This is my literate configuration file, I use it to generate Doom\u0026rsquo;s config files ($DOOMDIR/init.el, $DOOMDIR/packages.el and $DOOMDIR/config.el), as well as some other shell scripts, app installers, app launchers\u0026hellip; etc.\nMake config.el run (slightly) faster with lexical binding (see this blog post for more info).\n;;; config.el -*- coding: utf-8-unix; lexical-binding: t; -*- Add the shebang and the description to the setup.sh file, which will be used to set system settings and install some missing dependencies.\n#!/bin/bash # This is an automatically generated setup file, it installes some missing # dependencies, configure system services, set system settings form better # desktop integration... etc. # Abdelhak BOUGOUFFA (c) 2022 Add an initial comment to the ~/.zshrc file.\n# -*- mode: sh; -*- # This file is automatically generated from my Org literate configuration. # Abdelhak BOUGOUFFA (c) 2022 Doom configuration files Pseudo early-init This file will be loaded before the content of Doom\u0026rsquo;s private init.el, I add some special stuff which I want to load very early.\n;;; pseudo-early-init.el -*- coding: utf-8-unix; lexical-binding: t; -*- Useful functions Here we define some useful functions, some of them are available via other packages like cl-lib, dash.el or s.el, but I don\u0026rsquo;t like to load too much third party libraries, particulary in early stage, so let\u0026rsquo;s define here.\n;;; === Primitives === ;; (+bool \u0026#34;someval\u0026#34;) ;; ==\u0026gt; t (defun +bool (val) (not (null val))) ;;; === Higher order functions === ;; (+foldr (lambda (a b) (message \u0026#34;(%d + %d)\u0026#34; a b) (+ a b)) 0 \u0026#39;(1 2 3 4 5)) ;; ==\u0026gt; 15 ;; (5 + 0) -\u0026gt; (4 + 5) -\u0026gt; (3 + 9) -\u0026gt; (2 + 12) --\u0026gt; (1 + 14) (defun +foldr (fun acc seq) (if (null seq) acc (funcall fun (car seq) (+foldr fun acc (cdr seq))))) ;; (+foldl (lambda (a b) (message \u0026#34;(%d + %d)\u0026#34; a b) (+ a b)) 0 \u0026#39;(1 2 3 4 5)) ;; ==\u0026gt; 15 ;; (0 + 1) -\u0026gt; (1 + 2) -\u0026gt; (3 + 3) -\u0026gt; (6 + 4) -\u0026gt; (10 + 5) (defun +foldl (fun acc seq) (if (null seq) acc (+foldl fun (funcall fun acc (car seq)) (cdr seq)))) ;; (+all \u0026#39;(83 88 t \u0026#34;txt\u0026#34;)) ;; ==\u0026gt; t (defun +all (seq) (+foldr (lambda (r l) (and r l)) t seq)) ;; (+some \u0026#39;(nil nil \u0026#34;text\u0026#34; nil 2)) ;; ==\u0026gt; t (defun +some (seq) (+bool (+foldr (lambda (r l) (or r l)) nil seq))) ;; (+filter \u0026#39;stringp \u0026#39;(\u0026#34;A\u0026#34; 2 \u0026#34;C\u0026#34; nil 3)) ;; ==\u0026gt; (\u0026#34;A\u0026#34; \u0026#34;C\u0026#34;) (defun +filter (fun seq) (when seq (let ((head (car seq)) (tail (cdr seq))) (if (funcall fun head) (cons head (+filter fun tail)) (+filter fun tail))))) ;; (+zip \u0026#39;(1 2 3 4) \u0026#39;(a b c d) \u0026#39;(\u0026#34;A\u0026#34; \u0026#34;B\u0026#34; \u0026#34;C\u0026#34; \u0026#34;D\u0026#34;)) ;; ==\u0026gt; ((1 a \u0026#34;A\u0026#34;) (2 b \u0026#34;B\u0026#34;) (3 c \u0026#34;C\u0026#34;) (4 d \u0026#34;D\u0026#34;)) (defun +zip (\u0026amp;rest seqs) (if (null (car seqs)) nil (cons (mapcar #\u0026#39;car seqs) (apply #\u0026#39;+zip (mapcar #\u0026#39;cdr seqs))))) ;;; === Strings === ;; (+str-join \u0026#34;, \u0026#34; \u0026#39;(\u0026#34;foo\u0026#34; \u0026#34;10\u0026#34; \u0026#34;bar\u0026#34;)) ;; ==\u0026gt; \u0026#34;foo, 10, bar\u0026#34; (defun +str-join (sep seq) (+foldl (lambda (l r) (concat l sep r)) (car seq) (cdr seq))) ;; (+str-split \u0026#34;foo, 10, bar\u0026#34; \u0026#34;, \u0026#34;) ;; ==\u0026gt; (\u0026#34;foo\u0026#34; \u0026#34;10\u0026#34; \u0026#34;bar\u0026#34;) (defun +str-split (str sep) (let ((s (string-search sep str))) (if s (cons (substring str 0 s) (+str-split (substring str (+ s (length sep))) sep)) (list str)))) (defun +str-replace (old new s) \u0026#34;Replaces OLD with NEW in S.\u0026#34; (replace-regexp-in-string (regexp-quote old) new s t t)) (defun +str-replace-all (replacements s) \u0026#34;REPLACEMENTS is a list of cons-cells. Each `car` is replaced with `cdr` in S.\u0026#34; (replace-regexp-in-string (regexp-opt (mapcar \u0026#39;car replacements)) (lambda (it) (cdr (assoc-string it replacements))) s t t)) ;;; === Files, IO === (defun +file-mime-type (file) \u0026#34;Get MIME type for FILE based on magic codes provided by the \u0026#39;file\u0026#39; command. Return a symbol of the MIME type, ex: `text/x-lisp\u0026#39;, `text/plain\u0026#39;, `application/x-object\u0026#39;, `application/octet-stream\u0026#39;, etc.\u0026#34; (let ((mime-type (shell-command-to-string (format \u0026#34;file --brief --mime-type %s\u0026#34; file)))) (intern (string-trim-right mime-type)))) (defun +file-name-incremental (filename) \u0026#34;Return an unique file name for FILENAME. If \\\u0026#34;file.ext\\\u0026#34; exists, returns \\\u0026#34;file-0.ext\\\u0026#34;.\u0026#34; (let* ((ext (file-name-extension filename)) (dir (file-name-directory filename)) (file (file-name-base filename)) (filename-regex (concat \u0026#34;^\u0026#34; file \u0026#34;\\\\(?:-\\\\(?1:[[:digit:]]+\\\\)\\\\)?\u0026#34; (if ext (concat \u0026#34;\\\\.\u0026#34; ext) \u0026#34;\u0026#34;))) (last-file (car (last (directory-files dir nil filename-regex)))) (last-file-num (when (and last-file (string-match filename-regex last-file) (match-string 1 last-file)))) (num (1+ (string-to-number (or last-file-num \u0026#34;-1\u0026#34;)))) (filename (file-name-concat dir (format \u0026#34;%s%s%s\u0026#34; file (if last-file (format \u0026#34;-%d\u0026#34; num) \u0026#34;\u0026#34;) (if ext (concat \u0026#34;.\u0026#34; ext) \u0026#34;\u0026#34;))))) filename)) (defun +file-read-to-string (filename) \u0026#34;Return a string with the contents of FILENAME.\u0026#34; (when (and (file-exists-p filename) (not (file-directory-p filename))) (with-temp-buffer (insert-file-contents filename) (buffer-string)))) ;;; === Systemd === (defun +systemd-running-p (service) \u0026#34;Check if the systemd SERVICE is running.\u0026#34; (zerop (call-process \u0026#34;systemctl\u0026#34; nil nil nil \u0026#34;--user\u0026#34; \u0026#34;is-active\u0026#34; \u0026#34;--quiet\u0026#34; service \u0026#34;.service\u0026#34;))) (defun +systemd-command (service command \u0026amp;optional pre-fn post-fn) \u0026#34;Call systemd with COMMAND and SERVICE.\u0026#34; (interactive) (when pre-fn (funcall pre-fn)) (let ((success (zerop (call-process \u0026#34;systemctl\u0026#34; nil nil nil \u0026#34;--user\u0026#34; command service \u0026#34;.service\u0026#34;)))) (unless success (message \u0026#34;[systemd]: Failed on calling \u0026#39;%s\u0026#39; on service %s.service.\u0026#34; command service)) (when post-fn (funcall post-fn success)) success)) (defun +systemd-start (service \u0026amp;optional pre-fn post-fn) \u0026#34;Start systemd SERVICE.\u0026#34; (interactive) (+systemd-command service \u0026#34;start\u0026#34; pre-fn post-fn)) (defun +systemd-stop (service \u0026amp;optional pre-fn post-fn) \u0026#34;Stops the systemd SERVICE.\u0026#34; (interactive) (+systemd-command service \u0026#34;stop\u0026#34; pre-fn post-fn)) Fixes ;; Fixes to apply early (when (daemonp) ;; When starting Emacs in daemon mode, ;; I need to have a valid passphrase in the gpg-agent. (let ((try-again 3) unlocked) (while (not (or unlocked (zerop try-again))) (setq unlocked (zerop (shell-command \u0026#34;gpg -q --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg \u0026gt; /dev/null\u0026#34; nil nil)) try-again (1- try-again)) (unless unlocked (message \u0026#34;GPG: failed to unlock, please try again (%d)\u0026#34; try-again))) (unless unlocked ;; Exit Emacs, systemd will restart it (kill-emacs 1)))) Check for external tools Some added packages require external tools, I like to check for these tools and store the result in global constants.\n(defconst EAF-DIR (expand-file-name \u0026#34;eaf/eaf-repo\u0026#34; doom-data-dir)) (defconst IS-LUCID (string-search \u0026#34;LUCID\u0026#34; system-configuration-features)) (defconst FRICAS-DIR \u0026#34;/usr/lib/fricas/emacs\u0026#34;) (defconst AG-P (executable-find \u0026#34;ag\u0026#34;)) (defconst EAF-P (and (not IS-LUCID) (file-directory-p EAF-DIR))) (defconst MPD-P (+all (mapcar #\u0026#39;executable-find \u0026#39;(\u0026#34;mpc\u0026#34; \u0026#34;mpd\u0026#34;)))) (defconst MPV-P (executable-find \u0026#34;mpv\u0026#34;)) (defconst REPO-P (executable-find \u0026#34;repo\u0026#34;)) (defconst FRICAS-P (and (executable-find \u0026#34;fricas\u0026#34;) (file-directory-p FRICAS-DIR))) (defconst MAXIMA-P (executable-find \u0026#34;maxima\u0026#34;)) (defconst TUNTOX-P (executable-find \u0026#34;tuntox\u0026#34;)) (defconst ROSBAG-P (executable-find \u0026#34;rosbag\u0026#34;)) (defconst ZOTERO-P (executable-find \u0026#34;zotero\u0026#34;)) (defconst CHEZMOI-P (executable-find \u0026#34;chezmoi\u0026#34;)) (defconst STUNNEL-P (executable-find \u0026#34;stunnel\u0026#34;)) (defconst ECRYPTFS-P (+all (mapcar #\u0026#39;executable-find \u0026#39;(\u0026#34;ecryptfs-add-passphrase\u0026#34; \u0026#34;/sbin/mount.ecryptfs_private\u0026#34;)))) (defconst BITWARDEN-P (executable-find \u0026#34;bw\u0026#34;)) (defconst YOUTUBE-DL-P (+some (mapcar #\u0026#39;executable-find \u0026#39;(\u0026#34;yt-dlp\u0026#34; \u0026#34;youtube-dl\u0026#34;)))) (defconst NETEXTENDER-P (and (executable-find \u0026#34;netExtender\u0026#34;) (+all (mapcar #\u0026#39;file-exists-p \u0026#39;(\u0026#34;~/.local/bin/netextender\u0026#34; \u0026#34;~/.ssh/sslvpn.gpg\u0026#34;))))) (defconst CLANG-FORMAT-P (executable-find \u0026#34;clang-format\u0026#34;)) (defconst LANGUAGETOOL-P (executable-find \u0026#34;languagetool\u0026#34;)) Doom modules (init.el) Here is the literate configuration which generates the Doom\u0026rsquo;s init.el file, this file contains all the enabled Doom modules with the appropriate flags.\nThis section defines the default source blocks arguments . All source blocks in this section inherits these headers, so they will not be tangled unless overwriting in the block\u0026rsquo;s header.\nFile skeleton This first section defines the template for the subsections, it uses the no-web syntax to include subsections specified as \u0026lt;\u0026lt;sub-section-name\u0026gt;\u0026gt;.\n;;; init.el -*- coding: utf-8-unix; lexical-binding: t; -*- ;; This file controls what Doom modules are enabled and what order they load in. ;; Press \u0026#39;K\u0026#39; on a module to view its documentation, and \u0026#39;gd\u0026#39; to browse its directory. ;; I add some special stuff wich I want to load very early. (load! \u0026#34;pseudo-early-init.el\u0026#34;) (doom! :input \u0026lt;\u0026lt;doom-input\u0026gt;\u0026gt; :completion \u0026lt;\u0026lt;doom-completion\u0026gt;\u0026gt; :ui \u0026lt;\u0026lt;doom-ui\u0026gt;\u0026gt; :editor \u0026lt;\u0026lt;doom-editor\u0026gt;\u0026gt; :emacs \u0026lt;\u0026lt;doom-emacs\u0026gt;\u0026gt; :term \u0026lt;\u0026lt;doom-term\u0026gt;\u0026gt; :checkers \u0026lt;\u0026lt;doom-checkers\u0026gt;\u0026gt; :tools \u0026lt;\u0026lt;doom-tools\u0026gt;\u0026gt; :os \u0026lt;\u0026lt;doom-os\u0026gt;\u0026gt; :lang \u0026lt;\u0026lt;doom-lang\u0026gt;\u0026gt; :email \u0026lt;\u0026lt;doom-email\u0026gt;\u0026gt; :app \u0026lt;\u0026lt;doom-app\u0026gt;\u0026gt; :config \u0026lt;\u0026lt;doom-config\u0026gt;\u0026gt; :private \u0026lt;\u0026lt;doom-private\u0026gt;\u0026gt; ) Input (:input) Enable bidirectional languages support (bidi).\nbidi General (:config) Enable literate configuration (like this file!), and some defaults.\nliterate (default +bindings +smartparens) Completion (:completion) I\u0026rsquo;m lazy, I like Emacs to complete my writings.\n(vertico +icons) (company +childframe) User interface (:ui) Enables some user interface features for better user experience, the beautiful modeline, the treemacs project tree, better version control integration with vc-gutter\u0026hellip; and other useful stuff.\nzen deft doom hydra hl-todo ophints modeline nav-flash workspaces indent-guides doom-dashboard (treemacs +lsp) ;; (ligatures +extra) (popup +all +defaults) (emoji +ascii +github) (window-select +numbers) (vc-gutter +diff-hl +pretty) Editor (:editor) Some editing modules, the most important feature is EVIL to enable Vim style editing in Emacs. I like also to edit with multiple cursors, enable yasnippet support, wrap long lines, auto format support.\n(evil +everywhere) file-templates fold format multiple-cursors parinfer snippets word-wrap Emacs builtin stuff (:emacs) Beautify Emacs builtin packages.\nvc undo (ibuffer +icons) Terminals (:term) Run commands in terminal from Emacs. I use mainly vterm on my local machine, however, I like to have eshell, shell and term installed to use them for remote file editing (via Tramp).\nterm vterm shell eshell Checkers (:checkers) I like to check my documents for errors while I\u0026rsquo;m typing. The grammar module enables LanguageTool support.\n(syntax +childframe) (spell +aspell) Tools (:tools) I enable some useful tools which facilitate my work flow, I like to enable Docker support, EditorConfig is a good feature to have. I like to enable lsp-mode and dap-mode for coding and debugging by enabling the lsp and debugger modules with +lsp support (further customization for lsp and dap below). pdf adds support through pdf-tools, which are great for viewing PDF files inside Emacs, I also enable some extra tools, like magit, lookup, tmux\u0026hellip; etc.\nein pdf rgb gist make tmux direnv upload biblio tree-sitter editorconfig (lsp +peek) (docker +lsp) (magit +forge) (debugger +lsp) (eval +overlay) (lookup +docsets +dictionary +offline) Operating system (:os) I enable tty for better support of terminal editing.\n(tty +osc) Language support (:lang) Most of the projects I\u0026rsquo;m working on are mainly written in C/C++, Python, Rust and some Lisp stuff, I edit also a lot of configuration and data files in several formats (csv, yaml, xml, json, shell scripts\u0026hellip;). I use Org-mode to manage all my papers and notes, so I need to enable as many features as I need, I do enable plantuml also to quickly plot UML models withing Org documents.\nqt data plantuml emacs-lisp common-lisp (ess +lsp) (yaml +lsp) (markdown +grip) (csharp +dotnet) (racket +lsp +xp) (lua +lsp +fennel) (web +tree-sitter) (latex +lsp +latexmk) (cc +lsp +tree-sitter) (sh +lsp +tree-sitter) (json +lsp +tree-sitter) (rust +lsp +tree-sitter) (julia +lsp +tree-sitter) (python +lsp +pyenv +pyright +tree-sitter) (scheme +chez +mit +chicken +gauche +guile +chibi) (org +dragndrop +gnuplot +jupyter +pandoc +noter +journal +hugo +present +pomodoro +roam2) Email (:email) I like to use mu4e to manage mail mailboxes. The +org flag adds org-msg support and +gmail adds better management of Gmail accounts.\n(:if (executable-find \u0026#34;mu\u0026#34;) (mu4e +org +gmail)) Apps (:app) Emacs contains a ton of applications, some of them are supported by Doom, I like to use Emacs manage my calendar, chat on IRC, and receive news. I do use EMMS sometimes to play music without leaving Emacs, and I like to enable support for emacs-everywhere.\nirc rss emms calendar everywhere Private (grammar +lsp) ;; (corfu +icons) (binary +disasm) (dired-ng +icons +bindings) Additional packages (packages.el) This section generates Doom\u0026rsquo;s packages.el, with the associated configurations (use-package! blocks).\nThis file shouldn\u0026rsquo;t be byte compiled.\n;; -*- coding: utf-8-unix; no-byte-compile: t; -*- General Emacs settings User information (setq user-full-name \u0026#34;Abdelhak Bougouffa\u0026#34; user-mail-address \u0026#34;abougouffa@fedoraproject.org\u0026#34;) Common variables (defvar +my/lang-main \u0026#34;en\u0026#34;) (defvar +my/lang-secondary \u0026#34;fr\u0026#34;) (defvar +my/lang-mother-tongue \u0026#34;ar\u0026#34;) (defvar +my/biblio-libraries-list (list (expand-file-name \u0026#34;~/Zotero/library.bib\u0026#34;))) (defvar +my/biblio-storage-list (list (expand-file-name \u0026#34;~/Zotero/storage/\u0026#34;))) (defvar +my/biblio-notes-path (expand-file-name \u0026#34;~/PhD/bibliography/notes/\u0026#34;)) (defvar +my/biblio-styles-path (expand-file-name \u0026#34;~/Zotero/styles/\u0026#34;)) ;; Set it early, to avoid creating \u0026#34;~/org\u0026#34; at startup (setq org-directory \u0026#34;~/Dropbox/Org\u0026#34;) Secrets Set the path to my GPG encrypted secrets. I like to set the cache expiry to nil instead of the default 2 hours.\n(setq auth-sources \u0026#39;(\u0026#34;~/.authinfo.gpg\u0026#34;) auth-source-do-cache t auth-source-cache-expiry 86400 ; All day, defaut is 2h (7200) password-cache t password-cache-expiry 86400) (after! epa (setq-default epa-file-encrypt-to \u0026#39;(\u0026#34;F808A020A3E1AC37\u0026#34;))) Better defaults File deletion Delete files by moving them to trash.\n(setq-default delete-by-moving-to-trash t trash-directory nil) ;; Use freedesktop.org trashcan Window Take new window space from all other windows (not just current).\n(setq-default window-combination-resize t) Split defaults Split horizontally to right, vertically below the current window.\n(setq evil-vsplit-window-right t evil-split-window-below t) Show list of buffers when splitting.\n(defadvice! prompt-for-buffer (\u0026amp;rest _) :after \u0026#39;(evil-window-split evil-window-vsplit) (consult-buffer)) Messages buffer Stick to buffer tail, useful with *Messages* buffer. Derived from this answer.\n(defvar +messages--auto-tail-enabled nil) (defun +messages--auto-tail-a (\u0026amp;rest arg) \u0026#34;Make *Messages* buffer auto-scroll to the end after each message.\u0026#34; (let* ((buf-name (buffer-name (messages-buffer))) ;; Create *Messages* buffer if it does not exist (buf (get-buffer-create buf-name))) ;; Activate this advice only if the point is _not_ in the *Messages* buffer ;; to begin with. This condition is required; otherwise you will not be ;; able to use `isearch\u0026#39; and other stuff within the *Messages* buffer as ;; the point will keep moving to the end of buffer :P (when (not (string= buf-name (buffer-name))) ;; Go to the end of buffer in all *Messages* buffer windows that are ;; *live* (`get-buffer-window-list\u0026#39; returns a list of only live windows). (dolist (win (get-buffer-window-list buf-name nil :all-frames)) (with-selected-window win (goto-char (point-max)))) ;; Go to the end of the *Messages* buffer even if it is not in one of ;; the live windows. (with-current-buffer buf (goto-char (point-max)))))) (defun +messages-auto-tail-toggle () \u0026#34;Auto tail the \u0026#39;*Messages*\u0026#39; buffer.\u0026#34; (interactive) (if +messages--auto-tail-enabled (progn (advice-remove \u0026#39;message \u0026#39;+messages--auto-tail-a) (setq +messages--auto-tail-enabled nil) (message \u0026#34;+messages-auto-tail: Disabled.\u0026#34;)) (advice-add \u0026#39;message :after \u0026#39;+messages--auto-tail-a) (setq +messages--auto-tail-enabled t) (message \u0026#34;+messages-auto-tail: Enabled.\u0026#34;))) Undo and auto-save Auto-save (package! super-save :disable t :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34;) (use-package! super-save :config (setq auto-save-default t ;; nil to switch off the built-in `auto-save-mode\u0026#39;, maybe leave it t to have a backup! super-save-exclude \u0026#39;(\u0026#34;.gpg\u0026#34;) super-save-remote-files nil super-save-auto-save-when-idle t) (super-save-mode +1)) (setq auto-save-default t) ;; enable built-in `auto-save-mode\u0026#39; Undo Tweak undo-fu and other stuff from Doom\u0026rsquo;s :emacs undo.\n;; Increase undo history limits even more (after! undo-fu ;; Emacs undo defaults (setq undo-limit 10000000 ;; 1MB (default is 160kB, Doom\u0026#39;s default is 400kB) undo-strong-limit 100000000 ;; 100MB (default is 240kB, Doom\u0026#39;s default is 3MB) undo-outer-limit 1000000000) ;; 1GB (default is 24MB, Doom\u0026#39;s default is 48MB) ;; Undo-fu customization options (setq undo-fu-allow-undo-in-region t ;; Undoing with a selection will use undo within that region. undo-fu-ignore-keyboard-quit t)) ;; Use the `undo-fu-disable-checkpoint\u0026#39; command instead of Ctrl-G `keyboard-quit\u0026#39; for non-linear behavior. ;; Evil undo (after! evil (setq evil-want-fine-undo t)) ;; By default while in insert all changes are one big blob Visual undo (vundo) (package! vundo :recipe (:host github :repo \u0026#34;casouri/vundo\u0026#34;) :pin \u0026#34;16a09774ddfbd120d625cdd35fcf480e76e278bb\u0026#34;) (use-package! vundo :defer t :init (defconst +vundo-unicode-symbols \u0026#39;((selected-node . ?●) (node . ?○) (vertical-stem . ?│) (branch . ?├) (last-branch . ?╰) (horizontal-stem . ?─))) (map! :leader (:prefix (\u0026#34;o\u0026#34;) :desc \u0026#34;vundo\u0026#34; \u0026#34;v\u0026#34; #\u0026#39;vundo)) :config (setq vundo-glyph-alist +vundo-unicode-symbols vundo-compact-display t vundo-window-max-height 6)) Editing ;; Stretch cursor to the glyph width (setq-default x-stretch-cursor t) ;; Enable relative line numbers (setq display-line-numbers-type \u0026#39;relative) ;; Iterate through CamelCase words (global-subword-mode 1) Emacs sources (setq source-directory (expand-file-name \u0026#34;~/Softwares/src/emacs/\u0026#34;)) Frame Focus created frame The problem is, every time I launch an Emacs frame (from KDE), Emacs starts with no focus, I need each time to Alt-TAB to get Emacs under focus, and then start typing. I tried changing this behavior from Emacs by hooking raise-frame at startup, but it didn\u0026rsquo;t work.\nGot from this comment, not working on my Emacs version.\n;; NOTE: Not tangled, not working (add-hook \u0026#39;server-switch-hook #\u0026#39;raise-frame) After some investigations, I found that this issue is probably KDE specific, the issue goes away by setting: Window Management \u0026gt; Window Behavior \u0026gt; Focus \u0026gt; Focus stealing prevention to None in the KDE Settings.\nBrowsers (setq browse-url-chrome-program \u0026#34;brave\u0026#34;) Emacs daemon Initialization (defun +daemon-startup () ;; mu4e (when (require \u0026#39;mu4e nil t) ;; Automatically start `mu4e\u0026#39; in background. (when (load! \u0026#34;mu-lock.el\u0026#34; (expand-file-name \u0026#34;email/mu4e/autoload\u0026#34; doom-modules-dir) t) (setq +mu4e-lock-greedy t +mu4e-lock-relaxed t) (when (+mu4e-lock-available t) ;; Check each 5m, if `mu4e\u0026#39; if closed, start it in background. (run-at-time nil ;; Launch now (* 60 5) ;; Check each 5 minutes (lambda () (when (and (not (mu4e-running-p)) (+mu4e-lock-available)) (mu4e--start) (message \u0026#34;Started `mu4e\u0026#39; in background.\u0026#34;))))))) ;; RSS (when (require \u0026#39;elfeed nil t) (run-at-time nil (* 2 60 60) #\u0026#39;elfeed-update))) ;; Check every 2h (when (daemonp) ;; At daemon startup (add-hook \u0026#39;emacs-startup-hook #\u0026#39;+daemon-startup) ;; After creating a new frame (via emacsclient) ;; Reload Doom\u0026#39;s theme (add-hook \u0026#39;server-after-make-frame-hook #\u0026#39;doom/reload-theme)) Tweaks Save recent files When editing files with Emacs client, the files does not get stored by recentf, making Emacs forgets about recently opened files. A quick fix is to hook the recentf-save-list command to the delete-frame-functions and delete-terminal-functions which gets executed each time a frame/terminal is deleted.\n(when (daemonp) (add-hook! \u0026#39;(delete-frame-functions delete-terminal-functions) (let ((inhibit-message t)) (recentf-save-list) (savehist-save)))) Package configuration User interface Font Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones: doom-font, doom-unicode-font and doom-variable-pitch-font. The doom-big-font is used for doom-big-font-mode; use this for presentations or streaming.\nThey all accept either a font-spec, font string (\u0026quot;Input Mono-12\u0026quot;), or xlfd font string. You generally only need these two:\nSome good fonts:\nIosevka Fixed (THE FONT) Nerd fonts FantasqueSansMono Nerd Font Mono mononoki Nerd Font Mono CaskaydiaCove Nerd Font Mono Cascadia Code Fantasque Sans Mono JuliaMono (good Unicode support) IBM Plex Mono JetBrains Mono Roboto Mono Source Code Pro Input Mono Narrow Fira Code (setq doom-font (font-spec :family \u0026#34;Iosevka Fixed Curly Slab\u0026#34; :size 20) doom-big-font (font-spec :family \u0026#34;Iosevka Fixed Curly Slab\u0026#34; :size 30 :weight \u0026#39;light) doom-variable-pitch-font (font-spec :family \u0026#34;Lato\u0026#34;) doom-unicode-font (font-spec :family \u0026#34;JuliaMono\u0026#34;) doom-serif-font (font-spec :family \u0026#34;Iosevka Fixed Curly Slab\u0026#34; :weight \u0026#39;light)) Theme Doom Set Doom\u0026rsquo;s theme, some good choices:\ndoom-one (Atom like) doom-vibrant (More vibrant version of doom-one) doom-one-light (Atom like) doom-dark+ (VS Code like) doom-xcode (XCode like) doom-material doom-material-dark doom-palenight doom-ayu-mirage doom-monokai-pro doom-tomorrow-day doom-tomorrow-night (setq doom-theme \u0026#39;doom-one-light) (remove-hook \u0026#39;window-setup-hook #\u0026#39;doom-init-theme-h) (add-hook \u0026#39;after-init-hook #\u0026#39;doom-init-theme-h \u0026#39;append) Modus themes (package! modus-themes :pin \u0026#34;ee35a9af344d2b2920589ec4d66e9cb513bdfb80\u0026#34;) (use-package! modus-themes :init (setq modus-themes-hl-line \u0026#39;(accented intense) modus-themes-subtle-line-numbers t modus-themes-region \u0026#39;(bg-only no-extend) ;; accented modus-themes-variable-pitch-ui nil modus-themes-fringes \u0026#39;subtle modus-themes-diffs nil modus-themes-italic-constructs t modus-themes-bold-constructs t modus-themes-intense-mouseovers t modus-themes-paren-match \u0026#39;(bold intense) modus-themes-syntax \u0026#39;(green-strings) modus-themes-links \u0026#39;(neutral-underline background) modus-themes-mode-line \u0026#39;(borderless padded) modus-themes-tabs-accented nil ;; default modus-themes-completions \u0026#39;((matches . (extrabold intense accented)) (selection . (semibold accented intense)) (popup . (accented))) modus-themes-headings \u0026#39;((1 . (rainbow 1.4)) (2 . (rainbow 1.3)) (3 . (rainbow 1.2)) (4 . (rainbow bold 1.1)) (t . (rainbow bold))) modus-themes-org-blocks \u0026#39;gray-background modus-themes-org-agenda \u0026#39;((header-block . (semibold 1.4)) (header-date . (workaholic bold-today 1.2)) (event . (accented italic varied)) (scheduled . rainbow) (habit . traffic-light)) modus-themes-markup \u0026#39;(intense background) modus-themes-mail-citations \u0026#39;intense modus-themes-lang-checkers \u0026#39;(background)) (defun +modus-themes-tweak-packages () (modus-themes-with-colors (set-face-attribute \u0026#39;cursor nil :background (modus-themes-color \u0026#39;blue)) (set-face-attribute \u0026#39;font-lock-type-face nil :foreground (modus-themes-color \u0026#39;magenta-alt)) (custom-set-faces ;; Tweak `evil-mc-mode\u0026#39; `(evil-mc-cursor-default-face ((,class :background ,magenta-intense-bg))) ;; Tweak `git-gutter-mode\u0026#39; `(git-gutter-fr:added ((,class :foreground ,green-fringe-bg))) `(git-gutter-fr:deleted ((,class :foreground ,red-fringe-bg))) `(git-gutter-fr:modified ((,class :foreground ,yellow-fringe-bg))) ;; Tweak `doom-modeline\u0026#39; `(doom-modeline-evil-normal-state ((,class :foreground ,green-alt-other))) `(doom-modeline-evil-insert-state ((,class :foreground ,red-alt-other))) `(doom-modeline-evil-visual-state ((,class :foreground ,magenta-alt))) `(doom-modeline-evil-operator-state ((,class :foreground ,blue-alt))) `(doom-modeline-evil-motion-state ((,class :foreground ,blue-alt-other))) `(doom-modeline-evil-replace-state ((,class :foreground ,yellow-alt))) ;; Tweak `diff-hl-mode\u0026#39; `(diff-hl-insert ((,class :foreground ,green-fringe-bg))) `(diff-hl-delete ((,class :foreground ,red-fringe-bg))) `(diff-hl-change ((,class :foreground ,yellow-fringe-bg))) ;; Tweak `solaire-mode\u0026#39; `(solaire-default-face ((,class :inherit default :background ,bg-alt :foreground ,fg-dim))) `(solaire-line-number-face ((,class :inherit solaire-default-face :foreground ,fg-unfocused))) `(solaire-hl-line-face ((,class :background ,bg-active))) `(solaire-org-hide-face ((,class :background ,bg-alt :foreground ,bg-alt))) ;; Tweak `display-fill-column-indicator-mode\u0026#39; `(fill-column-indicator ((,class :height 0.3 :background ,bg-inactive :foreground ,bg-inactive))) ;; Tweak `mmm-mode\u0026#39; `(mmm-cleanup-submode-face ((,class :background ,yellow-refine-bg))) `(mmm-code-submode-face ((,class :background ,bg-active))) `(mmm-comment-submode-face ((,class :background ,blue-refine-bg))) `(mmm-declaration-submode-face ((,class :background ,cyan-refine-bg))) `(mmm-default-submode-face ((,class :background ,bg-alt))) `(mmm-init-submode-face ((,class :background ,magenta-refine-bg))) `(mmm-output-submode-face ((,class :background ,red-refine-bg))) `(mmm-special-submode-face ((,class :background ,green-refine-bg)))))) (add-hook \u0026#39;modus-themes-after-load-theme-hook #\u0026#39;+modus-themes-tweak-packages) :config (modus-themes-load-operandi) (map! :leader :prefix \u0026#34;t\u0026#34; ;; toggle :desc \u0026#34;Toggle Modus theme\u0026#34; \u0026#34;m\u0026#34; #\u0026#39;modus-themes-toggle)) Ef (εὖ) themes (package! ef-themes :pin \u0026#34;3f9628750f8ff544169d4924e8c51f49b31f39e1\u0026#34;) (use-package! ef-themes :unless t ;; Disabled ;; If you like two specific themes and want to switch between them, you ;; can specify them in `ef-themes-to-toggle\u0026#39; and then invoke the command ;; `ef-themes-toggle\u0026#39;. All the themes are included in the variable ;; `ef-themes-collection\u0026#39;. :config (setq ef-themes-to-toggle \u0026#39;(ef-light ef-day)) ;; Make customisations that affect Emacs faces BEFORE loading a theme ;; (any change needs a theme re-load to take effect). (setq ef-themes-headings ; read the manual\u0026#39;s entry or the doc string \u0026#39;((0 . (variable-pitch light 1.9)) (1 . (variable-pitch light 1.8)) (2 . (variable-pitch regular 1.7)) (3 . (variable-pitch regular 1.6)) (4 . (variable-pitch regular 1.5)) (5 . (variable-pitch 1.4)) ; absence of weight means `bold\u0026#39; (6 . (variable-pitch 1.3)) (7 . (variable-pitch 1.2)) (t . (variable-pitch 1.1)))) ;; They are nil by default... (setq ef-themes-mixed-fonts t ef-themes-variable-pitch-ui t) ;; ;; Disable all other themes to avoid awkward blending: ;; (mapc #\u0026#39;disable-theme custom-enabled-themes) ;; ;; Load the theme of choice: ;; (load-theme \u0026#39;ef-light :no-confirm) ;; OR use this to load the theme which also calls `ef-themes-post-load-hook\u0026#39;: (ef-themes-select \u0026#39;ef-light)) ;; The themes we provide: ;; ;; Light: `ef-day\u0026#39;, `ef-duo-light\u0026#39;, `ef-light\u0026#39;, `ef-spring\u0026#39;, `ef-summer\u0026#39;, `ef-trio-light\u0026#39;. ;; Dark: `ef-autumn\u0026#39;, `ef-duo-dark\u0026#39;, `ef-dark\u0026#39;, `ef-night\u0026#39;, `ef-trio-dark\u0026#39;, `ef-winter\u0026#39;. ;; ;; Also those which are optimized for deuteranopia (red-green color ;; deficiency): `ef-deuteranopia-dark\u0026#39;, `ef-deuteranopia-light\u0026#39;. ;; We also provide these commands, but do not assign them to any key: ;; ;; - `ef-themes-toggle\u0026#39; ;; - `ef-themes-select\u0026#39; ;; - `ef-themes-load-random\u0026#39; ;; - `ef-themes-preview-colors\u0026#39; ;; - `ef-themes-preview-colors-current\u0026#39; Lambda themes (package! lambda-themes :disable t :recipe (:host github :repo \u0026#34;Lambda-Emacs/lambda-themes\u0026#34;) :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34;) (package! lambda-line :disable t :recipe (:host github :repo \u0026#34;Lambda-Emacs/lambda-line\u0026#34;)) (use-package! lambda-themes :init (setq lambda-themes-set-italic-comments t lambda-themes-set-italic-keywords t lambda-themes-set-variable-pitch t lambda-themes-set-evil-cursors t) :config ;; load preferred theme (load-theme \u0026#39;lambda-light-faded t)) (use-package! lambda-line :custom (lambda-line-position \u0026#39;top) ;; Set position of status-line (lambda-line-abbrev t) ;; abbreviate major modes (lambda-line-hspace \u0026#34; \u0026#34;) ;; add some cushion (lambda-line-prefix t) ;; use a prefix symbol (lambda-line-prefix-padding nil) ;; no extra space for prefix (lambda-line-status-invert nil) ;; no invert colors (lambda-line-gui-ro-symbol \u0026#34; ⨂\u0026#34;) ;; symbols (lambda-line-gui-mod-symbol \u0026#34; ⬤\u0026#34;) (lambda-line-gui-rw-symbol \u0026#34; ◯\u0026#34;) (lambda-line-space-top +.50) ;; padding on top and bottom of line (lambda-line-space-bottom -.50) (lambda-line-symbol-position 0.1) ;; adjust the vertical placement of symbol :config ;; activate lambda-line (lambda-line-mode) ;; set divider line in footer (when (eq lambda-line-position \u0026#39;top) (setq-default mode-line-format (list \u0026#34;%_\u0026#34;)) (setq mode-line-format (list \u0026#34;%_\u0026#34;)))) Mode line Clock Display time and set the format to 24h.\n(after! doom-modeline (setq display-time-string-forms \u0026#39;((propertize (concat \u0026#34; 🕘 \u0026#34; 24-hours \u0026#34;:\u0026#34; minutes)))) (display-time-mode 1) ; Enable time in the mode-line ;; Add padding to the right (doom-modeline-def-modeline \u0026#39;main \u0026#39;(bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot selection-info) \u0026#39;(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker \u0026#34; \u0026#34;))) Battery Show battery level unless battery is not present or battery information is unknown.\n(after! doom-modeline (let ((battery-str (battery))) (unless (or (equal \u0026#34;Battery status not available\u0026#34; battery-str) (string-match-p (regexp-quote \u0026#34;unknown\u0026#34;) battery-str) (string-match-p (regexp-quote \u0026#34;N/A\u0026#34;) battery-str)) (display-battery-mode 1)))) Mode line customization (after! doom-modeline (setq doom-modeline-bar-width 4 doom-modeline-mu4e t doom-modeline-major-mode-icon t doom-modeline-major-mode-color-icon t doom-modeline-buffer-file-name-style \u0026#39;truncate-upto-project)) Set transparency ;; NOTE: Not tangled (set-frame-parameter (selected-frame) \u0026#39;alpha \u0026#39;(85 100)) (add-to-list \u0026#39;default-frame-alist \u0026#39;(alpha 97 100)) Dashboard Custom splash image Change the logo to an image, a set of beautiful images can be found in assets.\nFile emacs-e.svg gnu-emacs-white.svg gnu-emacs-flat.svg blackhole-lines.svg doom-emacs-white.svg doom-emacs-dark.svg doom-emacs-gray.svg (setq fancy-splash-image (expand-file-name \u0026#34;assets/doom-emacs-gray.svg\u0026#34; doom-user-dir)) Dashboard (remove-hook \u0026#39;+doom-dashboard-functions #\u0026#39;doom-dashboard-widget-shortmenu) (remove-hook \u0026#39;+doom-dashboard-functions #\u0026#39;doom-dashboard-widget-footer) (add-hook! \u0026#39;+doom-dashboard-mode-hook (hl-line-mode -1)) (setq-hook! \u0026#39;+doom-dashboard-mode-hook evil-normal-state-cursor (list nil)) Which key Make which-key popup faster.\n(setq which-key-idle-delay 0.5 ;; Default is 1.0 which-key-idle-secondary-delay 0.05) ;; Default is nil I\u0026rsquo;ve stolen this chunk (like many others) from tecosaur\u0026rsquo;s config, it helps to replace the evil- prefix with a unicode symbol, making which-key\u0026rsquo;s candidate list less verbose.\n(setq which-key-allow-multiple-replacements t) (after! which-key (pushnew! which-key-replacement-alist \u0026#39;((\u0026#34;\u0026#34; . \u0026#34;\\\\`+?evil[-:]?\\\\(?:a-\\\\)?\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;🅔·\\\\1\u0026#34;)) \u0026#39;((\u0026#34;\\\\`g s\u0026#34; . \u0026#34;\\\\`evilem--?motion-\\\\(.*\\\\)\u0026#34;) . (nil . \u0026#34;Ⓔ·\\\\1\u0026#34;)))) Window title I\u0026rsquo;d like to have just the buffer name, then if applicable the project folder.\n(setq frame-title-format \u0026#39;(\u0026#34;\u0026#34; (:eval (if (s-contains-p org-roam-directory (or buffer-file-name \u0026#34;\u0026#34;)) (replace-regexp-in-string \u0026#34;.*/[0-9]*-?\u0026#34; \u0026#34;☰ \u0026#34; (subst-char-in-string ?_ ?\\s buffer-file-name)) \u0026#34;%b\u0026#34;)) (:eval (when-let* ((project-name (projectile-project-name)) (project-name (if (string= \u0026#34;-\u0026#34; project-name) (ignore-errors (file-name-base (string-trim-right (vc-root-dir)))) project-name))) (format (if (buffer-modified-p) \u0026#34; ○ %s\u0026#34; \u0026#34; ● %s\u0026#34;) project-name))))) SVG tag and svg-lib (package! svg-tag-mode :pin \u0026#34;efd22edf650fb25e665269ba9fed7ccad0771a2f\u0026#34;) (use-package! svg-tag-mode :commands svg-tag-mode :config (setq svg-tag-tags \u0026#39;((\u0026#34;^\\\\*.* .* \\\\(:[A-Za-z0-9]+\\\\)\u0026#34; . ((lambda (tag) (svg-tag-make tag :beg 1 :font-family \u0026#34;Roboto Mono\u0026#34; :font-size 10 :height 0.8 :padding 0 :margin 0)))) (\u0026#34;\\\\(:[A-Za-z0-9]+:\\\\)$\u0026#34; . ((lambda (tag) (svg-tag-make tag :beg 1 :end -1 :font-family \u0026#34;Roboto Mono\u0026#34; :font-size 10 :height 0.8 :padding 0 :margin 0))))))) (after! svg-lib ;; Set `svg-lib\u0026#39; cache directory (setq svg-lib-icons-dir (expand-file-name \u0026#34;svg-lib\u0026#34; doom-data-dir))) Focus Dim the font color of text in surrounding paragraphs, focus only on the current line.\n(package! focus :pin \u0026#34;9dd85fc474bbc1ebf22c287752c960394fcd465a\u0026#34;) (use-package! focus :commands focus-mode) Scrolling (package! good-scroll :disable EMACS29+ :pin \u0026#34;a7ffd5c0e5935cebd545a0570f64949077f71ee3\u0026#34;) (use-package! good-scroll :unless EMACS29+ :config (good-scroll-mode 1)) (when EMACS29+ (pixel-scroll-precision-mode 1)) (setq hscroll-step 1 hscroll-margin 0 scroll-step 1 scroll-margin 0 scroll-conservatively 101 scroll-up-aggressively 0.01 scroll-down-aggressively 0.01 scroll-preserve-screen-position \u0026#39;always auto-window-vscroll nil fast-but-imprecise-scrolling nil) All the icons Set some custom icons for some file extensions, basically for .m files.\n(after! all-the-icons (setcdr (assoc \u0026#34;m\u0026#34; all-the-icons-extension-icon-alist) (cdr (assoc \u0026#34;matlab\u0026#34; all-the-icons-extension-icon-alist)))) Tabs (after! centaur-tabs ;; For some reason, setting `centaur-tabs-set-bar\u0026#39; this to `right\u0026#39; ;; instead of Doom\u0026#39;s default `left\u0026#39;, fixes this issue with Emacs daemon: ;; https://github.com/doomemacs/doomemacs/issues/6647#issuecomment-1229365473 (setq centaur-tabs-set-bar \u0026#39;right centaur-tabs-gray-out-icons \u0026#39;buffer centaur-tabs-set-modified-marker t centaur-tabs-close-button \u0026#34;⨂\u0026#34; centaur-tabs-modified-marker \u0026#34;⨀\u0026#34;)) Zen (writeroom) mode (after! writeroom-mode ;; Show mode line (setq writeroom-mode-line t) ;; Disable line numbers (add-hook! \u0026#39;writeroom-mode-enable-hook (when (bound-and-true-p display-line-numbers-mode) (setq-local +line-num--was-activate-p display-line-numbers-type) (display-line-numbers-mode -1))) (add-hook! \u0026#39;writeroom-mode-disable-hook (when (bound-and-true-p +line-num--was-activate-p) (display-line-numbers-mode +line-num--was-activate-p))) (after! org ;; Increase latex previews scale in Zen mode (add-hook! \u0026#39;writeroom-mode-enable-hook (+org-format-latex-set-scale 2.0)) (add-hook! \u0026#39;writeroom-mode-disable-hook (+org-format-latex-set-scale 1.4))) (after! blamer ;; Disable blamer in zen (writeroom) mode (add-hook! \u0026#39;writeroom-mode-enable-hook (when (bound-and-true-p blamer-mode) (setq +blamer-mode--was-active-p t) (blamer-mode -1))) (add-hook! \u0026#39;writeroom-mode-disable-hook (when (bound-and-true-p +blamer-mode--was-active-p) (blamer-mode 1))))) Highlight indent guides (after! highlight-indent-guides (setq highlight-indent-guides-character ?│ highlight-indent-guides-responsive \u0026#39;top)) Editing File templates For some file types, we can overwrite the defaults in the snippets\u0026rsquo; directory.\n(set-file-template! \u0026#34;\\\\.tex$\u0026#34; :trigger \u0026#34;__\u0026#34; :mode \u0026#39;latex-mode) (set-file-template! \u0026#34;\\\\.org$\u0026#34; :trigger \u0026#34;__\u0026#34; :mode \u0026#39;org-mode) (set-file-template! \u0026#34;/LICEN[CS]E$\u0026#34; :trigger \u0026#39;+file-templates/insert-license) Scratch buffer Tell the scratch buffer to start in emacs-lisp-mode.\n(setq doom-scratch-initial-major-mode \u0026#39;emacs-lisp-mode) Mouse buttons Map extra mouse buttons to jump between buffers\n(map! :n [mouse-8] #\u0026#39;better-jumper-jump-backward :n [mouse-9] #\u0026#39;better-jumper-jump-forward) ;; Enable horizontal scrolling with the second mouse wheel or the touchpad (setq mouse-wheel-tilt-scroll t mouse-wheel-progressive-speed nil) Very large files The very large files mode loads large files in chunks, allowing one to open ridiculously large files.\n(package! vlf :pin \u0026#34;cc02f2533782d6b9b628cec7e2dcf25b2d05a27c\u0026#34;) To make VLF available without delaying startup, we\u0026rsquo;ll just load it in quiet moments.\n(use-package! vlf-setup :defer-incrementally vlf-tune vlf-base vlf-write vlf-search vlf-occur vlf-follow vlf-ediff vlf) Evil (after! evil ;; This fixes https://github.com/doomemacs/doomemacs/issues/6478 ;; Ref: https://github.com/emacs-evil/evil/issues/1630 (evil-select-search-module \u0026#39;evil-search-module \u0026#39;isearch) (setq evil-kill-on-visual-paste nil)) ; Don\u0026#39;t put overwritten text in the kill ring (package! evil-escape :disable t) Aggressive indent (package! aggressive-indent :pin \u0026#34;70b3f0add29faff41e480e82930a231d88ee9ca7\u0026#34;) (use-package! aggressive-indent :commands (aggressive-indent-mode)) YASnippet Nested snippets are good, enable that.\n(setq yas-triggers-in-field t) Completion \u0026amp; IDE Company I do not find company useful in Org files.\n(setq company-global-modes \u0026#39;(not erc-mode circe-mode message-mode help-mode gud-mode vterm-mode org-mode)) Tweak company-box (after! company-box (defun +company-box--reload-icons-h () (setq company-box-icons-all-the-icons (let ((all-the-icons-scale-factor 0.8)) `((Unknown . ,(all-the-icons-faicon \u0026#34;code\u0026#34; :face \u0026#39;all-the-icons-purple)) (Text . ,(all-the-icons-material \u0026#34;text_fields\u0026#34; :face \u0026#39;all-the-icons-green)) (Method . ,(all-the-icons-faicon \u0026#34;cube\u0026#34; :face \u0026#39;all-the-icons-red)) (Function . ,(all-the-icons-faicon \u0026#34;cube\u0026#34; :face \u0026#39;all-the-icons-blue)) (Constructor . ,(all-the-icons-faicon \u0026#34;cube\u0026#34; :face \u0026#39;all-the-icons-blue-alt)) (Field . ,(all-the-icons-faicon \u0026#34;tag\u0026#34; :face \u0026#39;all-the-icons-red)) (Variable . ,(all-the-icons-material \u0026#34;adjust\u0026#34; :face \u0026#39;all-the-icons-blue)) (Class . ,(all-the-icons-material \u0026#34;class\u0026#34; :face \u0026#39;all-the-icons-red)) (Interface . ,(all-the-icons-material \u0026#34;tune\u0026#34; :face \u0026#39;all-the-icons-red)) (Module . ,(all-the-icons-faicon \u0026#34;cubes\u0026#34; :face \u0026#39;all-the-icons-red)) (Property . ,(all-the-icons-faicon \u0026#34;wrench\u0026#34; :face \u0026#39;all-the-icons-red)) (Unit . ,(all-the-icons-material \u0026#34;straighten\u0026#34; :face \u0026#39;all-the-icons-red)) (Value . ,(all-the-icons-material \u0026#34;filter_1\u0026#34; :face \u0026#39;all-the-icons-red)) (Enum . ,(all-the-icons-material \u0026#34;plus_one\u0026#34; :face \u0026#39;all-the-icons-red)) (Keyword . ,(all-the-icons-material \u0026#34;filter_center_focus\u0026#34; :face \u0026#39;all-the-icons-red-alt)) (Snippet . ,(all-the-icons-faicon \u0026#34;expand\u0026#34; :face \u0026#39;all-the-icons-red)) (Color . ,(all-the-icons-material \u0026#34;colorize\u0026#34; :face \u0026#39;all-the-icons-red)) (File . ,(all-the-icons-material \u0026#34;insert_drive_file\u0026#34; :face \u0026#39;all-the-icons-red)) (Reference . ,(all-the-icons-material \u0026#34;collections_bookmark\u0026#34; :face \u0026#39;all-the-icons-red)) (Folder . ,(all-the-icons-material \u0026#34;folder\u0026#34; :face \u0026#39;all-the-icons-red-alt)) (EnumMember . ,(all-the-icons-material \u0026#34;people\u0026#34; :face \u0026#39;all-the-icons-red)) (Constant . ,(all-the-icons-material \u0026#34;pause_circle_filled\u0026#34; :face \u0026#39;all-the-icons-red)) (Struct . ,(all-the-icons-material \u0026#34;list\u0026#34; :face \u0026#39;all-the-icons-red)) (Event . ,(all-the-icons-material \u0026#34;event\u0026#34; :face \u0026#39;all-the-icons-red)) (Operator . ,(all-the-icons-material \u0026#34;control_point\u0026#34; :face \u0026#39;all-the-icons-red)) (TypeParameter . ,(all-the-icons-material \u0026#34;class\u0026#34; :face \u0026#39;all-the-icons-red)) (Template . ,(all-the-icons-material \u0026#34;settings_ethernet\u0026#34; :face \u0026#39;all-the-icons-green)) (ElispFunction . ,(all-the-icons-faicon \u0026#34;cube\u0026#34; :face \u0026#39;all-the-icons-blue)) (ElispVariable . ,(all-the-icons-material \u0026#34;adjust\u0026#34; :face \u0026#39;all-the-icons-blue)) (ElispFeature . ,(all-the-icons-material \u0026#34;stars\u0026#34; :face \u0026#39;all-the-icons-orange)) (ElispFace . ,(all-the-icons-material \u0026#34;format_paint\u0026#34; :face \u0026#39;all-the-icons-pink)))))) (when (daemonp) ;; Replace Doom defined icons with mine (when (memq #\u0026#39;+company-box--load-all-the-icons server-after-make-frame-hook) (remove-hook \u0026#39;server-after-make-frame-hook #\u0026#39;+company-box--load-all-the-icons)) (add-hook \u0026#39;server-after-make-frame-hook #\u0026#39;+company-box--reload-icons-h)) ;; Reload icons even if not in Daemon mode (+company-box--reload-icons-h)) Treemacs (after! treemacs (require \u0026#39;dired) ;; My custom stuff (from tecosaur\u0026#39;s config) (setq +treemacs-file-ignore-extensions \u0026#39;(;; LaTeX \u0026#34;aux\u0026#34; \u0026#34;ptc\u0026#34; \u0026#34;fdb_latexmk\u0026#34; \u0026#34;fls\u0026#34; \u0026#34;synctex.gz\u0026#34; \u0026#34;toc\u0026#34; ;; LaTeX - bibliography \u0026#34;bbl\u0026#34; ;; LaTeX - glossary \u0026#34;glg\u0026#34; \u0026#34;glo\u0026#34; \u0026#34;gls\u0026#34; \u0026#34;glsdefs\u0026#34; \u0026#34;ist\u0026#34; \u0026#34;acn\u0026#34; \u0026#34;acr\u0026#34; \u0026#34;alg\u0026#34; ;; LaTeX - pgfplots \u0026#34;mw\u0026#34; ;; LaTeX - pdfx \u0026#34;pdfa.xmpi\u0026#34; ;; Python \u0026#34;pyc\u0026#34;)) (setq +treemacs-file-ignore-globs \u0026#39;(;; LaTeX \u0026#34;*/_minted-*\u0026#34; ;; AucTeX \u0026#34;*/.auctex-auto\u0026#34; \u0026#34;*/_region_.log\u0026#34; \u0026#34;*/_region_.tex\u0026#34; ;; Python \u0026#34;*/__pycache__\u0026#34;)) ;; Reload treemacs theme (setq doom-themes-treemacs-enable-variable-pitch nil doom-themes-treemacs-theme \u0026#34;doom-colors\u0026#34;) (doom-themes-treemacs-config) (setq treemacs-show-hidden-files nil treemacs-hide-dot-git-directory t treemacs-width 30) (defvar +treemacs-file-ignore-extensions \u0026#39;() \u0026#34;File extension which `treemacs-ignore-filter\u0026#39; will ensure are ignored\u0026#34;) (defvar +treemacs-file-ignore-globs \u0026#39;() \u0026#34;Globs which will are transformed to `+treemacs-file-ignore-regexps\u0026#39; which `+treemacs-ignore-filter\u0026#39; will ensure are ignored\u0026#34;) (defvar +treemacs-file-ignore-regexps \u0026#39;() \u0026#34;RegExps to be tested to ignore files, generated from `+treeemacs-file-ignore-globs\u0026#39;\u0026#34;) (defun +treemacs-file-ignore-generate-regexps () \u0026#34;Generate `+treemacs-file-ignore-regexps\u0026#39; from `+treemacs-file-ignore-globs\u0026#39;\u0026#34; (setq +treemacs-file-ignore-regexps (mapcar \u0026#39;dired-glob-regexp +treemacs-file-ignore-globs))) (unless (equal +treemacs-file-ignore-globs \u0026#39;()) (+treemacs-file-ignore-generate-regexps)) (defun +treemacs-ignore-filter (file full-path) \u0026#34;Ignore files specified by `+treemacs-file-ignore-extensions\u0026#39;, and `+treemacs-file-ignore-regexps\u0026#39;\u0026#34; (or (member (file-name-extension file) +treemacs-file-ignore-extensions) (let ((ignore-file nil)) (dolist (regexp +treemacs-file-ignore-regexps ignore-file) (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil))))))) (add-to-list \u0026#39;treemacs-ignored-file-predicates #\u0026#39;+treemacs-ignore-filter)) Projectile Doom Emacs defined a function (doom-project-ignored-p path) and uses it with projectile-ignored-project-function. So we will create a wrapper function which calls Doom\u0026rsquo;s one, with an extra check.\n;; Run `M-x projectile-discover-projects-in-search-path\u0026#39; to reload paths from this variable (setq projectile-project-search-path \u0026#39;(\u0026#34;~/PhD/papers\u0026#34; \u0026#34;~/PhD/workspace\u0026#34; \u0026#34;~/PhD/workspace-no\u0026#34; \u0026#34;~/PhD/workspace-no/ez-wheel/swd-starter-kit-repo\u0026#34; (\u0026#34;~/Projects/foss\u0026#34; . 2))) ;; (\u0026#34;dir\u0026#34; . depth) (setq projectile-ignored-projects \u0026#39;(\u0026#34;/tmp\u0026#34; \u0026#34;~/\u0026#34; \u0026#34;~/.cache\u0026#34; \u0026#34;~/.doom.d\u0026#34; \u0026#34;~/.emacs.d/.local/straight/repos/\u0026#34;)) (setq +projectile-ignored-roots \u0026#39;(\u0026#34;~/.cache\u0026#34; ;; No need for this one, as `doom-project-ignored-p\u0026#39; checks for files in `doom-local-dir\u0026#39; \u0026#34;~/.emacs.d/.local/straight/\u0026#34;)) (defun +projectile-ignored-project-function (filepath) \u0026#34;Return t if FILEPATH is within any of `+projectile-ignored-roots\u0026#39;\u0026#34; (require \u0026#39;cl-lib) (or (doom-project-ignored-p filepath) ;; Used by default by doom with `projectile-ignored-project-function\u0026#39; (cl-some (lambda (root) (file-in-directory-p (expand-file-name filepath) (expand-file-name root))) +projectile-ignored-roots))) (setq projectile-ignored-project-function #\u0026#39;+projectile-ignored-project-function) Tramp Let\u0026rsquo;s try to make tramp handle prompts better\n(after! tramp (setenv \u0026#34;SHELL\u0026#34; \u0026#34;/bin/bash\u0026#34;) (setq tramp-shell-prompt-pattern \u0026#34;\\\\(?:^\\\\| \\\\)[^]#$%\u0026gt;\\n]*#?[]#$%\u0026gt;] *\\\\(\u001b\\\\[[0-9;]*[a-zA-Z] *\\\\)*\u0026#34;)) ;; default +  Eros-eval This makes the result of evals slightly prettier.\n(setq eros-eval-result-prefix \u0026#34;⟹ \u0026#34;) dir-locals.el Reload dir-locals.el variables after modification. Taken from this answer.\n(defun +dir-locals-reload-for-current-buffer () \u0026#34;reload dir locals for the current buffer\u0026#34; (interactive) (let ((enable-local-variables :all)) (hack-dir-local-variables-non-file-buffer))) (defun +dir-locals-reload-for-all-buffers-in-this-directory () \u0026#34;For every buffer with the same `default-directory` as the current buffer\u0026#39;s, reload dir-locals.\u0026#34; (interactive) (let ((dir default-directory)) (dolist (buffer (buffer-list)) (with-current-buffer buffer (when (equal default-directory dir) (+dir-locals-reload-for-current-buffer)))))) (defun +dir-locals-enable-autoreload () (when (and (buffer-file-name) (equal dir-locals-file (file-name-nondirectory (buffer-file-name)))) (message \u0026#34;Dir-locals will be reloaded after saving.\u0026#34;) (add-hook \u0026#39;after-save-hook \u0026#39;+dir-locals-reload-for-all-buffers-in-this-directory nil t))) (add-hook! \u0026#39;(emacs-lisp-mode-hook lisp-data-mode-hook) #\u0026#39;+dir-locals-enable-autoreload) Language Server Protocol Eglot Eglot uses project.el to detect the project root. This is a workaround to make it work with projectile:\n(after! eglot ;; A hack to make it works with projectile (defun projectile-project-find-function (dir) (let* ((root (projectile-project-root dir))) (and root (cons \u0026#39;transient root)))) (with-eval-after-load \u0026#39;project (add-to-list \u0026#39;project-find-functions \u0026#39;projectile-project-find-function)) ;; Use clangd with some options (set-eglot-client! \u0026#39;c++-mode \u0026#39;(\u0026#34;clangd\u0026#34; \u0026#34;-j=3\u0026#34; \u0026#34;--clang-tidy\u0026#34;))) LSP mode Unpin package (unpin! lsp-mode) Tweaks Performance\nUse plist instead of hash table, LSP mode needs to be reinstalled after setting this environment variable (see).\nexport LSP_USE_PLISTS=true (after! lsp-mode (setq lsp-idle-delay 1.0 lsp-log-io nil gc-cons-threshold (* 1024 1024 100))) ;; 100MiB Features \u0026amp; UI\nLSP mode provides a set of configurable UI stuff. By default, Doom Emacs disables some UI components; however, I like to enable some less intrusive, more useful UI stuff.\n(after! lsp-mode (setq lsp-lens-enable t lsp-semantic-tokens-enable t ;; hide unreachable ifdefs lsp-enable-symbol-highlighting t lsp-headerline-breadcrumb-enable nil ;; LSP UI related tweaks lsp-ui-sideline-enable nil lsp-ui-sideline-show-hover nil lsp-ui-sideline-show-symbol nil lsp-ui-sideline-show-diagnostics nil lsp-ui-sideline-show-code-actions nil)) LSP mode with clangd (after! lsp-clangd (setq lsp-clients-clangd-args \u0026#39;(\u0026#34;-j=4\u0026#34; \u0026#34;--background-index\u0026#34; \u0026#34;--clang-tidy\u0026#34; \u0026#34;--completion-style=detailed\u0026#34; \u0026#34;--header-insertion=never\u0026#34; \u0026#34;--header-insertion-decorators=0\u0026#34;)) (set-lsp-priority! \u0026#39;clangd 1)) LSP mode with ccls ;; NOTE: Not tangled, using the default ccls (after! ccls (setq ccls-initialization-options \u0026#39;(:index (:comments 2 :trackDependency 1 :threads 4) :completion (:detailedLabel t))) (set-lsp-priority! \u0026#39;ccls 2)) ; optional as ccls is the default in Doom Enable lsp over tramp Python\n(after! tramp (when (require \u0026#39;lsp-mode nil t) ;; (require \u0026#39;lsp-pyright) (setq lsp-enable-snippet nil lsp-log-io nil ;; To bypass the \u0026#34;lsp--document-highlight fails if ;; textDocument/documentHighlight is not supported\u0026#34; error lsp-enable-symbol-highlighting nil) (lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection \u0026#34;pyls\u0026#34;) :major-modes \u0026#39;(python-mode) :remote? t :server-id \u0026#39;pyls-remote)))) C/C++ with ccls\n;; NOTE: WIP: Not tangled (after! tramp (when (require \u0026#39;lsp-mode nil t) (require \u0026#39;ccls) (setq lsp-enable-snippet nil lsp-log-io nil lsp-enable-symbol-highlighting t) (lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection (lambda () (cons ccls-executable ; executable name on remote machine \u0026#39;ccls\u0026#39; ccls-args))) :major-modes \u0026#39;(c-mode c++-mode objc-mode cuda-mode) :remote? t :server-id \u0026#39;ccls-remote))) (add-to-list \u0026#39;tramp-remote-path \u0026#39;tramp-own-remote-path)) C/C++ with clangd\n(after! tramp (when (require \u0026#39;lsp-mode nil t) (setq lsp-enable-snippet nil lsp-log-io nil ;; To bypass the \u0026#34;lsp--document-highlight fails if ;; textDocument/documentHighlight is not supported\u0026#34; error lsp-enable-symbol-highlighting nil) (lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection (lambda () (cons \u0026#34;clangd-12\u0026#34; ; executable name on remote machine \u0026#39;ccls\u0026#39; lsp-clients-clangd-args))) :major-modes \u0026#39;(c-mode c++-mode objc-mode cuda-mode) :remote? t :server-id \u0026#39;clangd-remote)))) VHDL By default, LSP uses the proprietary VHDL-Tool to provide LSP features; however, there is free and open source alternatives: ghdl-ls and rust_hdl. I have some issues running ghdl-ls installed form pip through the pyghdl package, so let\u0026rsquo;s use rust_hdl instead.\n(use-package! vhdl-mode :when (and (modulep! :tools lsp) (not (modulep! :tools lsp +eglot))) :hook (vhdl-mode . #\u0026#39;+lsp-vhdl-ls-load) :init (defun +lsp-vhdl-ls-load () (interactive) (lsp t) (flycheck-mode t)) :config ;; Required unless vhdl_ls is on the $PATH (setq lsp-vhdl-server-path \u0026#34;~/Projects/foss/repos/rust_hdl/target/release/vhdl_ls\u0026#34; lsp-vhdl-server \u0026#39;vhdl-ls lsp-vhdl--params nil) (require \u0026#39;lsp-vhdl)) SonarLint (package! lsp-sonarlint :disable t :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34;) (use-package! lsp-sonarlint) Cppcheck Check for everything!\n(after! flycheck (setq flycheck-cppcheck-checks \u0026#39;(\u0026#34;information\u0026#34; \u0026#34;missingInclude\u0026#34; \u0026#34;performance\u0026#34; \u0026#34;portability\u0026#34; \u0026#34;style\u0026#34; \u0026#34;unusedFunction\u0026#34; \u0026#34;warning\u0026#34;))) ;; Actually, we can use \u0026#34;all\u0026#34; Project CMake A good new package to facilitate using CMake projects with Emacs, it glues together project, eglot, cmake and clangd.\n(package! project-cmake :disable t ; (not (modulep! :tools lsp +eglot)) ; Enable only if (lsp +eglot) is used :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34; :recipe (:host github :repo \u0026#34;juanjosegarciaripoll/project-cmake\u0026#34;)) (use-package! project-cmake :config (require \u0026#39;eglot) (project-cmake-scan-kits) (project-cmake-eglot-integration)) Clang-format (package! clang-format :pin \u0026#34;e48ff8ae18dc7ab6118c1f6752deb48cb1fc83ac\u0026#34;) (use-package! clang-format :when CLANG-FORMAT-P :commands (clang-format-region)) Auto-include C++ headers (package! cpp-auto-include :recipe (:host github :repo \u0026#34;emacsorphanage/cpp-auto-include\u0026#34;) :pin \u0026#34;0ce829f27d466c083e78b9fe210dcfa61fb417f4\u0026#34;) (use-package! cpp-auto-include :commands cpp-auto-include) C/C++ preprocessor conditions In LSP mode, I configure lsp-semantic-tokens-enable to enable fading unreachable #ifdef blocks, in case LSP is disabled, there is a similar built-in mode for Emacs to do so. However, for a fully satisfying experience, it needs more work to take into account macros defined at compile time (using compile_commands.json for example).\n(unless (modulep! :lang cc +lsp) ;; Disable if LSP for C/C++ is enabled (use-package! hideif :hook (c-mode . hide-ifdef-mode) :hook (c++-mode . hide-ifdef-mode) :init (setq hide-ifdef-shadow t hide-ifdef-initially t))) Erefactor (package! erefactor :recipe (:host github :repo \u0026#34;mhayashi1120/Emacs-erefactor\u0026#34;) :pin \u0026#34;bfe27a1b8c7cac0fe054e76113e941efa3775fe8\u0026#34;) (use-package! erefactor :defer t) Lorem ipsum (package! emacs-lorem-ipsum :recipe (:host github :repo \u0026#34;jschaf/emacs-lorem-ipsum\u0026#34;) :pin \u0026#34;da75c155da327c7a7aedb80f5cfe409984787049\u0026#34;) (use-package! lorem-ipsum :commands (lorem-ipsum-insert-sentences lorem-ipsum-insert-paragraphs lorem-ipsum-insert-list)) Coverage test (package! cov :pin \u0026#34;cd3e1995c596cc227124db9537792d8329ffb696\u0026#34;) Debugging DAP I like to use cpptools over webfreak.debug. So I enable it after loading dap-mode. I like also to have a mode minimal UI. And I like to trigger dap-hydra when the program hits a break point, and automatically delete the session and close Hydra when DAP is terminated.\n(unpin! dap-mode) (after! dap-mode ;; Set latest versions (setq dap-cpptools-extension-version \u0026#34;1.11.5\u0026#34;) (require \u0026#39;dap-cpptools) (setq dap-codelldb-extension-version \u0026#34;1.7.4\u0026#34;) (require \u0026#39;dap-codelldb) (setq dap-gdb-lldb-extension-version \u0026#34;0.26.0\u0026#34;) (require \u0026#39;dap-gdb-lldb) ;; More minimal UI (setq dap-auto-configure-features \u0026#39;(breakpoints locals expressions tooltip) dap-auto-show-output nil ;; Hide the annoying server output lsp-enable-dap-auto-configure t) ;; Automatically trigger dap-hydra when a program hits a breakpoint. (add-hook \u0026#39;dap-stopped-hook (lambda (arg) (call-interactively #\u0026#39;dap-hydra))) ;; Automatically delete session and close dap-hydra when DAP is terminated. (add-hook \u0026#39;dap-terminated-hook (lambda (arg) (call-interactively #\u0026#39;dap-delete-session) (dap-hydra/nil))) ;; A workaround to correctly show breakpoints ;; from: https://github.com/emacs-lsp/dap-mode/issues/374#issuecomment-1140399819 (add-hook! +dap-running-session-mode (set-window-buffer nil (current-buffer)))) Doom store Doom Emacs stores session information persistently using the core store mechanism. However, relaunching a new session doesn\u0026rsquo;t overwrite the last stored session, to do so, I define a helper function to clear data stored in the \u0026quot;+debugger\u0026quot; location. (see +debugger--get-last-config function.)\n(defun +debugger/clear-last-session () \u0026#34;Clear the last stored session\u0026#34; (interactive) (doom-store-clear \u0026#34;+debugger\u0026#34;)) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (modulep! :tools debugger +lsp) :prefix (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;Clear last DAP session\u0026#34; \u0026#34;c\u0026#34; #\u0026#39;+debugger/clear-last-session)) RealGUD For C/C++, DAP mode is missing so much features. In my experience, both cpptools and gdb DAP interfaces aren\u0026rsquo;t mature, it stops and disconnect while debugging, making it a double pain.\nAdditional commands There is no better than using pure GDB, it makes debugging extremely flexible. Let\u0026rsquo;s define some missing GDB commands, add them to Hydra keys, and define some reverse debugging commands for usage with rr (which we can use by substituting gdb by rr replay when starting a debug session).\n(after! realgud (require \u0026#39;hydra) ;; Add some missing gdb/rr commands (defun +realgud:cmd-start (arg) \u0026#34;start = break main + run\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;start\u0026#34;)) (defun +realgud:cmd-reverse-next (arg) \u0026#34;Reverse next\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-next\u0026#34;)) (defun +realgud:cmd-reverse-step (arg) \u0026#34;Reverse step\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-step\u0026#34;)) (defun +realgud:cmd-reverse-continue (arg) \u0026#34;Reverse continue\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-continue\u0026#34;)) (defun +realgud:cmd-reverse-finish (arg) \u0026#34;Reverse finish\u0026#34; (interactive \u0026#34;p\u0026#34;) (realgud-command \u0026#34;reverse-finish\u0026#34;)) ;; Define a hydra binding (defhydra realgud-hydra (:color pink :hint nil :foreign-keys run) \u0026#34; Stepping | _n_: next | _i_: step | _o_: finish | _c_: continue | _R_: restart | _u_: until-here Revese | _rn_: next | _ri_: step | _ro_: finish | _rc_: continue | Breakpts | _ba_: break | _bD_: delete | _bt_: tbreak | _bd_: disable | _be_: enable | _tr_: backtrace Eval | _ee_: at-point | _er_: region | _eE_: eval | | _!_: shell | _Qk_: kill | _Qq_: quit | _Sg_: gdb | _Ss_: start \u0026#34; (\u0026#34;n\u0026#34; realgud:cmd-next) (\u0026#34;i\u0026#34; realgud:cmd-step) (\u0026#34;o\u0026#34; realgud:cmd-finish) (\u0026#34;c\u0026#34; realgud:cmd-continue) (\u0026#34;R\u0026#34; realgud:cmd-restart) (\u0026#34;u\u0026#34; realgud:cmd-until-here) (\u0026#34;rn\u0026#34; +realgud:cmd-reverse-next) (\u0026#34;ri\u0026#34; +realgud:cmd-reverse-step) (\u0026#34;ro\u0026#34; +realgud:cmd-reverse-finish) (\u0026#34;rc\u0026#34; +realgud:cmd-reverse-continue) (\u0026#34;ba\u0026#34; realgud:cmd-break) (\u0026#34;bt\u0026#34; realgud:cmd-tbreak) (\u0026#34;bD\u0026#34; realgud:cmd-delete) (\u0026#34;be\u0026#34; realgud:cmd-enable) (\u0026#34;bd\u0026#34; realgud:cmd-disable) (\u0026#34;ee\u0026#34; realgud:cmd-eval-at-point) (\u0026#34;er\u0026#34; realgud:cmd-eval-region) (\u0026#34;tr\u0026#34; realgud:cmd-backtrace) (\u0026#34;eE\u0026#34; realgud:cmd-eval) (\u0026#34;!\u0026#34; realgud:cmd-shell) (\u0026#34;Qk\u0026#34; realgud:cmd-kill) (\u0026#34;Sg\u0026#34; realgud:gdb) (\u0026#34;Ss\u0026#34; +realgud:cmd-start) (\u0026#34;q\u0026#34; nil \u0026#34;quit\u0026#34; :color blue) ;; :exit (\u0026#34;Qq\u0026#34; realgud:cmd-quit :color blue)) ;; :exit (defun +debugger/realgud:gdb-hydra () \u0026#34;Run `realgud-hydra\u0026#39;.\u0026#34; (interactive) (realgud-hydra/body)) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (modulep! :tools debugger) :prefix (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;RealGUD hydra\u0026#34; \u0026#34;h\u0026#34; #\u0026#39;+debugger/realgud:gdb-hydra))) Record and replay rr We then add some shortcuts to run rr from Emacs, the rr record takes the program name and arguments from my local +realgud-debug-config, when rr replay respects the arguments configured in RealGUD\u0026rsquo;s GDB command name. Some useful hints could be found here, here, here and here.\n(after! realgud (defun +debugger/rr-replay () \u0026#34;Launch `rr replay\u0026#39;.\u0026#34; (interactive) (realgud:gdb (+str-replace \u0026#34;gdb\u0026#34; \u0026#34;rr replay\u0026#34; realgud:gdb-command-name))) (defun +debugger/rr-record () \u0026#34;Launch `rr record\u0026#39; with parameters from launch.json or `+launch-json-debug-config\u0026#39;.\u0026#34; (interactive) (let* ((conf (launch-json--config-choice)) (args (launch-json--substite-special-vars (plist-get conf :program) (plist-get conf :args)))) (unless (make-process :name \u0026#34;rr-record\u0026#34; :buffer \u0026#34;*rr record*\u0026#34; :command (append \u0026#39;(\u0026#34;rr\u0026#34; \u0026#34;record\u0026#34;) args)) (message \u0026#34;Cannot start the \u0026#39;rr record\u0026#39; process\u0026#34;)))) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (modulep! :tools debugger) :prefix (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;rr record\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;+debugger/rr-record :desc \u0026#34;rr replay\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;+debugger/rr-replay))) Additional debuggers for RealGUD (package! realgud-lldb :pin \u0026#34;19a2c0a8b228af543338f3a8e51141a9e23484a5\u0026#34;) (package! realgud-ipdb :pin \u0026#34;f18f907aa4ddd3e59dc19ca296d4ee2dc5e436b0\u0026#34;) (package! realgud-trepan-xpy :recipe (:host github :repo \u0026#34;realgud/trepan-xpy\u0026#34;) :pin \u0026#34;f53fea61a86226dcf5222b2814a549c8f8b8d5a9\u0026#34;) (package! realgud-maxima :recipe (:host github :repo \u0026#34;realgud/realgud-maxima\u0026#34;) :pin \u0026#34;74d1615be9105d7f8a8d6d0b9f6d7a91638def11\u0026#34;) GDB Emacs GDB a.k.a. gdb-mi DAP mode is great, however, it is not mature for C/C++ debugging, it does not support some basic features like Run until cursor, Show disassembled code, etc. Emacs have builtin gdb support through gdb-mi and gud-gdb.\nThe emacs-gdb package overwrites the builtin gdb-mi, it is much faster (thanks to it\u0026rsquo;s C module), and it defines some easy to use UI, with Visual Studio like keybindings.\n(package! gdb-mi :disable t :recipe (:host github :repo \u0026#34;weirdNox/emacs-gdb\u0026#34; :files (\u0026#34;*.el\u0026#34; \u0026#34;*.c\u0026#34; \u0026#34;*.h\u0026#34; \u0026#34;Makefile\u0026#34;)) :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34;) (use-package! gdb-mi :init (fmakunbound \u0026#39;gdb) (fmakunbound \u0026#39;gdb-enable-debug) :config (setq gdb-window-setup-function #\u0026#39;gdb--setup-windows ;; TODO: Customize this gdb-ignore-gdbinit nil) ;; I use gdbinit to define some useful stuff ;; History (defvar +gdb-history-file \u0026#34;~/.gdb_history\u0026#34;) (defun +gud-gdb-mode-hook-setup () \u0026#34;GDB setup.\u0026#34; ;; Suposes \u0026#34;~/.gdbinit\u0026#34; contains: ;; set history save on ;; set history filename ~/.gdb_history ;; set history remove-duplicates 2048 (when (and (ring-empty-p comint-input-ring) (file-exists-p +gdb-history-file)) (setq comint-input-ring-file-name +gdb-history-file) (comint-read-input-ring t))) (add-hook \u0026#39;gud-gdb-mode-hook \u0026#39;+gud-gdb-mode-hook-setup)) Custom layout for gdb-many-windows Stolen from https://stackoverflow.com/a/41326527/3058915. I used it to change the builtin gdb-many-windows layout.\n(setq gdb-many-windows nil) (defun set-gdb-layout(\u0026amp;optional c-buffer) (if (not c-buffer) (setq c-buffer (window-buffer (selected-window)))) ;; save current buffer ;; from http://stackoverflow.com/q/39762833/846686 (set-window-dedicated-p (selected-window) nil) ;; unset dedicate state if needed (switch-to-buffer gud-comint-buffer) (delete-other-windows) ;; clean all (let* ((w-source (selected-window)) ;; left top (w-gdb (split-window w-source nil \u0026#39;right)) ;; right bottom (w-locals (split-window w-gdb nil \u0026#39;above)) ;; right middle bottom (w-stack (split-window w-locals nil \u0026#39;above)) ;; right middle top (w-breakpoints (split-window w-stack nil \u0026#39;above)) ;; right top (w-io (split-window w-source (floor(* 0.9 (window-body-height))) \u0026#39;below))) ;; left bottom (set-window-buffer w-io (gdb-get-buffer-create \u0026#39;gdb-inferior-io)) (set-window-dedicated-p w-io t) (set-window-buffer w-breakpoints (gdb-get-buffer-create \u0026#39;gdb-breakpoints-buffer)) (set-window-dedicated-p w-breakpoints t) (set-window-buffer w-locals (gdb-get-buffer-create \u0026#39;gdb-locals-buffer)) (set-window-dedicated-p w-locals t) (set-window-buffer w-stack (gdb-get-buffer-create \u0026#39;gdb-stack-buffer)) (set-window-dedicated-p w-stack t) (set-window-buffer w-gdb gud-comint-buffer) (select-window w-source) (set-window-buffer w-source c-buffer))) (defadvice gdb (around args activate) \u0026#34;Change the way to gdb works.\u0026#34; (setq global-config-editing (current-window-configuration)) ;; to restore: (set-window-configuration c-editing) (let ((c-buffer (window-buffer (selected-window)))) ;; save current buffer ad-do-it (set-gdb-layout c-buffer))) (defadvice gdb-reset (around args activate) \u0026#34;Change the way to gdb exit.\u0026#34; ad-do-it (set-window-configuration global-config-editing)) Highlight current line (defvar gud-overlay (let* ((ov (make-overlay (point-min) (point-min)))) (overlay-put ov \u0026#39;face \u0026#39;secondary-selection) ov) \u0026#34;Overlay variable for GUD highlighting.\u0026#34;) (defadvice gud-display-line (after my-gud-highlight act) \u0026#34;Highlight current line.\u0026#34; (let* ((ov gud-overlay) (bf (gud-find-file true-file))) (with-current-buffer bf (move-overlay ov (line-beginning-position) (line-beginning-position 2) ;; (move-overlay ov (line-beginning-position) (line-end-position) (current-buffer))))) (defun gud-kill-buffer () (if (derived-mode-p \u0026#39;gud-mode) (delete-overlay gud-overlay))) (add-hook \u0026#39;kill-buffer-hook \u0026#39;gud-kill-buffer) WIP launch.json support for GUD and RealGUD I do a lot of development on C/C++ apps that gets data from command line arguments, which means I have to type my arguments manually after calling realgud:gdb, which is very annoying.\nFor DAP mode, there is a support for either dap-debug-edit-template, or launch.json. For GUD/RealGUD though, I didn\u0026rsquo;t find any ready-to-use feature like this. So let\u0026rsquo;s code it!\nI like to define a variable named +launch-json-debug-config to use as a fallback, if no launch.json file is present.\n;; A variable which to be used in .dir-locals.el, formatted as a list of plists; ;; \u0026#39;((:program \u0026#34;...\u0026#34; :args (\u0026#34;args1\u0026#34; \u0026#34;arg2\u0026#34; ...))) (defvar +launch-json-debug-config nil) This variable should have the same structure of a launch.json file, in Elisp, it should be a list of plists, each plist represents a configuration, this variable can be set in .dir-locals.el for example.\nThe configuration plists supports some of launch.json parameters, including:\n:name a description of the debug configuration; :type which debugger to use; :program the path of the debuggee program; :args a list of string arguments to pass to the debuggee program. The variable +launch-json-debug-config can be set in a per-project basis thanks to .dir-locals.el, something like this:\n;; Example entry in .dir-locals.el ((nil . ((+launch-json-debug-config . \u0026#39;((:name \u0026#34;Debug my_prog with csv data\u0026#34; :type \u0026#34;realgud:gdb\u0026#34; ;; One config with `realgud:gdb\u0026#39; :program \u0026#34;${workspaceFolder}/build/bin/my_prog\u0026#34; :args (\u0026#34;--in_file=${workspaceFolder}/some/file.csv\u0026#34; \u0026#34;--some-parameter\u0026#34; \u0026#34;-a\u0026#34; \u0026#34;-b\u0026#34; \u0026#34;--out_file=/tmp/some_randome_file\u0026#34; \u0026#34;-a\u0026#34;)) (:name \u0026#34;Debug my_prog with options \u0026#39;-a\u0026#39; and \u0026#39;-b\u0026#39;\u0026#34; :type \u0026#34;gdb-mi\u0026#34; ;; Another config with `gdb-mi\u0026#39; :program \u0026#34;${workspaceFolder}/build/bin/my_prog\u0026#34; :args (\u0026#34;-a\u0026#34; \u0026#34;-b\u0026#34;))))))) The list of implemented special variables are listed in the table below, they have been defined as specified in VS Code.\nVariable Example userHome /home/username workspaceFolder /home/username/your-project workspaceFolderBasename your-project file /home/username/your-project/folder/file.cc fileWorkspaceFolder /home/username/your-project relativeFile folder/file.cc relativeFileDirname folder fileBasename file.cc fileBasenameNoExtension file fileDirname /home/username/your-project/folder fileExtname .cc lineNumber Line number of the cursor selectedText Text selected in your code editor pathSeparator Returns / on *nix, and \\ on Windows If a launch.json file is detected in the project directory, it gets read and searches for a configuration for the realgud:gdb debugger. So you need to have a section with type realgud:gdb. This is an example of a valid launch.json file.\n{ \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Emacs::RealGUD:GDB (view_trajectory)\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;realgud:gdb\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;dap-compilation\u0026#34;: \u0026#34;cmake --build build/debug -- -j 8\u0026#34;, \u0026#34;dap-compilation-dir\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/build/debug/bin/view_trajectory\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;htraj=${workspaceFolder}/data/seq1/h_poses.csv\u0026#34;, \u0026#34;traj=${workspaceFolder}/data/seq1/poses.csv\u0026#34; ], \u0026#34;stopAtEntry\u0026#34;: false, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false } ] } The example above defines several parameters, however, only type, program and args are used at the moment.\n(defvar launch-json--gud-debugger-regex (rx (seq bol (group-n 1 (or \u0026#34;gdb\u0026#34; \u0026#34;gud-gdb\u0026#34; \u0026#34;perldb\u0026#34; \u0026#34;pdb\u0026#34; \u0026#34;jdb\u0026#34; \u0026#34;guiler\u0026#34; \u0026#34;dbx\u0026#34; \u0026#34;sdb\u0026#34; \u0026#34;xdb\u0026#34;) eol)))) (defvar launch-json--realgud-debugger-regex (rx (seq bol (or (seq \u0026#34;realgud:\u0026#34; (group-n 1 (or \u0026#34;gdb\u0026#34; \u0026#34;pdb\u0026#34; \u0026#34;bashdb\u0026#34; \u0026#34;kshdb\u0026#34; \u0026#34;zshd\u0026#34; \u0026#34;perldb\u0026#34; \u0026#34;rdebug\u0026#34; \u0026#34;remake\u0026#34; \u0026#34;trepan\u0026#34; \u0026#34;trepan2\u0026#34; \u0026#34;trepan3k\u0026#34; \u0026#34;trepanjs\u0026#34; \u0026#34;trepan.pl\u0026#34;))) (seq \u0026#34;realgud-\u0026#34; (group-n 1 (or \u0026#34;gub\u0026#34;))) ;; Additional debuggers (seq \u0026#34;realgud:\u0026#34; (group-n 1 (or \u0026#34;xdebug\u0026#34; \u0026#34;pry\u0026#34; \u0026#34;jdb\u0026#34; \u0026#34;ipdb\u0026#34; \u0026#34;trepan-xpy\u0026#34; \u0026#34;trepan-ni\u0026#34; \u0026#34;node-inspect\u0026#34;))) ;; `realgud-lldb\u0026#39; defines the debug command as `realgud--lldb\u0026#39;, ;; We accept both `realgud:lldb\u0026#39; and `realgud--lldb\u0026#39; in the config (seq \u0026#34;realgud\u0026#34; (or \u0026#34;:\u0026#34; \u0026#34;--\u0026#34;) (group-n 1 (or \u0026#34;lldb\u0026#34;)))) eol))) ;; Define aliases for realgud-lldb (with-eval-after-load \u0026#39;realgud-lldb (defalias \u0026#39;realgud:lldb \u0026#39;realgud--lldb) (defalias \u0026#39;realgud:lldb-command-name \u0026#39;realgud--lldb-command-name)) ;; Define aliases for realgud-ipdb (with-eval-after-load \u0026#39;realgud-ipdb (defalias \u0026#39;realgud:ipdb-command-name \u0026#39;realgud--ipdb-command-name)) (defvar launch-json--last-config nil) (defun launch-json-last-config-clear () (interactive) (setq-local launch-json--last-config nil)) (defun launch-json--substite-special-vars (program \u0026amp;optional args) \u0026#34;Substitue variables in PROGRAM and ARGS. Return a list, in which processed PROGRAM is the first element, followed by ARGS.\u0026#34; (let* ((curr-file (ignore-errors (expand-file-name (buffer-file-name)))) (ws-root (string-trim-right (expand-file-name (or (projectile-project-root) (ignore-errors (file-name-directory curr-file)) \u0026#34;.\u0026#34;)) \u0026#34;/\u0026#34;)) (ws-basename (file-name-nondirectory ws-root))) ;; Replace special variables (mapcar (lambda (str) (+str-replace-all (append (list (cons \u0026#34;${workspaceFolder}\u0026#34; ws-root) (cons \u0026#34;${workspaceFolderBasename}\u0026#34; ws-basename) (cons \u0026#34;${userHome}\u0026#34; (or (getenv \u0026#34;HOME\u0026#34;) (expand-file-name \u0026#34;~\u0026#34;))) (cons \u0026#34;${pathSeparator}\u0026#34; (if (memq system-type \u0026#39;(windows-nt ms-dos cygwin)) \u0026#34;\\\\\u0026#34; \u0026#34;/\u0026#34;)) (cons \u0026#34;${selectedText}\u0026#34; (if (use-region-p) (buffer-substring-no-properties (region-beginning) (region-end)) \u0026#34;\u0026#34;))) ;; To avoid problems if launched from a non-file buffer (when curr-file (list (cons \u0026#34;${file}\u0026#34; curr-file) (cons \u0026#34;${relativeFile}\u0026#34; (file-relative-name curr-file ws-root)) (cons \u0026#34;${relativeFileDirname}\u0026#34; (file-relative-name (file-name-directory curr-file) ws-root)) (cons \u0026#34;${fileBasename}\u0026#34; (file-name-nondirectory curr-file)) (cons \u0026#34;${fileBasenameNoExtension}\u0026#34; (file-name-base curr-file)) (cons \u0026#34;${fileDirname}\u0026#34; (file-name-directory curr-file)) (cons \u0026#34;${fileExtname}\u0026#34; (file-name-extension curr-file)) (cons \u0026#34;${lineNumber}\u0026#34; (line-number-at-pos (point) t))))) str)) (cons program args)))) (defun launch-json--debugger-params (type) (let* ((front/backend (cond ((string-match launch-json--realgud-debugger-regex type) (cons \u0026#39;realgud (intern (match-string 1 type)))) ((string-match launch-json--gud-debugger-regex type) (cons \u0026#39;gud (intern (match-string 1 type)))) (t (cons \u0026#39;unknown \u0026#39;unknown)))) (frontend (car front/backend)) (backend (cdr front/backend)) (cmd-sym (unless (eq frontend \u0026#39;unknown) (intern (format (cond ((eq frontend \u0026#39;gud) \u0026#34;gud-%s-%s\u0026#34;) ((eq frontend \u0026#39;realgud) \u0026#34;%s-%s\u0026#34;) (t \u0026#34;%s-%s\u0026#34;)) type \u0026#34;command-name\u0026#34;))))) (message \u0026#34;[launch-json:params]: Found type: %s -\u0026gt; { frontend: %s | backend: %s }\u0026#34; type (symbol-name frontend) (symbol-name backend)) (cond ((memq backend \u0026#39;(gud-gdb gdb)) ;; Special case for \u0026#39;(gud . gdb), uses `gdb-mi\u0026#39; (let ((use-gdb-mi (equal front/backend \u0026#39;(gud . gdb)))) `(:type ,type :debug-cmd ,(if use-gdb-mi \u0026#39;gdb (intern type)) :args-format \u0026#34; --args %s %s\u0026#34; :cmd ,cmd-sym :require ,(if use-gdb-mi \u0026#39;gdb-mi frontend)))) ((eq backend \u0026#39;lldb) `(:type ,type :debug-cmd ,(intern type) :args-format \u0026#34; -- %s %s\u0026#34; :cmd ,cmd-sym :require ,(intern (if (eq frontend \u0026#39;realgud) (+str-replace-all \u0026#39;((\u0026#34;--\u0026#34; . \u0026#34;-\u0026#34;) (\u0026#34;:\u0026#34; . \u0026#34;-\u0026#34;)) type) type)))) (t ;; TODO: to be expanded for each debugger `(:type ,type :debug-cmd ,(intern type) :args-format \u0026#34; %s %s\u0026#34; :cmd ,(if (equal front/backend \u0026#39;(realgud . ipdb)) \u0026#39;realgud--ipdb-command-name cmd-sym) :require ,(cond ((equal front/backend \u0026#39;(realgud . trepan-ni)) \u0026#39;realgud-trepan-ni) (t frontend))))))) (defun launch-json--debug-command (params debuggee-args) \u0026#34;Return the debug command for PARAMS with DEBUGGEE-ARGS.\u0026#34; (when-let* ((prog (car debuggee-args)) (cmd (plist-get params :cmd)) (pkg (plist-get params :require))) (if (or (not pkg) (eq pkg \u0026#39;unknown)) (progn (message \u0026#34;[launch-json:command]: Unknown debugger\u0026#34;) nil) (if (require (plist-get params :require) nil t) (let ((args (+str-join \u0026#34; \u0026#34; (cdr debuggee-args)))) (when args (setq args (format (plist-get params :args-format) prog args))) (if (bound-and-true-p cmd) (concat (eval cmd) (if args args \u0026#34;\u0026#34;)) (message \u0026#34;[launch-json:command]: Invalid command for type %s\u0026#34; (plist-get params :type)) nil)) (message \u0026#34;[launch-json:command]: Cannot add package %s\u0026#34; (symbol-name pkg)) nil)))) (defun launch-json-read (\u0026amp;optional file) \u0026#34;Return the configurations section from a launch.json FILE. If FILE is nil, launch.json will be searched in the current project, if it is set to a launch.json file, it will be used instead.\u0026#34; (let ((launch-json (expand-file-name (or file \u0026#34;launch.json\u0026#34;) (or (projectile-project-root) \u0026#34;.\u0026#34;)))) (when (file-exists-p launch-json) (message \u0026#34;[launch-json]: Found \\\u0026#34;launch.json\\\u0026#34; at %s\u0026#34; launch-json) (let* ((launch (with-temp-buffer (insert-file-contents launch-json) (json-parse-buffer :object-type \u0026#39;plist :array-type \u0026#39;list :null-object nil :false-object nil))) (configs (plist-get launch :configurations))) (+filter (lambda (conf) (or (string-match-p launch-json--gud-debugger-regex (plist-get conf :type)) (string-match-p launch-json--realgud-debugger-regex (plist-get conf :type)))) configs))))) (defun launch-json--config-choice (\u0026amp;optional file) (let* ((confs (or (launch-json-read file) +launch-json-debug-config)) (candidates (mapcar (lambda (conf) (cons (format \u0026#34;%s [%s]\u0026#34; (plist-get conf :name) (plist-get conf :type)) conf)) confs))) (cond ((eq (length confs) 1) (car confs)) ((\u0026gt; (length confs) 1) (cdr (assoc (completing-read \u0026#34;Configuration: \u0026#34; candidates) candidates)))))) (defun launch-json-debug (\u0026amp;optional file) \u0026#34;Launch RealGUD or GDB with parameters from `+launch-json-debug-config\u0026#39; or launch.json file.\u0026#34; (interactive) (let* ((conf (or launch-json--last-config (launch-json--config-choice file))) (args (launch-json--substite-special-vars (plist-get conf :program) (plist-get conf :args))) (type (plist-get conf :type)) (params (launch-json--debugger-params type))) (when params (let ((debug-cmd (plist-get params :debug-cmd))) (when (fboundp debug-cmd) (setq-local launch-json--last-config conf) (funcall debug-cmd (launch-json--debug-command params args))))))) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (modulep! :tools debugger) :prefix (\u0026#34;d\u0026#34; . \u0026#34;debugger\u0026#34;) :desc \u0026#34;GUD/RealGUD launch.json\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;launch-json-debug)) Valgrind (package! valgrind :recipe `(:local-repo ,(expand-file-name \u0026#34;lisp/valgrind\u0026#34; doom-user-dir))) (use-package! valgrind :commands valgrind) Symbols Emojify For starters, twitter\u0026rsquo;s emojis look nicer than emoji-one. Other than that, this is pretty great OOTB 😀.\n(setq emojify-emoji-set \u0026#34;twemoji-v2\u0026#34;) One minor annoyance is the use of emojis over the default character when the default is actually preferred. This occurs with overlay symbols I use in Org mode, such as checkbox state, and a few other miscellaneous cases.\nWe can accommodate our preferences by deleting those entries from the emoji hash table\n(defvar emojify-disabled-emojis \u0026#39;(;; Org \u0026#34;◼\u0026#34; \u0026#34;☑\u0026#34; \u0026#34;☸\u0026#34; \u0026#34;⚙\u0026#34; \u0026#34;⏩\u0026#34; \u0026#34;⏪\u0026#34; \u0026#34;⬆\u0026#34; \u0026#34;⬇\u0026#34; \u0026#34;❓\u0026#34; \u0026#34;⏱\u0026#34; \u0026#34;®\u0026#34; \u0026#34;™\u0026#34; \u0026#34;🅱\u0026#34; \u0026#34;❌\u0026#34; \u0026#34;✳\u0026#34; ;; Terminal powerline \u0026#34;✔\u0026#34; ;; Box drawing \u0026#34;▶\u0026#34; \u0026#34;◀\u0026#34;) \u0026#34;Characters that should never be affected by `emojify-mode\u0026#39;.\u0026#34;) (defadvice! emojify-delete-from-data () \u0026#34;Ensure `emojify-disabled-emojis\u0026#39; don\u0026#39;t appear in `emojify-emojis\u0026#39;.\u0026#34; :after #\u0026#39;emojify-set-emoji-data (dolist (emoji emojify-disabled-emojis) (remhash emoji emojify-emojis))) Now, it would be good to have a minor mode which allowed you to type ascii/gh emojis and get them converted to unicode. Let’s make one.\n(defun emojify--replace-text-with-emoji (orig-fn emoji text buffer start end \u0026amp;optional target) \u0026#34;Modify `emojify--propertize-text-for-emoji\u0026#39; to replace ascii/github emoticons with unicode emojis, on the fly.\u0026#34; (if (or (not emoticon-to-emoji) (= 1 (length text))) (funcall orig-fn emoji text buffer start end target) (delete-region start end) (insert (ht-get emoji \u0026#34;unicode\u0026#34;)))) (define-minor-mode emoticon-to-emoji \u0026#34;Write ascii/gh emojis, and have them converted to unicode live.\u0026#34; :global nil :init-value nil (if emoticon-to-emoji (progn (setq-local emojify-emoji-styles \u0026#39;(ascii github unicode)) (advice-add \u0026#39;emojify--propertize-text-for-emoji :around #\u0026#39;emojify--replace-text-with-emoji) (unless emojify-mode (emojify-turn-on-emojify-mode))) (setq-local emojify-emoji-styles (default-value \u0026#39;emojify-emoji-styles)) (advice-remove \u0026#39;emojify--propertize-text-for-emoji #\u0026#39;emojify--replace-text-with-emoji))) This new minor mode of ours will be nice for messages, so let\u0026rsquo;s hook it in for Email and IRC.\n(add-hook! \u0026#39;(mu4e-compose-mode org-msg-edit-mode circe-channel-mode) (emoticon-to-emoji 1)) Ligatures Extra ligatures are good, however, I\u0026rsquo;d like to see my keywords! Let\u0026rsquo;s disable them in C/C++, Rust and Python modes. In addition to that, Lisps do replace lambdas with the greek symbol λ, however, this cause miss formatting and sometimes messes up with the parenthesis, so let\u0026rsquo;s disable ligatures on Lisps.\n(defun +appened-to-negation-list (head tail) (if (sequencep head) (delete-dups (if (eq (car tail) \u0026#39;not) (append head tail) (append tail head))) tail)) (when (modulep! :ui ligatures) (setq +ligatures-extras-in-modes (+appened-to-negation-list +ligatures-extras-in-modes \u0026#39;(not c-mode c++-mode emacs-lisp-mode python-mode scheme-mode racket-mode rust-mode))) (setq +ligatures-in-modes (+appened-to-negation-list +ligatures-in-modes \u0026#39;(not emacs-lisp-mode scheme-mode racket-mode)))) Natural languages Spell-Fu Install the aspell back-end and the dictionaries to use with spell-fu\nNow, spell-fu supports multiple languages! Let\u0026rsquo;s add English, French and Arabic. So I can \u0026ldquo;mélanger les langues sans avoir de problèmes!\u0026rdquo;.\n(after! spell-fu (defun +spell-fu-register-dictionary (lang) \u0026#34;Add `LANG` to spell-fu multi-dict, with a personal dictionary.\u0026#34; ;; Add the dictionary (spell-fu-dictionary-add (spell-fu-get-ispell-dictionary lang)) (let ((personal-dict-file (expand-file-name (format \u0026#34;aspell.%s.pws\u0026#34; lang) doom-user-dir))) ;; Create an empty personal dictionary if it doesn\u0026#39;t exists (unless (file-exists-p personal-dict-file) (write-region \u0026#34;\u0026#34; nil personal-dict-file)) ;; Add the personal dictionary (spell-fu-dictionary-add (spell-fu-get-personal-dictionary (format \u0026#34;%s-personal\u0026#34; lang) personal-dict-file)))) (add-hook \u0026#39;spell-fu-mode-hook (lambda () (+spell-fu-register-dictionary +my/lang-main) (+spell-fu-register-dictionary +my/lang-secondary)))) Proselint A good and funny linter for English prose!, install via pip install proselint.\n(after! flycheck (flycheck-define-checker proselint \u0026#34;A linter for prose.\u0026#34; :command (\u0026#34;proselint\u0026#34; source-inplace) :error-patterns ((warning line-start (file-name) \u0026#34;:\u0026#34; line \u0026#34;:\u0026#34; column \u0026#34;: \u0026#34; (id (one-or-more (not (any \u0026#34; \u0026#34;)))) (message) line-end)) :modes (text-mode markdown-mode gfm-mode org-mode)) ;; TODO: Can be enabled automatically for English documents using `guess-language\u0026#39; (defun +flycheck-proselint-toggle () \u0026#34;Toggle Proselint checker for the current buffer.\u0026#34; (interactive) (if (and (fboundp \u0026#39;guess-language-buffer) (string= \u0026#34;en\u0026#34; (guess-language-buffer))) (if (memq \u0026#39;proselint flycheck-checkers) (setq-local flycheck-checkers (delete \u0026#39;proselint flycheck-checkers)) (setq-local flycheck-checkers (append flycheck-checkers \u0026#39;(proselint)))) (message \u0026#34;Proselint understands only English!\u0026#34;)))) Grammarly Use either eglot-grammarly or lsp-grammarly.\n(package! grammarly :recipe (:host github :repo \u0026#34;emacs-grammarly/grammarly\u0026#34;) :pin \u0026#34;e47b370faace9ca081db0b87ae3bcfd73212c56d\u0026#34;) (use-package! grammarly :config (grammarly-load-from-authinfo)) Eglot (package! eglot-grammarly :disable (not (modulep! :tools lsp +eglot)) :recipe (:host github :repo \u0026#34;emacs-grammarly/eglot-grammarly\u0026#34;) :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34;) (use-package! eglot-grammarly :commands (+lsp-grammarly-load) :init (defun +lsp-grammarly-load () \u0026#34;Load Grammarly LSP server for Eglot.\u0026#34; (interactive) (require \u0026#39;eglot-grammarly) (call-interactively #\u0026#39;eglot))) LSP Mode (package! lsp-grammarly :disable (or (not (modulep! :tools lsp)) (modulep! :tools lsp +eglot)) :recipe (:host github :repo \u0026#34;emacs-grammarly/lsp-grammarly\u0026#34;) :pin \u0026#34;eab5292037478c32e7d658fb5cba8b8fb6d72a7c\u0026#34;) (use-package! lsp-grammarly :commands (+lsp-grammarly-load +lsp-grammarly-toggle) :init (defun +lsp-grammarly-load () \u0026#34;Load Grammarly LSP server for LSP Mode.\u0026#34; (interactive) (require \u0026#39;lsp-grammarly) (lsp-deferred)) ;; or (lsp) (defun +lsp-grammarly-enabled-p () (not (member \u0026#39;grammarly-ls lsp-disabled-clients))) (defun +lsp-grammarly-enable () \u0026#34;Enable Grammarly LSP.\u0026#34; (interactive) (when (not (+lsp-grammarly-enabled-p)) (setq lsp-disabled-clients (remove \u0026#39;grammarly-ls lsp-disabled-clients)) (message \u0026#34;Enabled grammarly-ls\u0026#34;)) (+lsp-grammarly-load)) (defun +lsp-grammarly-disable () \u0026#34;Disable Grammarly LSP.\u0026#34; (interactive) (when (+lsp-grammarly-enabled-p) (add-to-list \u0026#39;lsp-disabled-clients \u0026#39;grammarly-ls) (lsp-disconnect) (message \u0026#34;Disabled grammarly-ls\u0026#34;))) (defun +lsp-grammarly-toggle () \u0026#34;Enable/disable Grammarly LSP.\u0026#34; (interactive) (if (+lsp-grammarly-enabled-p) (+lsp-grammarly-disable) (+lsp-grammarly-enable))) (after! lsp-mode ;; Disable by default (add-to-list \u0026#39;lsp-disabled-clients \u0026#39;grammarly-ls)) :config (set-lsp-priority! \u0026#39;grammarly-ls 1)) Grammalecte (package! flycheck-grammalecte :recipe (:host github :repo \u0026#34;milouse/flycheck-grammalecte\u0026#34;) :pin \u0026#34;314de13247710410f11d060a214ac4f400c02a71\u0026#34;) (use-package! flycheck-grammalecte :when nil ;; BUG: Disabled, there is a Python error :commands (flycheck-grammalecte-correct-error-at-point grammalecte-conjugate-verb grammalecte-define grammalecte-define-at-point grammalecte-find-synonyms grammalecte-find-synonyms-at-point) :init (setq grammalecte-settings-file (expand-file-name \u0026#34;grammalecte/grammalecte-cache.el\u0026#34; doom-data-dir) grammalecte-python-package-directory (expand-file-name \u0026#34;grammalecte/grammalecte\u0026#34; doom-data-dir)) (setq flycheck-grammalecte-report-spellcheck t flycheck-grammalecte-report-grammar t flycheck-grammalecte-report-apos nil flycheck-grammalecte-report-esp nil flycheck-grammalecte-report-nbsp nil flycheck-grammalecte-filters \u0026#39;(\u0026#34;(?m)^# ?-*-.+$\u0026#34; ;; Ignore LaTeX equations (inline and block) \u0026#34;\\\\$.*?\\\\$\u0026#34; \u0026#34;(?s)\\\\\\\\begin{\\\\(?1:\\\\(?:equation.\\\\|align.\\\\)\\\\)}.*?\\\\\\\\end{\\\\1}\u0026#34;)) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:prefix (\u0026#34;g\u0026#34; . \u0026#34;grammalecte\u0026#34;) :desc \u0026#34;Correct error at point\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;flycheck-grammalecte-correct-error-at-point :desc \u0026#34;Conjugate a verb\u0026#34; \u0026#34;V\u0026#34; #\u0026#39;grammalecte-conjugate-verb :desc \u0026#34;Define a word\u0026#34; \u0026#34;W\u0026#34; #\u0026#39;grammalecte-define :desc \u0026#34;Conjugate a verb at point\u0026#34; \u0026#34;w\u0026#34; #\u0026#39;grammalecte-define-at-point :desc \u0026#34;Find synonyms\u0026#34; \u0026#34;S\u0026#34; #\u0026#39;grammalecte-find-synonyms :desc \u0026#34;Find synonyms at point\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;grammalecte-find-synonyms-at-point)) :config (grammalecte-download-grammalecte) (flycheck-grammalecte-setup)) LTeX/LanguageTool Originally, LTeX LS stands for LaTeX Language Server, it acts as a Language Server for LaTeX, but not only. It can check the grammar and the spelling of several markup languages such as BibTeX, ConTeXt, LaTeX, Markdown, Org, reStructuredText\u0026hellip; and others. Alongside, it provides interfacing with LanguageTool to implement natural language checking.\n(after! lsp-ltex (setq lsp-ltex-language \u0026#34;auto\u0026#34; lsp-ltex-mother-tongue +my/lang-mother-tongue flycheck-checker-error-threshold 1000) (advice-add \u0026#39;+lsp-ltex-setup :after (lambda () (setq-local lsp-idle-delay 5.0 lsp-progress-function #\u0026#39;lsp-on-progress-legacy lsp-progress-spinner-type \u0026#39;half-circle lsp-ui-sideline-show-code-actions nil lsp-ui-sideline-show-diagnostics nil lsp-ui-sideline-enable nil))) ;; FIXME (defun +lsp-ltex-check-document () (interactive) (when-let ((file (buffer-file-name))) (let* ((uri (lsp--path-to-uri file)) (beg (region-beginning)) (end (region-end)) (req (if (region-active-p) `(:uri ,uri :range ,(lsp--region-to-range beg end)) `(:uri ,uri)))) (lsp-send-execute-command \u0026#34;_ltex.checkDocument\u0026#34; req))))) Go Translate (Google, Bing and DeepL) (package! go-translate :recipe (:host github :repo \u0026#34;lorniu/go-translate\u0026#34;) :pin \u0026#34;8bbcbce42a7139f079df3e9b9bda0def2cbb690f\u0026#34;) (use-package! go-translate :commands (gts-do-translate +gts-yank-translated-region +gts-translate-with) :init ;; Your languages pairs (setq gts-translate-list (list (list +my/lang-main +my/lang-secondary) (list +my/lang-main +my/lang-mother-tongue) (list +my/lang-secondary +my/lang-mother-tongue) (list +my/lang-secondary +my/lang-main))) (map! :localleader :map (org-mode-map markdown-mode-map latex-mode-map text-mode-map) :desc \u0026#34;Yank translated region\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;+gts-yank-translated-region) (map! :leader :prefix \u0026#34;l\u0026#34; (:prefix (\u0026#34;G\u0026#34; . \u0026#34;go-translate\u0026#34;) :desc \u0026#34;Bing\u0026#34; \u0026#34;b\u0026#34; (lambda () (interactive) (+gts-translate-with \u0026#39;bing)) :desc \u0026#34;DeepL\u0026#34; \u0026#34;d\u0026#34; (lambda () (interactive) (+gts-translate-with \u0026#39;deepl)) :desc \u0026#34;Google\u0026#34; \u0026#34;g\u0026#34; (lambda () (interactive) (+gts-translate-with)) :desc \u0026#34;Yank translated region\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;+gts-yank-translated-region :desc \u0026#34;gts-do-translate\u0026#34; \u0026#34;t\u0026#34; #\u0026#39;gts-do-translate)) :config ;; Config the default translator, which will be used by the command `gts-do-translate\u0026#39; (setq gts-default-translator (gts-translator ;; Used to pick source text, from, to. choose one. :picker (gts-prompt-picker) ;; One or more engines, provide a parser to give different output. :engines (gts-google-engine :parser (gts-google-summary-parser)) ;; Render, only one, used to consumer the output result. :render (gts-buffer-render))) ;; Custom texter which remove newlines in the same paragraph (defclass +gts-translate-paragraph (gts-texter) ()) (cl-defmethod gts-text ((_ +gts-translate-paragraph)) (when (use-region-p) (let ((text (buffer-substring-no-properties (region-beginning) (region-end)))) (with-temp-buffer (insert text) (goto-char (point-min)) (let ((case-fold-search nil)) (while (re-search-forward \u0026#34;\\n[^\\n]\u0026#34; nil t) (replace-region-contents (- (point) 2) (- (point) 1) (lambda (\u0026amp;optional a b) \u0026#34; \u0026#34;))) (buffer-string)))))) ;; Custom picker to use the paragraph texter (defclass +gts-paragraph-picker (gts-picker) ((texter :initarg :texter :initform (+gts-translate-paragraph)))) (cl-defmethod gts-pick ((o +gts-paragraph-picker)) (let ((text (gts-text (oref o texter)))) (when (or (null text) (zerop (length text))) (user-error \u0026#34;Make sure there is any word at point, or selection exists\u0026#34;)) (let ((path (gts-path o text))) (setq gts-picker-current-path path) (cl-values text path)))) (defun +gts-yank-translated-region () (interactive) (gts-translate (gts-translator :picker (+gts-paragraph-picker) :engines (gts-google-engine) :render (gts-kill-ring-render)))) (defun +gts-translate-with (\u0026amp;optional engine) (interactive) (gts-translate (gts-translator :picker (+gts-paragraph-picker) :engines (cond ((eq engine \u0026#39;deepl) (gts-deepl-engine :auth-key ;; Get API key from ~/.authinfo.gpg (machine api-free.deepl.com) (funcall (plist-get (car (auth-source-search :host \u0026#34;api-free.deepl.com\u0026#34; :max 1)) :secret)) :pro nil)) ((eq engine \u0026#39;bing) (gts-bing-engine)) (t (gts-google-engine))) :render (gts-buffer-render))))) Offline dictionaries Needs sdcv to be installed, needs also StarDict dictionaries, you can download some from here and here for french.\n(package! lexic :recipe (:host github :repo \u0026#34;tecosaur/lexic\u0026#34;) :pin \u0026#34;f9b3de4d9c2dd1ce5022383e1a504b87bf7d1b09\u0026#34;) (use-package! lexic :commands (lexic-search lexic-list-dictionary) :config (map! :map lexic-mode-map :n \u0026#34;q\u0026#34; #\u0026#39;lexic-return-from-lexic :nv \u0026#34;RET\u0026#34; #\u0026#39;lexic-search-word-at-point :n \u0026#34;a\u0026#34; #\u0026#39;outline-show-all :n \u0026#34;h\u0026#34; (cmd! (outline-hide-sublevels 3)) :n \u0026#34;o\u0026#34; #\u0026#39;lexic-toggle-entry :n \u0026#34;n\u0026#34; #\u0026#39;lexic-next-entry :n \u0026#34;N\u0026#34; (cmd! (lexic-next-entry t)) :n \u0026#34;p\u0026#34; #\u0026#39;lexic-previous-entry :n \u0026#34;P\u0026#34; (cmd! (lexic-previous-entry t)) :n \u0026#34;E\u0026#34; (cmd! (lexic-return-from-lexic) ; expand (switch-to-buffer (lexic-get-buffer))) :n \u0026#34;M\u0026#34; (cmd! (lexic-return-from-lexic) ; minimise (lexic-goto-lexic)) :n \u0026#34;C-p\u0026#34; #\u0026#39;lexic-search-history-backwards :n \u0026#34;C-n\u0026#34; #\u0026#39;lexic-search-history-forwards :n \u0026#34;/\u0026#34; (cmd! (call-interactively #\u0026#39;lexic-search)))) System tools Disk usage (package! disk-usage :pin \u0026#34;8792032bb8e7a6ab8a8a9bef89a3964e67bb3cef\u0026#34;) (use-package! disk-usage :commands (disk-usage)) Chezmoi (package! chezmoi :pin \u0026#34;781783c483bc8fcdba3a230bb774c3a8a5ebe396\u0026#34;) (use-package! chezmoi :when CHEZMOI-P :commands (chezmoi-write chezmoi-magit-status chezmoi-diff chezmoi-ediff chezmoi-find chezmoi-write-files chezmoi-open-other chezmoi-template-buffer-display chezmoi-mode) :config ;; Company integration (when (modulep! :completion company) (defun +chezmoi--company-backend-h () (require \u0026#39;chezmoi-company) (if chezmoi-mode (add-to-list \u0026#39;company-backends \u0026#39;chezmoi-company-backend) (delete \u0026#39;chezmoi-company-backend \u0026#39;company-backends))) (add-hook \u0026#39;chezmoi-mode-hook #\u0026#39;+chezmoi--company-backend-h)) ;; Integrate with evil mode by toggling template display when entering insert mode. (when (modulep! :editor evil) (defun +chezmoi--evil-insert-state-enter-h () \u0026#34;Run after evil-insert-state-entry.\u0026#34; (chezmoi-template-buffer-display nil (point)) (remove-hook \u0026#39;after-change-functions #\u0026#39;chezmoi-template--after-change 1)) (defun +chezmoi--evil-insert-state-exit-h () \u0026#34;Run after evil-insert-state-exit.\u0026#34; (chezmoi-template-buffer-display nil) (chezmoi-template-buffer-display t) (add-hook \u0026#39;after-change-functions #\u0026#39;chezmoi-template--after-change nil 1)) (defun +chezmoi--evil-h () (if chezmoi-mode (progn (add-hook \u0026#39;evil-insert-state-entry-hook #\u0026#39;+chezmoi--evil-insert-state-enter-h nil 1) (add-hook \u0026#39;evil-insert-state-exit-hook #\u0026#39;+chezmoi--evil-insert-state-exit-h nil 1)) (progn (remove-hook \u0026#39;evil-insert-state-entry-hook #\u0026#39;+chezmoi--evil-insert-state-enter-h 1) (remove-hook \u0026#39;evil-insert-state-exit-hook #\u0026#39;+chezmoi--evil-insert-state-exit-h 1)))) (add-hook \u0026#39;chezmoi-mode-hook #\u0026#39;+chezmoi--evil-h))) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:prefix (\u0026#34;t\u0026#34; . \u0026#34;tools\u0026#34;) (:when CHEZMOI-P :prefix (\u0026#34;c\u0026#34; . \u0026#34;chezmoi\u0026#34;) :desc \u0026#34;Magit status\u0026#34; \u0026#34;g\u0026#34; #\u0026#39;chezmoi-magit-status :desc \u0026#34;Write\u0026#34; \u0026#34;w\u0026#34; #\u0026#39;chezmoi-write :desc \u0026#34;Write files\u0026#34; \u0026#34;W\u0026#34; #\u0026#39;chezmoi-write-files :desc \u0026#34;Find source\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;chezmoi-find :desc \u0026#34;Sync files\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;chezmoi-sync-files :desc \u0026#34;Diff\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;chezmoi-diff :desc \u0026#34;EDiff\u0026#34; \u0026#34;e\u0026#34; #\u0026#39;chezmoi-ediff :desc \u0026#34;Open other\u0026#34; \u0026#34;o\u0026#34; #\u0026#39;chezmoi-open-other))) Aweshell (package! aweshell :recipe (:host github :repo \u0026#34;manateelazycat/aweshell\u0026#34;) :pin \u0026#34;d246df619573ca3f46070cc0ac82d024271ed243\u0026#34;) (use-package! aweshell :commands (aweshell-new aweshell-dedicated-open)) Lemon (package! lemon :recipe (:host nil :repo \u0026#34;https://codeberg.org/emacs-weirdware/lemon.git\u0026#34;) :pin \u0026#34;37a6e6d6ef0900ca19c820a2dbc122c7fe6d86cf\u0026#34;) (use-package! lemon :commands (lemon-mode lemon-display) :config (require \u0026#39;lemon-cpu) (require \u0026#39;lemon-memory) (require \u0026#39;lemon-network) (setq lemon-delay 5 lemon-refresh-rate 2 lemon-monitors (list \u0026#39;((lemon-cpufreq-linux :display-opts \u0026#39;(:sparkline (:type gridded))) (lemon-cpu-linux) (lemon-memory-linux) (lemon-linux-network-tx) (lemon-linux-network-rx))))) eCryptfs (when ECRYPTFS-P (defvar +ecryptfs-private-dir \u0026#34;Private\u0026#34;) (defvar +ecryptfs-buffer-name \u0026#34;*emacs-ecryptfs*\u0026#34;) (defvar +ecryptfs-config-dir (expand-file-name \u0026#34;~/.ecryptfs\u0026#34;)) (defvar +ecryptfs-passphrase-gpg (expand-file-name \u0026#34;~/.ecryptfs/my-pass.gpg\u0026#34;)) (defvar +ecryptfs--wrapping-independent-p (not (null (expand-file-name \u0026#34;wrapping-independent\u0026#34; +ecryptfs-config-dir)))) (defvar +ecryptfs--wrapped-passphrase-file (expand-file-name \u0026#34;wrapped-passphrase\u0026#34; +ecryptfs-config-dir)) (defvar +ecryptfs--mount-passphrase-sig-file (concat (expand-file-name +ecryptfs-private-dir +ecryptfs-config-dir) \u0026#34;.sig\u0026#34;)) (defvar +ecryptfs--mount-private-cmd \u0026#34;/sbin/mount.ecryptfs_private\u0026#34;) (defvar +ecryptfs--umount-private-cmd \u0026#34;/sbin/umount.ecryptfs_private\u0026#34;) (defvar +ecryptfs--passphrase (lambda () (s-trim-right ;; To remove the new line (epg-decrypt-file (epg-make-context) +ecryptfs-passphrase-gpg nil)))) (defvar +ecryptfs--encrypt-filenames-p (not (eq 1 (with-temp-buffer (insert-file-contents +ecryptfs--mount-passphrase-sig-file) (count-lines (point-min) (point-max)))))) (defvar +ecryptfs--command-format (if +ecryptfs--encrypt-filenames-p \u0026#34;ecryptfs-insert-wrapped-passphrase-into-keyring %s \u0026#39;%s\u0026#39;\u0026#34; \u0026#34;ecryptfs-unwrap-passphrase %s \u0026#39;%s\u0026#39; | ecryptfs-add-passphrase -\u0026#34;)) (defun +ecryptfs-mount-private () (interactive) (unless (and (file-exists-p +ecryptfs--wrapped-passphrase-file) (file-exists-p +ecryptfs--mount-passphrase-sig-file)) (error \u0026#34;Encrypted private directory \\\u0026#34;%s\\\u0026#34; is not setup properly.\u0026#34; +ecryptfs-private-dir) (return)) (let ((try-again t)) (while (and ;; In the first iteration, we try to silently mount the ecryptfs private directory, ;; this would succeed if the key is available in the keyring. (shell-command +ecryptfs--mount-private-cmd +ecryptfs-buffer-name) try-again) (setq try-again nil) (message \u0026#34;Encrypted filenames mode [%s].\u0026#34; (if +ecryptfs--encrypt-filenames-p \u0026#34;ENABLED\u0026#34; \u0026#34;DISABLED\u0026#34;)) (shell-command (format +ecryptfs--command-format +ecryptfs--wrapped-passphrase-file (funcall +ecryptfs--passphrase)) +ecryptfs-buffer-name)) (message \u0026#34;Ecryptfs mount private.\u0026#34;))) (defun +ecryptfs-umount-private () (interactive) (while (string-match-p \u0026#34;Sessions still open, not unmounting\u0026#34; (shell-command-to-string +ecryptfs--umount-private-cmd))) (message \u0026#34;Unmounted private directory.\u0026#34;))) (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:prefix (\u0026#34;t\u0026#34; . \u0026#34;tools\u0026#34;) (:when ECRYPTFS-P :prefix (\u0026#34;e\u0026#34; . \u0026#34;ecryptfs\u0026#34;) :desc \u0026#34;eCryptfs mount private\u0026#34; \u0026#34;e\u0026#34; #\u0026#39;+ecryptfs-mount-private :desc \u0026#34;eCryptfs un-mount private\u0026#34; \u0026#34;E\u0026#34; #\u0026#39;+ecryptfs-umount-private))) Features Workspaces (map! :leader (:when (modulep! :ui workspaces) :prefix (\u0026#34;TAB\u0026#34; . \u0026#34;workspace\u0026#34;) :desc \u0026#34;Display tab bar\u0026#34; \u0026#34;TAB\u0026#34; #\u0026#39;+workspace/display :desc \u0026#34;Switch workspace\u0026#34; \u0026#34;.\u0026#34; #\u0026#39;+workspace/switch-to :desc \u0026#34;Switch to last workspace\u0026#34; \u0026#34;$\u0026#34; #\u0026#39;+workspace/other ;; Modified :desc \u0026#34;New workspace\u0026#34; \u0026#34;n\u0026#34; #\u0026#39;+workspace/new :desc \u0026#34;New named workspace\u0026#34; \u0026#34;N\u0026#34; #\u0026#39;+workspace/new-named :desc \u0026#34;Load workspace from file\u0026#34; \u0026#34;l\u0026#34; #\u0026#39;+workspace/load :desc \u0026#34;Save workspace to file\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;+workspace/save :desc \u0026#34;Delete session\u0026#34; \u0026#34;x\u0026#34; #\u0026#39;+workspace/kill-session :desc \u0026#34;Delete this workspace\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;+workspace/delete :desc \u0026#34;Rename workspace\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;+workspace/rename :desc \u0026#34;Restore last session\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;+workspace/restore-last-session :desc \u0026#34;Next workspace\u0026#34; \u0026#34;\u0026gt;\u0026#34; #\u0026#39;+workspace/switch-right ;; Modified :desc \u0026#34;Previous workspace\u0026#34; \u0026#34;\u0026lt;\u0026#34; #\u0026#39;+workspace/switch-left ;; Modified :desc \u0026#34;Switch to 1st workspace\u0026#34; \u0026#34;1\u0026#34; #\u0026#39;+workspace/switch-to-0 :desc \u0026#34;Switch to 2nd workspace\u0026#34; \u0026#34;2\u0026#34; #\u0026#39;+workspace/switch-to-1 :desc \u0026#34;Switch to 3rd workspace\u0026#34; \u0026#34;3\u0026#34; #\u0026#39;+workspace/switch-to-2 :desc \u0026#34;Switch to 4th workspace\u0026#34; \u0026#34;4\u0026#34; #\u0026#39;+workspace/switch-to-3 :desc \u0026#34;Switch to 5th workspace\u0026#34; \u0026#34;5\u0026#34; #\u0026#39;+workspace/switch-to-4 :desc \u0026#34;Switch to 6th workspace\u0026#34; \u0026#34;6\u0026#34; #\u0026#39;+workspace/switch-to-5 :desc \u0026#34;Switch to 7th workspace\u0026#34; \u0026#34;7\u0026#34; #\u0026#39;+workspace/switch-to-6 :desc \u0026#34;Switch to 8th workspace\u0026#34; \u0026#34;8\u0026#34; #\u0026#39;+workspace/switch-to-7 :desc \u0026#34;Switch to 9th workspace\u0026#34; \u0026#34;9\u0026#34; #\u0026#39;+workspace/switch-to-8 :desc \u0026#34;Switch to final workspace\u0026#34; \u0026#34;0\u0026#34; #\u0026#39;+workspace/switch-to-final)) Weather (package! wttrin :recipe `(:local-repo ,(expand-file-name \u0026#34;lisp/wttrin\u0026#34; doom-user-dir)) :pin \u0026#34;df5427ce2a5ad4dab652dbb1c4a1834d7ddc2abc\u0026#34;) ;; https://raw.githubusercontent.com/tecosaur/emacs-config/master/lisp/wttrin/wttrin.el (use-package! wttrin :commands wttrin) OpenStreetMap (package! osm :pin \u0026#34;808baabecd9882736b240e6ea9344047aeb669e2\u0026#34;) (use-package! osm :commands (osm-home osm-search osm-server osm-goto osm-gpx-show osm-bookmark-jump) :custom ;; Take a look at the customization group `osm\u0026#39; for more options. (osm-server \u0026#39;default) ;; Configure the tile server (osm-copyright t) ;; Display the copyright information :init (setq osm-tile-directory (expand-file-name \u0026#34;osm\u0026#34; doom-data-dir)) ;; Load Org link support (with-eval-after-load \u0026#39;org (require \u0026#39;osm-ol))) Islamic prayer times (package! awqat :recipe (:host github :repo \u0026#34;zkry/awqat\u0026#34;) :pin \u0026#34;72b821aad0cb16165e27643c7d968e1528f00f8d\u0026#34;) (use-package! awqat :commands (awqat-display-prayer-time-mode awqat-times-for-day) :config ;; Make sure `calendar-latitude\u0026#39; and `calendar-longitude\u0026#39; are set, ;; otherwise, set them here. (setq awqat-asr-hanafi nil awqat-mode-line-format \u0026#34; 🕌 ${prayer} (${hours}h${minutes}m) \u0026#34;) (awqat-set-preset-french-muslims)) Info colors Better colors for manual pages.\n(package! info-colors :pin \u0026#34;47ee73cc19b1049eef32c9f3e264ea7ef2aaf8a5\u0026#34;) (use-package! info-colors :commands (info-colors-fontify-node)) (add-hook \u0026#39;Info-selection-hook \u0026#39;info-colors-fontify-node) Zotero Zotxt (package! zotxt :pin \u0026#34;96a132d6b39f6bc19a58913b761d42efc198f8a4\u0026#34;) (use-package! zotxt :when ZOTERO-P :commands org-zotxt-mode) CRDT Collaborative editing for geeks! crdt.el adds support for Conflict-free Replicated Data Type.\n(package! crdt :pin \u0026#34;ec0b9cc652c0e980d5865abbba7cbffefea6e8cc\u0026#34;) (use-package! crdt :commands (crdt-share-buffer crdt-connect) :init (cond (TUNTOX-P (setq crdt-use-tuntox t crdt-tuntox-password-in-url t)) (STUNNEL-P (setq crdt-use-stunnel t)))) The Silver Searcher An Emacs front-end to The Silver Searcher, first we need to install ag using sudo pacman -S the_silver_searcher.\n(package! ag :pin \u0026#34;ed7e32064f92f1315cecbfc43f120bbc7508672c\u0026#34;) (use-package! ag :when AG-P :commands (ag ag-files ag-regexp ag-project ag-project-files ag-project-regexp)) Page break lines A feature that displays ugly form feed characters as tidy horizontal rules. Inspired by M-EMACS.\n(package! page-break-lines :pin \u0026#34;79eca86e0634ac68af862e15c8a236c37f446dcd\u0026#34;) (use-package! page-break-lines :diminish :init (global-page-break-lines-mode)) Emacs Application Framework EAF is presented as: A free/libre and open-source extensible framework that revolutionizes the graphical capabilities of Emacs. Or the key to ultimately Live in Emacs.\nFirst, install EAF as specified in the project\u0026rsquo;s readme. To update EAF, we need to run git pull ; ./install-eaf.py in lisp/emacs-application-framework and (M-x eaf-install-and-update) in Emacs. This updates EAF, applications and their dependencies.\n(use-package! eaf :when EAF-P :load-path EAF-DIR :commands (eaf-open eaf-open-browser eaf-open-jupyter +eaf-open-mail-as-html) :init (defvar +eaf-enabled-apps \u0026#39;(org browser mindmap jupyter org-previewer markdown-previewer file-sender video-player)) (defun +eaf-app-p (app-symbol) (memq app-symbol +eaf-enabled-apps)) (when (+eaf-app-p \u0026#39;browser) ;; Make EAF Browser my default browser (setq browse-url-browser-function #\u0026#39;eaf-open-browser) (defalias \u0026#39;browse-web #\u0026#39;eaf-open-browser) (map! :localleader :map (mu4e-headers-mode-map mu4e-view-mode-map) :desc \u0026#34;Open mail as HTML\u0026#34; \u0026#34;h\u0026#34; #\u0026#39;+eaf-open-mail-as-html :desc \u0026#34;Open URL (EAF)\u0026#34; \u0026#34;o\u0026#34; #\u0026#39;eaf-open-browser)) (when (+eaf-app-p \u0026#39;pdf-viewer) (after! org ;; Use EAF PDF Viewer in Org (defun +eaf--org-open-file-fn (file \u0026amp;optional link) \u0026#34;An wrapper function on `eaf-open\u0026#39;.\u0026#34; (eaf-open file)) ;; use `emacs-application-framework\u0026#39; to open PDF file: link (add-to-list \u0026#39;org-file-apps \u0026#39;(\u0026#34;\\\\.pdf\\\\\u0026#39;\u0026#34; . +eaf--org-open-file-fn))) (after! latex ;; Link EAF with the LaTeX compiler in emacs. When a .tex file is open, ;; the Command\u0026gt;Compile and view (C-c C-a) option will compile the .tex ;; file into a .pdf file and display it using EAF. Double clicking on the ;; PDF side jumps to editing the clicked section. (add-to-list \u0026#39;TeX-command-list \u0026#39;(\u0026#34;XeLaTeX\u0026#34; \u0026#34;%`xelatex --synctex=1%(mode)%\u0026#39; %t\u0026#34; TeX-run-TeX nil t)) (add-to-list \u0026#39;TeX-view-program-list \u0026#39;(\u0026#34;eaf\u0026#34; eaf-pdf-synctex-forward-view)) (add-to-list \u0026#39;TeX-view-program-selection \u0026#39;(output-pdf \u0026#34;eaf\u0026#34;)))) :config ;; Generic (setq eaf-start-python-process-when-require t eaf-kill-process-after-last-buffer-closed t eaf-fullscreen-p nil) ;; Debug (setq eaf-enable-debug nil) ;; Web engine (setq eaf-webengine-font-family (symbol-name (font-get doom-font :family)) eaf-webengine-fixed-font-family (symbol-name (font-get doom-font :family)) eaf-webengine-serif-font-family (symbol-name (font-get doom-serif-font :family)) eaf-webengine-font-size 16 eaf-webengine-fixed-font-size 16 eaf-webengine-enable-scrollbar t eaf-webengine-scroll-step 200 eaf-webengine-default-zoom 1.25 eaf-webengine-show-hover-link t eaf-webengine-download-path \u0026#34;~/Downloads\u0026#34; eaf-webengine-enable-plugin t eaf-webengine-enable-javascript t eaf-webengine-enable-javascript-access-clipboard t) (when (display-graphic-p) (require \u0026#39;eaf-all-the-icons) (mapc (lambda (v) (eaf-all-the-icons-icon (car v))) eaf-all-the-icons-alist)) ;; Browser settings (when (+eaf-app-p \u0026#39;browser) (setq eaf-browser-continue-where-left-off t eaf-browser-dark-mode nil ;; \u0026#34;follow\u0026#34; eaf-browser-enable-adblocker t eaf-browser-enable-autofill nil eaf-browser-remember-history t eaf-browser-ignore-history-list \u0026#39;(\u0026#34;google.com/search\u0026#34; \u0026#34;file://\u0026#34;) eaf-browser-text-selection-color \u0026#34;auto\u0026#34; eaf-browser-translate-language +my/lang-main eaf-browser-blank-page-url \u0026#34;https://www.duckduckgo.com\u0026#34; eaf-browser-chrome-history-file \u0026#34;~/.config/google-chrome/Default/History\u0026#34; eaf-browser-default-search-engine \u0026#34;duckduckgo\u0026#34; eaf-browser-continue-where-left-off t eaf-browser-aria2-auto-file-renaming t) (require \u0026#39;eaf-browser) (defun +eaf-open-mail-as-html () \u0026#34;Open the html mail in EAF Browser.\u0026#34; (interactive) (let ((msg (mu4e-message-at-point t)) ;; Bind browse-url-browser-function locally, so it works ;; even if EAF Browser is not set as a default browser. (browse-url-browser-function #\u0026#39;eaf-open-browser)) (if msg (mu4e-action-view-in-browser msg) (message \u0026#34;No message at point.\u0026#34;))))) ;; File manager settings (when (+eaf-app-p \u0026#39;file-manager) (setq eaf-file-manager-show-preview nil eaf-find-alternate-file-in-dired t eaf-file-manager-show-hidden-file t eaf-file-manager-show-icon t) (require \u0026#39;eaf-file-manager)) ;; File Browser (when (+eaf-app-p \u0026#39;file-browser) (require \u0026#39;eaf-file-browser)) ;; PDF Viewer settings (when (+eaf-app-p \u0026#39;pdf-viewer) (setq eaf-pdf-dark-mode \u0026#34;follow\u0026#34; eaf-pdf-show-progress-on-page nil eaf-pdf-dark-exclude-image t eaf-pdf-notify-file-changed t) (require \u0026#39;eaf-pdf-viewer)) ;; Org (when (+eaf-app-p \u0026#39;rss-reader) (setq eaf-rss-reader-split-horizontally nil eaf-rss-reader-web-page-other-window t) (require \u0026#39;eaf-org)) ;; Org (when (+eaf-app-p \u0026#39;org) (require \u0026#39;eaf-org)) ;; Mail ;; BUG The `eaf-open-mail-as-html\u0026#39; is not working, ;; I use `+eaf-open-mail-as-html\u0026#39; instead (when (+eaf-app-p \u0026#39;mail) (require \u0026#39;eaf-mail)) ;; Org Previewer (when (+eaf-app-p \u0026#39;org-previewer) (setq eaf-org-dark-mode \u0026#34;follow\u0026#34;) (require \u0026#39;eaf-org-previewer)) ;; Markdown Previewer (when (+eaf-app-p \u0026#39;markdown-previewer) (setq eaf-markdown-dark-mode \u0026#34;follow\u0026#34;) (require \u0026#39;eaf-markdown-previewer)) ;; Jupyter (when (+eaf-app-p \u0026#39;jupyter) (setq eaf-jupyter-dark-mode \u0026#34;follow\u0026#34; eaf-jupyter-font-family (symbol-name (font-get doom-font :family)) eaf-jupyter-font-size 13) (require \u0026#39;eaf-jupyter)) ;; Mindmap (when (+eaf-app-p \u0026#39;mindmap) (setq eaf-mindmap-dark-mode \u0026#34;follow\u0026#34; eaf-mindmap-save-path \u0026#34;~/Dropbox/Mindmap\u0026#34;) (require \u0026#39;eaf-mindmap)) ;; File Sender (when (+eaf-app-p \u0026#39;file-sender) (require \u0026#39;eaf-file-sender)) ;; Music Player (when (+eaf-app-p \u0026#39;music-player) (require \u0026#39;eaf-music-player)) ;; Video Player (when (+eaf-app-p \u0026#39;video-player) (setq eaf-video-player-keybinding \u0026#39;((\u0026#34;p\u0026#34; . \u0026#34;toggle_play\u0026#34;) (\u0026#34;q\u0026#34; . \u0026#34;close_buffer\u0026#34;) (\u0026#34;h\u0026#34; . \u0026#34;play_backward\u0026#34;) (\u0026#34;l\u0026#34; . \u0026#34;play_forward\u0026#34;) (\u0026#34;j\u0026#34; . \u0026#34;decrease_volume\u0026#34;) (\u0026#34;k\u0026#34; . \u0026#34;increase_volume\u0026#34;) (\u0026#34;f\u0026#34; . \u0026#34;toggle_fullscreen\u0026#34;) (\u0026#34;R\u0026#34; . \u0026#34;restart\u0026#34;))) (require \u0026#39;eaf-video-player)) ;; Image Viewer (when (+eaf-app-p \u0026#39;image-viewer) (require \u0026#39;eaf-image-viewer)) ;; Git (when (+eaf-app-p \u0026#39;git) (require \u0026#39;eaf-git)) ;; Fix EVIL keybindings (after! evil (require \u0026#39;eaf-evil) (define-key key-translation-map (kbd \u0026#34;SPC\u0026#34;) (lambda (prompt) (if (derived-mode-p \u0026#39;eaf-mode) (pcase eaf--buffer-app-name (\u0026#34;browser\u0026#34; (if (eaf-call-sync \u0026#34;execute_function\u0026#34; eaf--buffer-id \u0026#34;is_focus\u0026#34;) (kbd \u0026#34;SPC\u0026#34;) (kbd eaf-evil-leader-key))) (\u0026#34;pdf-viewer\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;image-viewer\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;music-player\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;video-player\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;file-sender\u0026#34; (kbd eaf-evil-leader-key)) (\u0026#34;mindmap\u0026#34; (kbd eaf-evil-leader-key)) (_ (kbd \u0026#34;SPC\u0026#34;))) (kbd \u0026#34;SPC\u0026#34;)))))) Bitwarden (package! bitwarden :recipe (:host github :repo \u0026#34;seanfarley/emacs-bitwarden\u0026#34;) :pin \u0026#34;02d6410003a42e7fbeb4aa109aba949eea553706\u0026#34;) (use-package! bitwarden ;;:config ;;(bitwarden-auth-source-enable) :when BITWARDEN-P :init (setq bitwarden-automatic-unlock (lambda () (require \u0026#39;auth-source) (if-let* ((matches (auth-source-search :host \u0026#34;bitwarden.com\u0026#34; :max 1)) (entry (nth 0 matches)) (email (plist-get entry :user)) (pass (plist-get entry :secret))) (progn (setq bitwarden-user email) (if (functionp pass) (funcall pass) pass)) \u0026#34;\u0026#34;)))) PDF tools The pdf-tools package supports dark mode (midnight), I use Emacs often to write and read PDF documents, so let\u0026rsquo;s make it dark by default, this can be toggled using the m z.\n(after! pdf-tools ;; Auto install (pdf-tools-install-noverify) (setq-default pdf-view-image-relief 2 pdf-view-display-size \u0026#39;fit-page) (add-hook! \u0026#39;pdf-view-mode-hook (when (memq doom-theme \u0026#39;(modus-vivendi doom-one doom-dark+ doom-vibrant)) ;; TODO: find a more generic way to detect if we are in a dark theme (pdf-view-midnight-minor-mode 1))) ;; Color the background, so we can see the PDF page borders ;; https://protesilaos.com/emacs/modus-themes#h:ff69dfe1-29c0-447a-915c-b5ff7c5509cd (defun +pdf-tools-backdrop () (face-remap-add-relative \u0026#39;default `(:background ,(if (memq doom-theme \u0026#39;(modus-vivendi modus-operandi)) (modus-themes-color \u0026#39;bg-alt) (doom-color \u0026#39;bg-alt))))) (add-hook \u0026#39;pdf-tools-enabled-hook #\u0026#39;+pdf-tools-backdrop)) (after! pdf-links ;; Tweak for Modus and `pdf-links\u0026#39; (when (memq doom-theme \u0026#39;(modus-vivendi modus-operandi)) ;; https://protesilaos.com/emacs/modus-themes#h:2659d13e-b1a5-416c-9a89-7c3ce3a76574 (let ((spec (apply #\u0026#39;append (mapcar (lambda (name) (list name (face-attribute \u0026#39;pdf-links-read-link name nil \u0026#39;default))) \u0026#39;(:family :width :weight :slant))))) (setq pdf-links-read-link-convert-commands `(\u0026#34;-density\u0026#34; \u0026#34;96\u0026#34; \u0026#34;-family\u0026#34; ,(plist-get spec :family) \u0026#34;-stretch\u0026#34; ,(let* ((width (plist-get spec :width)) (name (symbol-name width))) (replace-regexp-in-string \u0026#34;-\u0026#34; \u0026#34;\u0026#34; (capitalize name))) \u0026#34;-weight\u0026#34; ,(pcase (plist-get spec :weight) (\u0026#39;ultra-light \u0026#34;Thin\u0026#34;) (\u0026#39;extra-light \u0026#34;ExtraLight\u0026#34;) (\u0026#39;light \u0026#34;Light\u0026#34;) (\u0026#39;semi-bold \u0026#34;SemiBold\u0026#34;) (\u0026#39;bold \u0026#34;Bold\u0026#34;) (\u0026#39;extra-bold \u0026#34;ExtraBold\u0026#34;) (\u0026#39;ultra-bold \u0026#34;Black\u0026#34;) (_weight \u0026#34;Normal\u0026#34;)) \u0026#34;-style\u0026#34; ,(pcase (plist-get spec :slant) (\u0026#39;italic \u0026#34;Italic\u0026#34;) (\u0026#39;oblique \u0026#34;Oblique\u0026#34;) (_slant \u0026#34;Normal\u0026#34;)) \u0026#34;-pointsize\u0026#34; \u0026#34;%P\u0026#34; \u0026#34;-undercolor\u0026#34; \u0026#34;%f\u0026#34; \u0026#34;-fill\u0026#34; \u0026#34;%b\u0026#34; \u0026#34;-draw\u0026#34; \u0026#34;text %X,%Y \u0026#39;%c\u0026#39;\u0026#34;))))) LTDR Add the tldr.el client for TLDR pages.\n(package! tldr :pin \u0026#34;d3fd2a809a266c005915026799121c78e8b358f0\u0026#34;) (use-package! tldr :commands (tldr-update-docs tldr) :init (setq tldr-enabled-categories \u0026#39;(\u0026#34;common\u0026#34; \u0026#34;linux\u0026#34; \u0026#34;osx\u0026#34; \u0026#34;sunos\u0026#34;))) FZF (package! fzf :pin \u0026#34;21912ebc7e1084aa88c9d8b7715e782a3978ed23\u0026#34;) (after! evil (evil-define-key \u0026#39;insert fzf-mode-map (kbd \u0026#34;ESC\u0026#34;) #\u0026#39;term-kill-subjob)) (define-minor-mode fzf-mode \u0026#34;Minor mode for the FZF buffer\u0026#34; :init-value nil :lighter \u0026#34; FZF\u0026#34; :keymap \u0026#39;((\u0026#34;C-c\u0026#34; . term-kill-subjob))) (defadvice! doom-fzf--override-start-args-a (original-fn \u0026amp;rest args) \u0026#34;Set the FZF minor mode with the fzf buffer.\u0026#34; :around #\u0026#39;fzf/start (message \u0026#34;called with args %S\u0026#34; args) (apply original-fn args) ;; set the FZF buffer to fzf-mode so we can hook ctrl+c (set-buffer \u0026#34;*fzf*\u0026#34;) (fzf-mode)) (defvar fzf/args \u0026#34;-x --print-query -m --tiebreak=index --expect=ctrl-v,ctrl-x,ctrl-t\u0026#34;) (use-package! fzf :commands (fzf fzf-projectile fzf-hg fzf-git fzf-git-files fzf-directory fzf-git-grep)) Fun Speed Type A game to practice speed typing in Emacs.\n(package! speed-type :pin \u0026#34;304cb8cd6c30d07577d7d864fd32858a29a73dba\u0026#34;) (use-package! speed-type :commands (speed-type-text)) 2048 Game (package! 2048-game :pin \u0026#34;87936ac2ff37f92daf7a69ae86ba226b031349e4\u0026#34;) (use-package! 2048-game :commands (2048-game)) Snow Let it snow in Emacs!\n(package! snow :pin \u0026#34;4cd41a703b730a6b59827853f06b98d91405df5a\u0026#34;) (use-package! snow :commands (snow)) xkcd (package! xkcd :recipe (:host github :repo \u0026#34;vibhavp/emacs-xkcd\u0026#34;) :pin \u0026#34;80011da2e7def8f65233d4e0d790ca60d287081d\u0026#34;) (use-package! xkcd :commands (xkcd-get xkcd) :config (setq xkcd-cache-dir (expand-file-name \u0026#34;xkcd/\u0026#34; doom-cache-dir) xkcd-cache-latest (expand-file-name \u0026#34;xkcd/latest\u0026#34; doom-cache-dir))) Applications Calendar (setq calendar-latitude 48.7 calendar-longitude 2.17 calendar-location-name \u0026#34;Orsay, FR\u0026#34; calendar-time-display-form \u0026#39;(24-hours \u0026#34;:\u0026#34; minutes (if time-zone \u0026#34; (\u0026#34;) time-zone (if time-zone \u0026#34;)\u0026#34;))) e-Books (nov) (package! nov :pin \u0026#34;cb5f45cbcfbcf263cdeb2d263eb15edefc8b07cb\u0026#34;) Use nov to read EPUB e-books.\n(use-package! nov :mode (\u0026#34;\\\\.epub\\\\\u0026#39;\u0026#34; . nov-mode) :config (map! :map nov-mode-map :n \u0026#34;RET\u0026#34; #\u0026#39;nov-scroll-up) (defun doom-modeline-segment--nov-info () (concat \u0026#34; \u0026#34; (propertize (cdr (assoc \u0026#39;creator nov-metadata)) \u0026#39;face \u0026#39;doom-modeline-project-parent-dir) \u0026#34; \u0026#34; (cdr (assoc \u0026#39;title nov-metadata)) \u0026#34; \u0026#34; (propertize (format \u0026#34;%d/%d\u0026#34; (1+ nov-documents-index) (length nov-documents)) \u0026#39;face \u0026#39;doom-modeline-info))) (advice-add \u0026#39;nov-render-title :override #\u0026#39;ignore) (defun +nov-mode-setup () (face-remap-add-relative \u0026#39;variable-pitch :family \u0026#34;Merriweather\u0026#34; :height 1.4 :width \u0026#39;semi-expanded) (face-remap-add-relative \u0026#39;default :height 1.3) (setq-local line-spacing 0.2 next-screen-context-lines 4 shr-use-colors nil) (require \u0026#39;visual-fill-column nil t) (setq-local visual-fill-column-center-text t visual-fill-column-width 80 nov-text-width 80) (visual-fill-column-mode 1) (hl-line-mode -1) (add-to-list \u0026#39;+lookup-definition-functions #\u0026#39;+lookup/dictionary-definition) (setq-local mode-line-format `((:eval (doom-modeline-segment--workspace-name)) (:eval (doom-modeline-segment--window-number)) (:eval (doom-modeline-segment--nov-info)) ,(propertize \u0026#34; %P \u0026#34; \u0026#39;face \u0026#39;doom-modeline-buffer-minor-mode) ,(propertize \u0026#34; \u0026#34; \u0026#39;face (if (doom-modeline--active) \u0026#39;mode-line \u0026#39;mode-line-inactive) \u0026#39;display `((space :align-to (- (+ right right-fringe right-margin) ,(* (let ((width (doom-modeline--font-width))) (or (and (= width 1) 1) (/ width (frame-char-width) 1.0))) (string-width (format-mode-line (cons \u0026#34;\u0026#34; \u0026#39;(:eval (doom-modeline-segment--major-mode)))))))))) (:eval (doom-modeline-segment--major-mode))))) (add-hook \u0026#39;nov-mode-hook #\u0026#39;+nov-mode-setup)) News feed (elfeed) Set RSS news feeds\n(setq elfeed-feeds \u0026#39;(\u0026#34;https://arxiv.org/rss/cs.RO\u0026#34; \u0026#34;https://interstices.info/feed\u0026#34; \u0026#34;https://this-week-in-rust.org/rss.xml\u0026#34; \u0026#34;https://planet.emacslife.com/atom.xml\u0026#34; \u0026#34;https://www.omgubuntu.co.uk/feed\u0026#34; \u0026#34;https://itsfoss.com/feed\u0026#34; \u0026#34;https://linuxhandbook.com/feed\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/robotics/fulltext\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/aerospace/fulltext\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/computing/fulltext\u0026#34; \u0026#34;https://spectrum.ieee.org/rss/blog/automaton/fulltext\u0026#34; \u0026#34;https://developers.redhat.com/blog/feed\u0026#34; \u0026#34;https://lwn.net/headlines/rss\u0026#34;)) VPN configuration NetExtender wrapper I store my NetExtender VPN parameters in a GPG encrypted file. The credentials file contains a line of private parameters to pass to netExtender, like this:\necho \u0026#34;-u \u0026lt;USERNAME\u0026gt; -d \u0026lt;DOMAINE\u0026gt; -p \u0026lt;PASSWORD\u0026gt; -s \u0026lt;SERVER_IP\u0026gt;\u0026#34; \\ | gpg -c \u0026gt; sslvpn.gpg Then I like to have a simple script which decrypt the credentials and launch a session via the netExtender command.\n#!/bin/bash if ! command -v netExtender \u0026amp;\u0026gt; /dev/null then echo \u0026#34;netExtender not found, installing from AUR using \u0026#39;yay\u0026#39;\u0026#34; yay -S netextender fi MY_LOGIN_PARAMS_FILE=\u0026#34;$HOME/.ssh/sslvpn.gpg\u0026#34; echo \u0026#34;Y\\n\u0026#34; | netExtender --auto-reconnect \\ $(gpg -q --for-your-eyes-only --no-tty -d \u0026#34;${MY_LOGIN_PARAMS_FILE}\u0026#34;) Emacs + NetExtender (when NETEXTENDER-P (defvar +netextender-process-name \u0026#34;netextender\u0026#34;) (defvar +netextender-buffer-name \u0026#34; *NetExtender*\u0026#34;) (defvar +netextender-command \u0026#39;(\u0026#34;~/.local/bin/netextender\u0026#34;)) (defun +netextender-start () \u0026#34;Launch a NetExtender VPN session\u0026#34; (interactive) (unless (get-process +netextender-process-name) (if (make-process :name +netextender-process-name :buffer +netextender-buffer-name :command +netextender-command) (message \u0026#34;Started NetExtender VPN session\u0026#34;) (message \u0026#34;Cannot start NetExtender\u0026#34;)))) (defun +netextender-kill () \u0026#34;Kill the created NetExtender VPN session\u0026#34; (interactive) (when (get-process +netextender-process-name) (if (kill-buffer +netextender-buffer-name) (message \u0026#34;Killed NetExtender VPN session\u0026#34;) (message \u0026#34;Cannot kill NetExtender\u0026#34;)))) (map! :leader :prefix (\u0026#34;l\u0026#34;) (:prefix (\u0026#34;t\u0026#34;) (:prefix (\u0026#34;n\u0026#34; . \u0026#34;netExtender\u0026#34;) :desc \u0026#34;Start\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;+netextender-start :desc \u0026#34;Kill\u0026#34; \u0026#34;k\u0026#34; #\u0026#39;+netextender-kill)))) Email (mu4e) Configuring mu4e as email client needs three parts:\nIncoming mail configuration IMAP (using mbsync) Outgoing mail configuration SMTP (using smtpmail or msmtp) Email indexer and viewer (via mu and mu4e) IMAP (mbsync) You will need to:\nInstall mu and isync (sudo pacman -S mu isync) Set up a proper configuration file for your accounts at ~/.mbsyncrc Run mu init --maildir=~/Maildir --my-address=user@host1 --my-address=user@host2 Run mbsync -c ~/.mbsyncrc -a For sending mails from mu4e, add a ~/.authinfo file, file contains a line in this format machine MAIL.DOMAIN.TLD login USER port 587 password PASSWD Encrypt the ~/.authinfo file using GPG gpg -c ~/.authinfo and delete the original unencrypted file. I use a mbsyncrc file for multi-accounts, with some hacks for Gmail accounts (to rename the [Gmail]/... folders). Here is an explained configuration example.\nIn the configuration file, there is a parameter named Pass which should be set to the password in plain text. Most of the examples you can find online uses this parameter, but in real life, nobody uses it, it is extremely unsafe to put the password in plain text configuration file. Instead, mbsync configuration file provides the alternative PassCmd parameter, which can be set to an arbitrary shell command which gets the password for you. You can set it for example to call the pass password manager to output the account password, or to bw command (for Bitwarden users). For me, I\u0026rsquo;m using it with Emacs' ~/.authinfo.gpg, the PassCmd in my configuration uses GPG and awk to decrypt and filter the file content to find the required account\u0026rsquo;s password. I set PassCmd to something like this:\ngpg -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp\\.googlemail\\.com login username@gmail\\.com/ {print $NF}\u0026#39; Remember the line format in the ~/.authinfo.gpg file:\nmachine smtp.googlemail.com login username@gmail.com port 587 password PASSWD This PassCmd command above, decrypts the ~/.authinfo.gpg, passes it to awk to search the line containing \u0026quot;machine smtp.googlemail.com login username@gmail.com\u0026quot; and prints the last field (the last field $NF in the awk command corresponds to the password, as you can see in the line format).\nThe whole ~/.mbsync file should look like this:\n# mbsync config file # GLOBAL OPTIONS BufferLimit 50mb # Global option: Default buffer size is 10M, too small for modern machines. Sync All # Channels global: Sync everything \u0026#34;Pull Push New ReNew Delete Flags\u0026#34; (default option) Create Both # Channels global: Automatically create missing mailboxes on both sides Expunge Both # Channels global: Delete messages marked for deletion on both sides CopyArrivalDate yes # Channels global: Propagate arrival time with the messages # SECTION (IMAP4 Accounts) IMAPAccount work # IMAP Account name Host mail.host.ccc # The host to connect to User user@host.ccc # Login user name SSLVersions TLSv1.2 TLSv1.1 # Supported SSL versions # Extract password from encrypted ~/.authinfo.gpg # File format: \u0026#34;machine \u0026lt;SERVER\u0026gt; login \u0026lt;LOGIN\u0026gt; port \u0026lt;PORT\u0026gt; password \u0026lt;PASSWORD\u0026gt;\u0026#34; # This uses sed to extract \u0026lt;PASSWORD\u0026gt; from line matching the account\u0026#39;s \u0026lt;SERVER\u0026gt; PassCmd \u0026#34;gpg2 -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.domain.tld/ {print $NF}\u0026#39;\u0026#34; AuthMechs * # Authentication mechanisms SSLType IMAPS # Protocol (STARTTLS/IMAPS) CertificateFile /etc/ssl/certs/ca-certificates.crt # END OF SECTION # IMPORTANT NOTE: you need to keep the blank line after each section # SECTION (IMAP Stores) IMAPStore work-remote # Remote storage name Account work # Associated account # END OF SECTION # SECTION (Maildir Stores) MaildirStore work-local # Local storage (create directories with mkdir -p ~/Maildir/\u0026lt;ACCOUNT-NAME\u0026gt;) Path ~/Maildir/work/ # The local store path Inbox ~/Maildir/work/Inbox # Location of the INBOX SubFolders Verbatim # Download all sub-folders # END OF SECTION # Connections specify links between remote and local folders # they are specified using patterns, which match remote mail # folders. Some commonly used patters include: # # - \u0026#34;*\u0026#34; to match everything # - \u0026#34;!DIR\u0026#34; to exclude \u0026#34;DIR\u0026#34; # - \u0026#34;DIR\u0026#34; to match DIR # # SECTION (Channels) Channel work # Channel name Far :work-remote: # Connect remote store Near :work-local: # to the local one Patterns \u0026#34;INBOX\u0026#34; \u0026#34;Drafts\u0026#34; \u0026#34;Sent\u0026#34; \u0026#34;Archives/*\u0026#34; \u0026#34;Spam\u0026#34; \u0026#34;Trash\u0026#34; SyncState * # Save state in near side mailbox file \u0026#34;.mbsyncstate\u0026#34; # END OF SECTION # ================================================================================= IMAPAccount gmail Host imap.gmail.com User user@gmail.com PassCmd \u0026#34;gpg2 -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.domain.tld/ {print $NF}\u0026#39;\u0026#34; AuthMechs LOGIN SSLType IMAPS CertificateFile /etc/ssl/certs/ca-certificates.crt IMAPStore gmail-remote Account gmail MaildirStore gmail-local Path ~/Maildir/gmail/ Inbox ~/Maildir/gmail/Inbox # For Gmail, I like to make multiple channels, one for each remote directory # this is a trick to rename remote \u0026#34;[Gmail]/mailbox\u0026#34; to \u0026#34;mailbox\u0026#34; Channel gmail-inbox Far :gmail-remote: Near :gmail-local: Patterns \u0026#34;INBOX\u0026#34; SyncState * Channel gmail-trash Far :gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :gmail-local:\u0026#34;Trash\u0026#34; SyncState * Channel gmail-drafts Far :gmail-remote:\u0026#34;[Gmail]/Drafts\u0026#34; Near :gmail-local:\u0026#34;Drafts\u0026#34; SyncState * Channel gmail-sent Far :gmail-remote:\u0026#34;[Gmail]/Sent Mail\u0026#34; Near :gmail-local:\u0026#34;Sent Mail\u0026#34; SyncState * Channel gmail-all Far :gmail-remote:\u0026#34;[Gmail]/All Mail\u0026#34; Near :gmail-local:\u0026#34;All Mail\u0026#34; SyncState * Channel gmail-starred Far :gmail-remote:\u0026#34;[Gmail]/Starred\u0026#34; Near :gmail-local:\u0026#34;Starred\u0026#34; SyncState * Channel gmail-spam Far :gmail-remote:\u0026#34;[Gmail]/Spam\u0026#34; Near :gmail-local:\u0026#34;Spam\u0026#34; SyncState * # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE # MBSYNC ON A GROUP TO SYNC ALL CHANNELS # # FOR INSTANCE: \u0026#34;mbsync gmail\u0026#34; GETS MAIL FROM # \u0026#34;gmail-inbox\u0026#34;, \u0026#34;gmail-sent\u0026#34;, and \u0026#34;gmail-trash\u0026#34; # # SECTION (Groups) Group gmail Channel gmail-inbox Channel gmail-sent Channel gmail-trash Channel gmail-drafts Channel gmail-all Channel gmail-starred Channel gmail-spam # END OF SECTION SMTP (msmtp) I was using the standard smtpmail to send mails; but recently, I\u0026rsquo;m getting problems when sending mails. I passed a whole day trying to fix mail sending for one of my accounts, at the end of the day, I got a working setup; BUT, sending the first mail always ask me about password! I need to enter the password to be able to send the mail, Emacs asks me then if I want to save it to ~/.authifo.gpg, when I confirm saving it, it got duplicated in the .authinfo.gpg file.\nThis seems to be a bug; I also found somewhere that smtpmail is buggy, and that msmtp seems to be a good alternative, so now I\u0026rsquo;m using a msmtp-based setup, and it works like a charm!\nFor this, we will need an additional configuration file, ~/.msmtprc, I configure it the same way as mbsync, specifying this time SMTP servers instead of IMAP ones. I extract the passwords from ~/.authinfo.gpg using GPG and awk, the same way we did in mbsync\u0026rsquo;s configuration.\nThe following is a sample file ~/.msmtprc.\n# Set default values for all following accounts. defaults auth on tls on tls_starttls on tls_trust_file /etc/ssl/certs/ca-certificates.crt logfile ~/.msmtp.log # Gmail account gmail auth plain host smtp.googlemail.com port 587 from username@gmail.com user username passwordeval \u0026#34;gpg -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.googlemail.com login .*@gmail.com/ {print $NF}\u0026#39;\u0026#34; add_missing_date_header on ## Gmail - aliases account alias-account : gmail from alias@mail.com account other-alias : gmail from other.alias@address.org # Work account work auth on host smtp.domaine.tld port 587 from username@domaine.tld user username passwordeval \u0026#34;gpg -q --for-your-eyes-only --no-tty --logger-file /dev/null --batch -d ~/.authinfo.gpg | awk \u0026#39;/machine smtp.domaine.tld/ {print $NF}\u0026#39;\u0026#34; tls_nocertcheck # ignore TLS certificate errors Mail client and indexer (mu and mu4e) Add mu4e to path if it exists on the file system.\n(add-to-list \u0026#39;load-path \u0026#34;/usr/local/share/emacs/site-lisp/mu4e\u0026#34;) I configure my email accounts in a private file in lisp/private/+mu4e-accounts.el, which will be loaded after this common part:\n(after! mu4e (require \u0026#39;mu4e-contrib) (require \u0026#39;mu4e-icalendar) (require \u0026#39;org-agenda) ;; Common parameters (setq mu4e-update-interval (* 3 60) ;; Every 3 min mu4e-index-update-error-warning nil ;; Do not show warning after update mu4e-get-mail-command \u0026#34;mbsync -a\u0026#34; ;; Not needed, as +mu4e-backend is \u0026#39;mbsync by default mu4e-main-hide-personal-addresses t ;; No need to display a long list of my own addresses! mu4e-attachment-dir (expand-file-name \u0026#34;~/Downloads/mu4e-attachements\u0026#34;) mu4e-sent-messages-behavior \u0026#39;sent ;; Save sent messages mu4e-context-policy \u0026#39;pick-first ;; Start with the first context mu4e-compose-context-policy \u0026#39;ask) ;; Always ask which context to use when composing a new mail ;; Use msmtp instead of smtpmail (setq sendmail-program (executable-find \u0026#34;msmtp\u0026#34;) send-mail-function #\u0026#39;smtpmail-send-it message-sendmail-f-is-evil t message-sendmail-extra-arguments \u0026#39;(\u0026#34;--read-envelope-from\u0026#34;) message-send-mail-function #\u0026#39;message-send-mail-with-sendmail message-sendmail-envelope-from \u0026#39;obey-mail-envelope-from mail-envelope-from \u0026#39;header mail-personal-alias-file (expand-file-name \u0026#34;mail-aliases.mailrc\u0026#34; doom-user-dir) mail-specify-envelope-from t) (setq mu4e-headers-fields \u0026#39;((:flags . 6) ;; 3 flags (:account-stripe . 2) (:from-or-to . 25) (:folder . 10) (:recipnum . 2) (:subject . 80) (:human-date . 8)) +mu4e-min-header-frame-width 142 mu4e-headers-date-format \u0026#34;%d/%m/%y\u0026#34; mu4e-headers-time-format \u0026#34;⧖ %H:%M\u0026#34; mu4e-search-results-limit 1000 mu4e-index-cleanup t) (defvar +mu4e-header--folder-colors nil) (appendq! mu4e-header-info-custom \u0026#39;((:folder . (:name \u0026#34;Folder\u0026#34; :shortname \u0026#34;Folder\u0026#34; :help \u0026#34;Lowest level folder\u0026#34; :function (lambda (msg) (+mu4e-colorize-str (replace-regexp-in-string \u0026#34;\\\\`.*/\u0026#34; \u0026#34;\u0026#34; (mu4e-message-field msg :maildir)) \u0026#39;+mu4e-header--folder-colors)))))) ;; Add a unified inbox shortcut (add-to-list \u0026#39;mu4e-bookmarks \u0026#39;(:name \u0026#34;Unified inbox\u0026#34; :query \u0026#34;maildir:/.*inbox/\u0026#34; :key ?i) t) ;; Add shortcut to view yesterday\u0026#39;s messages (add-to-list \u0026#39;mu4e-bookmarks \u0026#39;(:name \u0026#34;Yesterday\u0026#39;s messages\u0026#34; :query \u0026#34;date:1d..today\u0026#34; :key ?y) t) ;; Load a list of my email addresses \u0026#39;+my-addresses\u0026#39;, defined as: ;; (setq +my-addresses \u0026#39;(\u0026#34;user@gmail.com\u0026#34; \u0026#34;user@hotmail.com\u0026#34;)) (load! \u0026#34;lisp/private/+my-addresses.el\u0026#34;) (when (bound-and-true-p +my-addresses) ;; I like always to add myself in BCC, Lets add a bookmark to show all my BCC mails (defun +mu-long-query (query oper arg-list) (concat \u0026#34;(\u0026#34; (+str-join (concat \u0026#34; \u0026#34; oper \u0026#34; \u0026#34;) (mapcar (lambda (addr) (format \u0026#34;%s:%s\u0026#34; query addr)) arg-list)) \u0026#34;)\u0026#34;)) ;; Build a query to match mails send from \u0026#34;me\u0026#34; with \u0026#34;me\u0026#34; in BCC (let ((bcc-query (+mu-long-query \u0026#34;bcc\u0026#34; \u0026#34;or\u0026#34; +my-addresses)) (from-query (+mu-long-query \u0026#34;from\u0026#34; \u0026#34;or\u0026#34; +my-addresses))) (add-to-list \u0026#39;mu4e-bookmarks (list :name \u0026#34;My black copies\u0026#34; :query (format \u0026#34;maildir:/.*inbox/ and %s and %s\u0026#34; from-query bcc-query) :key ?k) t))) ;; `mu4e-alert\u0026#39; configuration ;; Use a nicer icon in alerts (setq mu4e-alert-icon \u0026#34;/usr/share/icons/Papirus/64x64/apps/mail-client.svg\u0026#34;) (defun +mu4e-alert-helper-name-or-email (msg) (let* ((from (car (plist-get msg :from))) (name (plist-get from :name))) (if (or (null name) (eq name \u0026#34;\u0026#34;)) (plist-get from :email) name))) (defun +mu4e-alert-grouped-mail-notif-formatter (mail-group _all-mails) (when +mu4e-alert-bell-cmd (start-process \u0026#34;mu4e-alert-bell\u0026#34; nil (car +mu4e-alert-bell-cmd) (cdr +mu4e-alert-bell-cmd))) (let* ((filtered-mails (+filter (lambda (msg) (not (string-match-p \u0026#34;\\\\(junk\\\\|spam\\\\|trash\\\\|deleted\\\\)\u0026#34; (downcase (plist-get msg :maildir))))) mail-group)) (mail-count (length filtered-mails))) (list :title (format \u0026#34;You have %d unread email%s\u0026#34; mail-count (if (\u0026gt; mail-count 1) \u0026#34;s\u0026#34; \u0026#34;\u0026#34;)) :body (concat \u0026#34;• \u0026#34; (+str-join \u0026#34;\\n• \u0026#34; (mapcar (lambda (msg) (format \u0026#34;\u0026lt;b\u0026gt;%s\u0026lt;/b\u0026gt;: %s\u0026#34; (+mu4e-alert-helper-name-or-email msg) (plist-get msg :subject))) filtered-mails)))))) ;; I use auto-hiding task manager, setting window ;; urgency shows the entier task bar (in KDE), which I find annoying. (setq mu4e-alert-set-window-urgency nil mu4e-alert-grouped-mail-notification-formatter #\u0026#39;+mu4e-alert-grouped-mail-notif-formatter) ;; Org-Msg stuff ;; org-msg-[signature|greeting-fmt] are separately set for each account (setq mail-user-agent \u0026#39;mu4e-user-agent) ;; Needed by OrgMsg (require \u0026#39;org-msg) (setq org-msg-convert-citation t org-msg-default-alternatives \u0026#39;((new . (utf-8 html)) (reply-to-html . (utf-8 html)) (reply-to-text . (utf-8 html)))) (map! :map org-msg-edit-mode-map :after org-msg :n \u0026#34;G\u0026#34; #\u0026#39;org-msg-goto-body) (map! :localleader :map (mu4e-headers-mode-map mu4e-view-mode-map) :desc \u0026#34;Open URL in Brave\u0026#34; \u0026#34;b\u0026#34; #\u0026#39;browse-url-chrome ;; Brave :desc \u0026#34;Open URL in Firefox\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;browse-url-firefox) ;; I like to always BCC myself (defun +bbc-me () \u0026#34;Add my email to BCC.\u0026#34; (save-excursion (message-add-header (format \u0026#34;Bcc: %s\\n\u0026#34; +my-bcc-trash)))) (add-hook \u0026#39;mu4e-compose-mode-hook \u0026#39;+bbc-me) ;; Load my accounts (load! \u0026#34;lisp/private/+mu4e-accounts.el\u0026#34;) ;; iCalendar / Org (mu4e-icalendar-setup) (setq mu4e-icalendar-trash-after-reply nil mu4e-icalendar-diary-file \u0026#34;~/Dropbox/Org/diary-invitations.org\u0026#34; gnus-icalendar-org-capture-file \u0026#34;~/Dropbox/Org/notes.org\u0026#34; gnus-icalendar-org-capture-headline \u0026#39;(\u0026#34;Calendar\u0026#34;)) ;; To enable optional iCalendar-\u0026gt;Org sync functionality ;; NOTE: both the capture file and the headline(s) inside must already exist (gnus-icalendar-org-setup)) The lisp/private/+mu4e-accounts.el file includes Doom\u0026rsquo;s mu4e multi-account configuration as follows:\n(set-email-account! \u0026#34;Work\u0026#34; ;; Account label ;; Mu4e folders \u0026#39;((mu4e-sent-folder . \u0026#34;/work-dir/Sent\u0026#34;) (mu4e-drafts-folder . \u0026#34;/work-dir/Drafts\u0026#34;) (mu4e-trash-folder . \u0026#34;/work-dir/Trash\u0026#34;) (mu4e-refile-folder . \u0026#34;/work-dir/Archive\u0026#34;) ;; Org-msg template (signature and greeting) (org-msg-greeting-fmt . \u0026#34;Hello%s,\u0026#34;) (org-msg-signature . \u0026#34; Regards, #+begin_signature ----- *Abdelhak BOUGOUFFA* \\\\\\\\ /PhD. Candidate in Robotics | R\u0026amp;D Engineer/ \\\\\\\\ /Paris-Saclay University - SATIE/MOSS | ez-Wheel/ \\\\\\\\ #+end_signature\u0026#34;) ;; \u0026#39;smtpmail\u0026#39; options, no need for these when using \u0026#39;msmtp\u0026#39; (smtpmail-smtp-user . \u0026#34;username@server.com\u0026#34;) (smtpmail-smtp-server . \u0026#34;smtps.server.com\u0026#34;) (smtpmail-stream-type . ssl) (smtpmail-smtp-service . 465) ;; By default, `smtpmail\u0026#39; will try to send mails without authentication, and if rejected, ;; it tries to send credentials. This behavior broke my configuration. So I set this ;; variable to tell \u0026#39;smtpmail\u0026#39; to require authentication for our server (using a regex). (smtpmail-servers-requiring-authorization . \u0026#34;smtps\\\\.server\\\\.com\u0026#34;)) t) ;; Use as default/fallback account ;; Set another account (set-email-account! \u0026#34;Gmail\u0026#34; \u0026#39;((mu4e-sent-folder . \u0026#34;/gmail-dir/Sent\u0026#34;) (mu4e-drafts-folder . \u0026#34;/gmail-dir/Drafts\u0026#34;) (mu4e-trash-folder . \u0026#34;/gmail-dir/Trash\u0026#34;) (mu4e-refile-folder . \u0026#34;/gmail-dir/Archive\u0026#34;) (org-msg-greeting-fmt . \u0026#34;Hello%s,\u0026#34;) (org-msg-signature . \u0026#34;-- SIGNATURE\u0026#34;) ;; No need for these when using \u0026#39;msmtp\u0026#39; (smtpmail-smtp-user . \u0026#34;username@gmail.com\u0026#34;) (smtpmail-smtp-server . \u0026#34;smtp.googlemail.com\u0026#34;) (smtpmail-stream-type . starttls) (smtpmail-smtp-service . 587) ...)) ;; Tell Doom\u0026#39;s mu4e module to override some commands to fix issues on Gmail accounts (setq +mu4e-gmail-accounts \u0026#39;((\u0026#34;username@gmail.com\u0026#34; . \u0026#34;/gmail-dir\u0026#34;))) Dashboard (after! mu4e ;; Fix icons (defun +mu4e-initialise-icons () (setq mu4e-use-fancy-chars t mu4e-headers-draft-mark (cons \u0026#34;D\u0026#34; (+mu4e-normalised-icon \u0026#34;edit\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-flagged-mark (cons \u0026#34;F\u0026#34; (+mu4e-normalised-icon \u0026#34;flag\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-new-mark (cons \u0026#34;N\u0026#34; (+mu4e-normalised-icon \u0026#34;file_download\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;dred\u0026#34;)) mu4e-headers-passed-mark (cons \u0026#34;P\u0026#34; (+mu4e-normalised-icon \u0026#34;forward\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-replied-mark (cons \u0026#34;R\u0026#34; (+mu4e-normalised-icon \u0026#34;reply\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-seen-mark (cons \u0026#34;S\u0026#34; \u0026#34;\u0026#34;) mu4e-headers-trashed-mark (cons \u0026#34;T\u0026#34; (+mu4e-normalised-icon \u0026#34;delete\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-attach-mark (cons \u0026#34;a\u0026#34; (+mu4e-normalised-icon \u0026#34;attach_file\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-encrypted-mark (cons \u0026#34;x\u0026#34; (+mu4e-normalised-icon \u0026#34;lock\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-signed-mark (cons \u0026#34;s\u0026#34; (+mu4e-normalised-icon \u0026#34;verified_user\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;dpurple\u0026#34;)) mu4e-headers-unread-mark (cons \u0026#34;u\u0026#34; (+mu4e-normalised-icon \u0026#34;remove_red_eye\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;dred\u0026#34;)) mu4e-headers-list-mark (cons \u0026#34;l\u0026#34; (+mu4e-normalised-icon \u0026#34;list\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-personal-mark (cons \u0026#34;p\u0026#34; (+mu4e-normalised-icon \u0026#34;person\u0026#34; :set \u0026#34;material\u0026#34;)) mu4e-headers-calendar-mark (cons \u0026#34;c\u0026#34; (+mu4e-normalised-icon \u0026#34;date_range\u0026#34; :set \u0026#34;material\u0026#34;)))) (+mu4e-initialise-icons)) Save all attachements (after! mu4e ;; From https://github.com/sje30/emacs/blob/d7e21b94c79a5b6f244f33faff514036226e183c/mu4e-view-save-all-attachments.el (defun +cleanse-subject (sub) (replace-regexp-in-string \u0026#34;[^A-Z0-9]+\u0026#34; \u0026#34;-\u0026#34; (downcase sub))) (defun +mu4e-view-save-all-attachments (\u0026amp;optional arg) \u0026#34;Save all MIME parts from current mu4e gnus view buffer.\u0026#34; ;; Copied from mu4e-view-save-attachments (interactive \u0026#34;P\u0026#34;) (cl-assert (and (eq major-mode \u0026#39;mu4e-view-mode) (derived-mode-p \u0026#39;gnus-article-mode))) (let* ((msg (mu4e-message-at-point)) (id (+cleanse-subject (mu4e-message-field msg :subject))) (attachdir (expand-file-name id mu4e-attachment-dir)) (parts (mu4e~view-gather-mime-parts)) (handles \u0026#39;()) (files \u0026#39;()) dir) (mkdir attachdir t) (dolist (part parts) (let ((fname (or (cdr (assoc \u0026#39;filename (assoc \u0026#34;attachment\u0026#34; (cdr part)))) (seq-find #\u0026#39;stringp (mapcar (lambda (item) (cdr (assoc \u0026#39;name item))) (seq-filter \u0026#39;listp (cdr part))))))) (when fname (push `(,fname . ,(cdr part)) handles) (push fname files)))) (if files (progn (setq dir (if arg (read-directory-name \u0026#34;Save to directory: \u0026#34;) attachdir)) (cl-loop for (f . h) in handles when (member f files) do (mm-save-part-to-file h (+file-name-incremental (expand-file-name f dir))))) (mu4e-message \u0026#34;No attached files found\u0026#34;)))) (map! :map mu4e-view-mode-map :ne \u0026#34;P\u0026#34; #\u0026#39;+mu4e-view-save-all-attachments)) IRC ;; TODO: Not tangled (defun +fetch-my-password (\u0026amp;rest params) (require \u0026#39;auth-source) (let ((match (car (apply #\u0026#39;auth-source-search params)))) (if match (let ((secret (plist-get match :secret))) (if (functionp secret) (funcall secret) secret)) (error \u0026#34;Password not found for %S\u0026#34; params)))) (defun +my-nickserv-password (server) (+fetch-my-password :user \u0026#34;abougouffa\u0026#34; :host \u0026#34;irc.libera.chat\u0026#34;)) (set-irc-server! \u0026#34;irc.libera.chat\u0026#34; \u0026#39;(:tls t :port 6697 :nick \u0026#34;abougouffa\u0026#34; :sasl-password +my-nickserver-password :channels (\u0026#34;#emacs\u0026#34;))) Multimedia I like to use an MPD powered EMMS, so when I restart Emacs I do not lose my music.\nMPD and MPC ;; Not sure if it is required! (after! mpc (setq mpc-host \u0026#34;localhost:6600\u0026#34;)) I like to launch the music daemon mpd using Systemd, let\u0026rsquo;s define some commands in Emacs to start/kill the server:\n(defun +mpd-daemon-start () \u0026#34;Start MPD, connects to it and syncs the metadata cache.\u0026#34; (interactive) (let ((mpd-daemon-running-p (+mpd-daemon-running-p))) (unless mpd-daemon-running-p ;; Start the daemon if it is not already running. (setq mpd-daemon-running-p (+systemd-start \u0026#34;mpd\u0026#34;))) (cond ((+mpd-daemon-running-p) (+mpd-mpc-update) (emms-player-mpd-connect) (emms-cache-set-from-mpd-all) (message \u0026#34;Connected to MPD!\u0026#34;)) (t (warn \u0026#34;An error occured when trying to start Systemd mpd.service.\u0026#34;))))) (defun +mpd-daemon-stop () \u0026#34;Stops playback and kill the MPD daemon.\u0026#34; (interactive) (emms-stop) (+systemd-stop \u0026#34;mpd\u0026#34;) (message \u0026#34;MPD stopped!\u0026#34;)) (defun +mpd-daemon-running-p () \u0026#34;Check if the MPD service is running.\u0026#34; (+systemd-running-p \u0026#34;mpd\u0026#34;)) (defun +mpd-mpc-update () \u0026#34;Updates the MPD database synchronously.\u0026#34; (interactive) (if (zerop (call-process \u0026#34;mpc\u0026#34; nil nil nil \u0026#34;update\u0026#34;)) (message \u0026#34;MPD database updated!\u0026#34;) (warn \u0026#34;An error occured when trying to update MPD database.\u0026#34;))) EMMS Now, we configure EMMS to use MPD if it is present; otherwise, it uses whatever default backend EMMS is using.\n(after! emms ;; EMMS basic configuration (require \u0026#39;emms-setup) (when MPD-P (require \u0026#39;emms-player-mpd)) (emms-all) (emms-default-players) (setq emms-source-file-default-directory \u0026#34;~/Music/\u0026#34; ;; Load cover images emms-browser-covers \u0026#39;emms-browser-cache-thumbnail-async emms-seek-seconds 5) (if MPD-P ;; If using MPD as backend (setq emms-player-list \u0026#39;(emms-player-mpd) emms-info-functions \u0026#39;(emms-info-mpd) emms-player-mpd-server-name \u0026#34;localhost\u0026#34; emms-player-mpd-server-port \u0026#34;6600\u0026#34; emms-player-mpd-music-directory (expand-file-name \u0026#34;~/Music\u0026#34;)) ;; Use whatever backend EMMS is using by default (VLC in my machine) (setq emms-info-functions \u0026#39;(emms-info-tinytag))) ;; use Tinytag, or \u0026#39;(emms-info-exiftool) for Exiftool ;; Keyboard shortcuts (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioPrev\u0026gt;\u0026#34;) \u0026#39;emms-previous) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioNext\u0026gt;\u0026#34;) \u0026#39;emms-next) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioPlay\u0026gt;\u0026#34;) \u0026#39;emms-pause) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioPause\u0026gt;\u0026#34;) \u0026#39;emms-pause) (global-set-key (kbd \u0026#34;\u0026lt;XF86AudioStop\u0026gt;\u0026#34;) \u0026#39;emms-stop) ;; Try to start MPD or connect to it if it is already started. (when MPD-P (emms-player-set emms-player-mpd \u0026#39;regex (emms-player-simple-regexp \u0026#34;m3u\u0026#34; \u0026#34;ogg\u0026#34; \u0026#34;flac\u0026#34; \u0026#34;mp3\u0026#34; \u0026#34;wav\u0026#34; \u0026#34;mod\u0026#34; \u0026#34;au\u0026#34; \u0026#34;aiff\u0026#34;)) (add-hook \u0026#39;emms-playlist-cleared-hook \u0026#39;emms-player-mpd-clear) (+mpd-daemon-start)) ;; Activate EMMS in mode line (emms-mode-line 1) ;; More descriptive track lines in playlists ;; From: https://www.emacswiki.org/emacs/EMMS#h5o-15 (defun +better-emms-track-description (track) \u0026#34;Return a somewhat nice track description.\u0026#34; (let ((artist (emms-track-get track \u0026#39;info-artist)) (album (emms-track-get track \u0026#39;info-album)) (tracknumber (emms-track-get track \u0026#39;info-tracknumber)) (title (emms-track-get track \u0026#39;info-title))) (cond ((or artist title) (concat (if (\u0026gt; (length artist) 0) artist \u0026#34;Unknown artist\u0026#34;) \u0026#34;: \u0026#34; (if (\u0026gt; (length album) 0) album \u0026#34;Unknown album\u0026#34;) \u0026#34; - \u0026#34; (if (\u0026gt; (length tracknumber) 0) (format \u0026#34;%02d. \u0026#34; (string-to-number tracknumber)) \u0026#34;\u0026#34;) (if (\u0026gt; (length title) 0) title \u0026#34;Unknown title\u0026#34;))) (t (emms-track-simple-description track))))) (setq emms-track-description-function \u0026#39;+better-emms-track-description) ;; Manage notifications, inspired by: ;; https://www.emacswiki.org/emacs/EMMS#h5o-9 ;; https://www.emacswiki.org/emacs/EMMS#h5o-11 (cond ;; Choose D-Bus to disseminate messages, if available. ((and (require \u0026#39;dbus nil t) (dbus-ping :session \u0026#34;org.freedesktop.Notifications\u0026#34;)) (setq +emms-notifier-function \u0026#39;+notify-via-freedesktop-notifications) (require \u0026#39;notifications)) ;; Try to make use of KNotify if D-Bus isn\u0026#39;t present. ((and window-system (executable-find \u0026#34;kdialog\u0026#34;)) (setq +emms-notifier-function \u0026#39;+notify-via-kdialog)) ;; Use the message system otherwise (t (setq +emms-notifier-function \u0026#39;+notify-via-messages))) (setq +emms-notification-icon \u0026#34;/usr/share/icons/Papirus/64x64/apps/enjoy-music-player.svg\u0026#34;) (defun +notify-via-kdialog (title msg icon) \u0026#34;Send notification with TITLE, MSG, and ICON via `KDialog\u0026#39;.\u0026#34; (call-process \u0026#34;kdialog\u0026#34; nil nil nil \u0026#34;--title\u0026#34; title \u0026#34;--passivepopup\u0026#34; msg \u0026#34;5\u0026#34; \u0026#34;--icon\u0026#34; icon)) (defun +notify-via-freedesktop-notifications (title msg icon) \u0026#34;Send notification with TITLE, MSG, and ICON via `D-Bus\u0026#39;.\u0026#34; (notifications-notify :title title :body msg :app-icon icon :urgency \u0026#39;low)) (defun +notify-via-messages (title msg icon) \u0026#34;Send notification with TITLE, MSG to message. ICON is ignored.\u0026#34; (message \u0026#34;%s %s\u0026#34; title msg)) (add-hook \u0026#39;emms-player-started-hook (lambda () (funcall +emms-notifier-function \u0026#34;EMMS is now playing:\u0026#34; (emms-track-description (emms-playlist-current-selected-track)) +emms-notification-icon)))) EMPV (package! empv :recipe (:host github :repo \u0026#34;isamert/empv.el\u0026#34;) :pin \u0026#34;49b25a3633bc362ee5fe84c8028b0412ade362c5\u0026#34;) (use-package! empv :when MPV-P :init (map! :leader :prefix (\u0026#34;l m\u0026#34;) (:prefix (\u0026#34;v\u0026#34; . \u0026#34;empv\u0026#34;) :desc \u0026#34;Play\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;empv-play :desc \u0026#34;Seach Youtube\u0026#34; \u0026#34;y\u0026#34; #\u0026#39;consult-empv-youtube :desc \u0026#34;Play radio\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;empv-play-radio :desc \u0026#34;Save current playlist\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;+empv-save-playtlist-to-file)) :config ;; See https://docs.invidious.io/instances/ (setq empv-invidious-instance \u0026#34;https://invidious.projectsegfau.lt/api/v1\u0026#34; empv-audio-dir \u0026#34;~/Music\u0026#34; empv-video-dir \u0026#34;~/Videos\u0026#34; empv-max-directory-search-depth 6 empv-radio-log-file (expand-file-name \u0026#34;logged-radio-songs.org\u0026#34; org-directory) empv-audio-file-extensions \u0026#39;(\u0026#34;webm\u0026#34; \u0026#34;mp3\u0026#34; \u0026#34;ogg\u0026#34; \u0026#34;wav\u0026#34; \u0026#34;m4a\u0026#34; \u0026#34;flac\u0026#34; \u0026#34;aac\u0026#34; \u0026#34;opus\u0026#34;) ;; Links from https://www.radio-browser.info empv-radio-channels \u0026#39;((\u0026#34;El-Bahdja FM\u0026#34; . \u0026#34;http://webradio.tda.dz:8001/ElBahdja_64K.mp3\u0026#34;) (\u0026#34;El-Chaabia\u0026#34; . \u0026#34;https://radio-dzair.net/proxy/chaabia?mp=/stream\u0026#34;) (\u0026#34;Quran Radio\u0026#34; . \u0026#34;http://stream.radiojar.com/0tpy1h0kxtzuv\u0026#34;) (\u0026#34;Algeria International\u0026#34; . \u0026#34;https://webradio.tda.dz/Internationale_64K.mp3\u0026#34;) (\u0026#34;JOW Radio\u0026#34; . \u0026#34;https://str0.creacast.com/jowradio\u0026#34;) (\u0026#34;Europe1\u0026#34; . \u0026#34;http://ais-live.cloud-services.paris:8000/europe1.mp3\u0026#34;) (\u0026#34;France Iter\u0026#34; . \u0026#34;http://direct.franceinter.fr/live/franceinter-hifi.aac\u0026#34;) (\u0026#34;France Info\u0026#34; . \u0026#34;http://direct.franceinfo.fr/live/franceinfo-midfi.mp3\u0026#34;) (\u0026#34;France Culture\u0026#34; . \u0026#34;http://icecast.radiofrance.fr/franceculture-hifi.aac\u0026#34;) (\u0026#34;France Musique\u0026#34; . \u0026#34;http://icecast.radiofrance.fr/francemusique-hifi.aac\u0026#34;) (\u0026#34;FIP\u0026#34; . \u0026#34;http://icecast.radiofrance.fr/fip-hifi.aac\u0026#34;) (\u0026#34;Beur FM\u0026#34; . \u0026#34;http://broadcast.infomaniak.ch/beurfm-high.aac\u0026#34;) (\u0026#34;Skyrock\u0026#34; . \u0026#34;http://icecast.skyrock.net/s/natio_mp3_128k\u0026#34;))) (empv-playlist-loop-on) ;; Hacky palylist management (only supports saving playlist, ;; loading a playlist can be achieved using `empv-play-file\u0026#39;) (defun +empv--dl-playlist (playlist \u0026amp;optional dist) (let ((default-directory (or dist (let ((d (expand-file-name \u0026#34;empv-downloads\u0026#34; empv-audio-dir))) (unless (file-directory-p d) (mkdir d t)) d))) (vids (+filter \u0026#39;identity ;; Filter nils (mapcar (lambda (item) (when-let ((vid (when (string-match (rx (seq \u0026#34;watch?v=\u0026#34; (group-n 1 (one-or-more (or alnum \u0026#34;_\u0026#34; \u0026#34;-\u0026#34;))))) item) (match-string 1 item)))) vid)) playlist))) (proc-name \u0026#34;empv-yt-dlp\u0026#34;)) (unless (zerop (length vids)) (message \u0026#34;Downloading %d songs to %s\u0026#34; (length vids) default-directory) (when (get-process proc-name) (kill-process proc-name)) (make-process :name proc-name :buffer (format \u0026#34;*%s*\u0026#34; proc-name) :command (append (list (executable-find \u0026#34;yt-dlp\u0026#34;) \u0026#34;--no-abort-on-error\u0026#34; \u0026#34;--no-colors\u0026#34; \u0026#34;--extract-audio\u0026#34; \u0026#34;--no-progress\u0026#34; \u0026#34;-f\u0026#34; \u0026#34;bestaudio\u0026#34;) vids) :sentinel (lambda (prc event) (when (string= event \u0026#34;finished\\n\u0026#34;) (message \u0026#34;Finished downloading playlist files!\u0026#34;))))))) (defun +empv-download-playtlist-files (\u0026amp;optional path) (interactive \u0026#34;DSave download playlist files to: \u0026#34;) (empv--playlist-apply #\u0026#39;+empv--dl-playlist path))) Keybindings Lastly, let\u0026rsquo;s define the keybindings for these commands, under \u0026lt;leader\u0026gt; l m.\n(map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (modulep! :app emms) :prefix (\u0026#34;m\u0026#34; . \u0026#34;media\u0026#34;) :desc \u0026#34;Playlist go\u0026#34; \u0026#34;g\u0026#34; #\u0026#39;emms-playlist-mode-go :desc \u0026#34;Add playlist\u0026#34; \u0026#34;D\u0026#34; #\u0026#39;emms-add-playlist :desc \u0026#34;Toggle random playlist\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;emms-toggle-random-playlist :desc \u0026#34;Add directory\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;emms-add-directory :desc \u0026#34;Add file\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;emms-add-file :desc \u0026#34;Smart browse\u0026#34; \u0026#34;b\u0026#34; #\u0026#39;emms-smart-browse :desc \u0026#34;Play/Pause\u0026#34; \u0026#34;p\u0026#34; #\u0026#39;emms-pause :desc \u0026#34;Start\u0026#34; \u0026#34;S\u0026#34; #\u0026#39;emms-start :desc \u0026#34;Stop\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;emms-stop)) Then we add MPD related keybindings if MPD is used.\n(map! :leader :prefix (\u0026#34;l m\u0026#34;) (:when (and (modulep! :app emms) MPD-P) :prefix (\u0026#34;m\u0026#34; . \u0026#34;mpd/mpc\u0026#34;) :desc \u0026#34;Start daemon\u0026#34; \u0026#34;s\u0026#34; #\u0026#39;+mpd-daemon-start :desc \u0026#34;Stop daemon\u0026#34; \u0026#34;k\u0026#34; #\u0026#39;+mpd-daemon-stop :desc \u0026#34;EMMS player (MPD update)\u0026#34; \u0026#34;R\u0026#34; #\u0026#39;emms-player-mpd-update-all-reset-cache :desc \u0026#34;Update database\u0026#34; \u0026#34;u\u0026#34; #\u0026#39;+mpd-mpc-update)) Cycle song information in mode line I found a useful package named emms-mode-line-cycle which permits to do this; however, it has not been updated since a while, it uses some obsolete functions to draw icon in mode line, so I forked it, got rid of the problematic parts, and added some minor stuff.\n(package! emms-mode-line-cycle :recipe (:host github :repo \u0026#34;abougouffa/emms-mode-line-cycle\u0026#34;) :pin \u0026#34;7a269c9aef9ece7ecf997f6abb9cd3818403b0bb\u0026#34;) (use-package! emms-mode-line-cycle :after emms :config (setq emms-mode-line-cycle-max-width 15 emms-mode-line-cycle-additional-space-num 4 emms-mode-line-cycle-any-width-p nil emms-mode-line-cycle-velocity 4) ;; Some music files do not have metadata, by default, the track title ;; will be the full file path, so, if I detect what seems to be an absolute ;; path, I trim the directory part and get only the file name. (setq emms-mode-line-cycle-current-title-function (lambda () (let ((name (emms-track-description (emms-playlist-current-selected-track)))) (if (file-name-absolute-p name) (file-name-base name) name)))) ;; Mode line formatting settings ;; This format complements the \u0026#39;emms-mode-line-format\u0026#39; one. (setq emms-mode-line-format \u0026#34; ⟨⏵ %s⟩\u0026#34; ;; 𝅘𝅥𝅮 ⏵ ⏸ ;; To hide the playing time without stopping the cycling. emms-playing-time-display-format \u0026#34;\u0026#34;) (defun +emms-mode-line-toggle-format-hook () \u0026#34;Toggle the \u0026#39;emms-mode-line-fotmat\u0026#39; string, when playing or paused.\u0026#34; (setq emms-mode-line-format (concat \u0026#34; ⟨\u0026#34; (if emms-player-paused-p \u0026#34;⏸\u0026#34; \u0026#34;⏵\u0026#34;) \u0026#34; %s⟩\u0026#34;)) ;; Force a sync to get the right song name over MPD in mode line (when MPD-P (emms-player-mpd-sync-from-mpd)) ;; Trigger a forced update of mode line (useful when pausing) (emms-mode-line-alter-mode-line)) ;; Hook the function to the \u0026#39;emms-player-paused-hook\u0026#39; (add-hook \u0026#39;emms-player-paused-hook \u0026#39;+emms-mode-line-toggle-format-hook) (emms-mode-line-cycle 1)) Maxima The Maxima CAS cames bundled with three Emacs modes: maxima, imaxima and emaxima; installed by default in \u0026quot;/usr/share/emacs/site-lisp/maxima\u0026quot;.\nMaxima The emacsmirror/maxima seems more up-to-date, and supports completion via Company, so let\u0026rsquo;s install it from GitHub. Note that, normally, we don\u0026rsquo;t need to specify a recipe; however, installing it directly seems to not install company-maxima.el and poly-maxima.el.\n(package! maxima :recipe (:host github :repo \u0026#34;emacsmirror/maxima\u0026#34; :files (:defaults \u0026#34;keywords\u0026#34; \u0026#34;company-maxima.el\u0026#34; \u0026#34;poly-maxima.el\u0026#34;)) :pin \u0026#34;1334f44725bd80a265de858d652f3fde4ae401fa\u0026#34;) (use-package! maxima :when MAXIMA-P :commands (maxima-mode maxima-inferior-mode maxima) :init (require \u0026#39;straight) ;; to use `straight-build-dir\u0026#39; and `straight-base-dir\u0026#39; (setq maxima-font-lock-keywords-directory ;; a workaround to undo the straight workaround! (expand-file-name (format \u0026#34;straight/%s/maxima/keywords\u0026#34; straight-build-dir) straight-base-dir)) ;; The `maxima-hook-function\u0026#39; setup `company-maxima\u0026#39;. (add-hook \u0026#39;maxima-mode-hook #\u0026#39;maxima-hook-function) (add-hook \u0026#39;maxima-inferior-mode-hook #\u0026#39;maxima-hook-function) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.ma[cx]\\\\\u0026#39;\u0026#34; . maxima-mode))) IMaxima For the imaxima (Maxima with image support), the emacsattic/imaxima seems outdated compared to the imaxima package of the official Maxima distribution, so let\u0026rsquo;s install imaxima from the source code of Maxima, hosted on Sourceforge git.code.sf.net/p/maxima/code. The package files are stored in the repository\u0026rsquo;s subdirectory interfaces/emacs/imaxima.\n;; Use the `imaxima\u0026#39; package bundled with the official Maxima distribution. (package! imaxima :recipe (:host nil ;; Unsupported host, we will specify the complete repo link :repo \u0026#34;https://git.code.sf.net/p/maxima/code\u0026#34; :files (\u0026#34;interfaces/emacs/imaxima/*\u0026#34;)) :pin \u0026#34;f1e60b2ec1ae447845b113e8f3aa77fb4b7e4289\u0026#34;) (use-package! imaxima :when MAXIMA-P :commands (imaxima imath-mode) :init (setq imaxima-use-maxima-mode-flag nil ;; otherwise, it don\u0026#39;t render equations with LaTeX. imaxima-scale-factor 2.0) ;; Hook the `maxima-inferior-mode\u0026#39; to get Company completion. (add-hook \u0026#39;imaxima-startup-hook #\u0026#39;maxima-inferior-mode)) FriCAS The FriCAS cames bundled with an Emacs mode, let\u0026rsquo;s load it.\n(use-package! fricas :when FRICAS-P :load-path FRICAS-DIR :commands (fricas-mode fricas-eval fricas)) Roam Org-roam is nice by itself, but there are so extra nice packages which integrate with it.\n(use-package! websocket :after org-roam-ui) (use-package! org-roam-ui :commands org-roam-ui-open :config (setq org-roam-ui-sync-theme t org-roam-ui-follow t org-roam-ui-update-on-save t org-roam-ui-open-on-start t)) Basic settings (use-package! org-roam :init (setq org-roam-directory \u0026#34;~/Dropbox/Org/slip-box\u0026#34; org-roam-db-location (expand-file-name \u0026#34;org-roam.db\u0026#34; org-roam-directory))) Let\u0026rsquo;s disable org-roam if the directory doesn\u0026rsquo;t exist.\n(package! org-roam :disable t) Mode line file name All those numbers! It\u0026rsquo;s messy. Let\u0026rsquo;s adjust this similarly that I have in the window title\n(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun) :around #\u0026#39;doom-modeline-buffer-file-name ; takes no args (if (s-contains-p org-roam-directory (or buffer-file-name \u0026#34;\u0026#34;)) (replace-regexp-in-string \u0026#34;\\\\(?:^\\\\|.*/\\\\)\\\\([0-9]\\\\{4\\\\}\\\\)\\\\([0-9]\\\\{2\\\\}\\\\)\\\\([0-9]\\\\{2\\\\}\\\\)[0-9]*-\u0026#34; \u0026#34;🢔(\\\\1-\\\\2-\\\\3) \u0026#34; (subst-char-in-string ?_ ? buffer-file-name)) (funcall orig-fun))) Org Roam Capture template (after! org-roam (setq org-roam-capture-ref-templates \u0026#39;((\u0026#34;r\u0026#34; \u0026#34;ref\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;web/%\u0026lt;%Y%m%d%H%M%S\u0026gt;-${slug}.org\u0026#34; \u0026#34;#+title: ${title}\\n#+created: %U\\n\\n${body}\\n\u0026#34;) :unnarrowed t)))) View notes in Deft ;; From https://org-roam.discourse.group/t/configure-deft-title-stripping-to-hide-org-roam-template-headers/478/10 (use-package! deft :after org :bind (\u0026#34;C-c n d\u0026#34; . deft) :init (setq deft-directory org-roam-directory ;; deft-recursive t deft-use-filter-string-for-filename t deft-default-extension \u0026#34;org\u0026#34;) :config (defun +deft-parse-title (file contents) \u0026#34;Parse the given FILE and CONTENTS and determine the title. If `deft-use-filename-as-title\u0026#39; is nil, the title is taken to be the first non-empty line of the FILE. Else the base name of the FILE is used as title.\u0026#34; (let ((begin (string-match \u0026#34;^#\\\\+[tT][iI][tT][lL][eE]: .*$\u0026#34; contents))) (if begin (string-trim (substring contents begin (match-end 0)) \u0026#34;#\\\\+[tT][iI][tT][lL][eE]: *\u0026#34; \u0026#34;[\\n\\t ]+\u0026#34;) (deft-base-filename file)))) (advice-add \u0026#39;deft-parse-title :override #\u0026#39;+deft-parse-title) (setq deft-strip-summary-regexp (concat \u0026#34;\\\\(\u0026#34; \u0026#34;[\\n\\t]\u0026#34; ;; blank \u0026#34;\\\\|^#\\\\+[[:alpha:]_]+:.*$\u0026#34; ;; org-mode metadata \u0026#34;\\\\|^:PROPERTIES:\\n\\\\(.+\\n\\\\)+:END:\\n\u0026#34; ;; org-roam ID \u0026#34;\\\\|\\\\[\\\\[\\\\(.*\\\\]\\\\)\u0026#34; ;; any link \u0026#34;\\\\)\u0026#34;))) Programming CSV rainbow Stolen from here.\n(after! csv-mode ;; TODO: Need to fix the case of two commas, example \u0026#34;a,b,,c,d\u0026#34; (require \u0026#39;cl-lib) (require \u0026#39;color) (map! :localleader :map csv-mode-map \u0026#34;R\u0026#34; #\u0026#39;+csv-rainbow) (defun +csv-rainbow (\u0026amp;optional separator) (interactive (list (when current-prefix-arg (read-char \u0026#34;Separator: \u0026#34;)))) (font-lock-mode 1) (let* ((separator (or separator ?\\,)) (n (count-matches (string separator) (point-at-bol) (point-at-eol))) (colors (cl-loop for i from 0 to 1.0 by (/ 2.0 n) collect (apply #\u0026#39;color-rgb-to-hex (color-hsl-to-rgb i 0.3 0.5))))) (cl-loop for i from 2 to n by 2 for c in colors for r = (format \u0026#34;^\\\\([^%c\\n]+%c\\\\)\\\\{%d\\\\}\u0026#34; separator separator i) do (font-lock-add-keywords nil `((,r (1 \u0026#39;(face (:foreground ,c)))))))))) ;; provide CSV mode setup ;; (add-hook \u0026#39;csv-mode-hook (lambda () (+csv-rainbow))) Vimrc (package! vimrc-mode :recipe (:host github :repo \u0026#34;mcandre/vimrc-mode\u0026#34;) :pin \u0026#34;13bc150a870d5d4a95f1111e4740e2b22813c30e\u0026#34;) (use-package! vimrc-mode :mode \u0026#34;\\\\.vim\\\\(rc\\\\)?\\\\\u0026#39;\u0026#34;) ESS View data frames better with\n(package! ess-view :pin \u0026#34;925cafd876e2cc37bc756bb7fcf3f34534b457e2\u0026#34;) Python IDE (package! elpy :pin \u0026#34;ae7919d94659eb26d4146d4c3422c5f4c3610837\u0026#34;) (use-package! elpy :hook ((elpy-mode . flycheck-mode) (elpy-mode . (lambda () (set (make-local-variable \u0026#39;company-backends) \u0026#39;((elpy-company-backend :with company-yasnippet)))))) :config (elpy-enable)) Semgrep Lightweight static analysis for many languages. Find bug variants with patterns that look like source code.\n(package! semgrep :disable t :recipe (:host github :repo \u0026#34;Ruin0x11/semgrep.el\u0026#34;) :pin \u0026#34;3313f38ed7d23947992e19f1e464c6d544124144\u0026#34;) GNU Octave Files with the .m extension gets recognized automatically as Objective-C files. I\u0026rsquo;ve never used Objective-C before, so let\u0026rsquo;s change it to be recognized as Octave/Matlab files.\n(add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.m\\\\\u0026#39;\u0026#34; . octave-mode)) (defun +octave-eval-last-sexp () \u0026#34;Evaluate Octave sexp before point and print value into current buffer.\u0026#34; (interactive) (inferior-octave t) (let ((print-escape-newlines nil) (opoint (point))) (prin1 (save-excursion (forward-sexp -1) (inferior-octave-send-list-and-digest (list (concat (buffer-substring-no-properties (point) opoint) \u0026#34;\\n\u0026#34;))) (mapconcat \u0026#39;identity inferior-octave-output-list \u0026#34;\\n\u0026#34;))))) (defun +eros-octave-eval-last-sexp () \u0026#34;Wrapper for `+octave-eval-last-sexp\u0026#39; that overlays results.\u0026#34; (interactive) (eros--eval-overlay (+octave-eval-last-sexp) (point))) (map! :localleader :map (octave-mode-map) (:prefix (\u0026#34;e\u0026#34; . \u0026#34;eval\u0026#34;) :desc \u0026#34;Eval and print last sexp\u0026#34; \u0026#34;e\u0026#34; #\u0026#39;+eros-octave-eval-last-sexp)) ROS File extensions Add ROS specific file formats:\n(add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.rviz\\\\\u0026#39;\u0026#34; . conf-unix-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.urdf\\\\\u0026#39;\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.xacro\\\\\u0026#39;\u0026#34; . xml-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.launch\\\\\u0026#39;\u0026#34; . xml-mode)) ;; Use gdb-script-mode for msg and srv files (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.msg\\\\\u0026#39;\u0026#34; . gdb-script-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.srv\\\\\u0026#39;\u0026#34; . gdb-script-mode)) (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.action\\\\\u0026#39;\u0026#34; . gdb-script-mode)) ROS bags Mode to view ROS .bag files. Taken from code-iai/ros_emacs_utils.\n(when ROSBAG-P (define-derived-mode rosbag-view-mode fundamental-mode \u0026#34;Rosbag view mode\u0026#34; \u0026#34;Major mode for viewing ROS bag files.\u0026#34; (let ((f (buffer-file-name))) (let ((buffer-read-only nil)) (erase-buffer) (message \u0026#34;Calling rosbag info\u0026#34;) (call-process \u0026#34;rosbag\u0026#34; nil (current-buffer) nil \u0026#34;info\u0026#34; f) (set-buffer-modified-p nil)) (view-mode) (set-visited-file-name nil t))) ;; rosbag view mode (add-to-list \u0026#39;auto-mode-alist \u0026#39;(\u0026#34;\\\\.bag$\u0026#34; . rosbag-view-mode))) ros.el I found this awesome ros.el package made by Max Beutelspacher, which facilitate working with ROS machines, supports ROS1 and ROS2, with local workspaces or remote ones (over Trump!).\n;; `ros.el\u0026#39; depends on `with-shell-interpreter\u0026#39; among other packages ;; See: https://github.com/DerBeutlin/ros.el/blob/master/Cask (package! with-shell-interpreter :pin \u0026#34;3fd1ea892e44f7fe6f86df2b5c0a0a1e0f3913fa\u0026#34;) (package! ros :recipe (:host github :repo \u0026#34;DerBeutlin/ros.el\u0026#34;) :pin \u0026#34;f66d2177b00b277a36c058549c477d854148623c\u0026#34;) Now, we configure the ROS1/ROS2 workspaces to work on. But before that, we need to install some tools on the ROS machine, and build the workspace for the first time using colcon build, the repository contains example Docker files for Noetic and Foxy.\n(use-package! ros :init (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) :desc \u0026#34;Hydra ROS\u0026#34; \u0026#34;r\u0026#34; #\u0026#39;hydra-ros-main/body) :commands (hydra-ros-main/body ros-set-workspace) :config (setq ros-workspaces (list (ros-dump-workspace :tramp-prefix (format \u0026#34;/docker:%s@%s:\u0026#34; \u0026#34;ros\u0026#34; \u0026#34;ros-machine\u0026#34;) :workspace \u0026#34;~/ros_ws\u0026#34; :extends \u0026#39;(\u0026#34;/opt/ros/noetic/\u0026#34;)) (ros-dump-workspace :tramp-prefix (format \u0026#34;/ssh:%s@%s:\u0026#34; \u0026#34;swd_sk\u0026#34; \u0026#34;172.16.96.42\u0026#34;) :workspace \u0026#34;~/ros_ws\u0026#34; :extends \u0026#39;(\u0026#34;/opt/ros/noetic/\u0026#34;)) (ros-dump-workspace :tramp-prefix (format \u0026#34;/ssh:%s@%s:\u0026#34; \u0026#34;swd_sk\u0026#34; \u0026#34;172.16.96.42\u0026#34;) :workspace \u0026#34;~/ros2_ws\u0026#34; :extends \u0026#39;(\u0026#34;/opt/ros/foxy/\u0026#34;))))) Scheme (after! geiser (setq geiser-default-implementation \u0026#39;guile geiser-chez-binary \u0026#34;chez-scheme\u0026#34;)) ;; default is \u0026#34;scheme\u0026#34; Embedded systems Embed.el Some embedded systems development tools.\nTODO: Try to integrate embedded debuggers adapters with dap-mode:\nprobe-rs-debugger stm32-emacs cortex-debug with potential integration with DAP esp-debug-adapter (package! embed :recipe (:host github :repo \u0026#34;sjsch/embed-el\u0026#34;) :pin \u0026#34;8df65777450c6c70a418d1bd2ba87ad590377b47\u0026#34;) (use-package! embed :commands (embed-openocd-start embed-openocd-stop embed-openocd-gdb embed-openocd-flash) :init (map! :leader :prefix (\u0026#34;l\u0026#34; . \u0026#34;custom\u0026#34;) (:when (modulep! :tools debugger +lsp) :prefix (\u0026#34;e\u0026#34; . \u0026#34;embedded\u0026#34;) :desc \u0026#34;Start OpenOCD\u0026#34; \u0026#34;o\u0026#34; #\u0026#39;embed-openocd-start :desc \u0026#34;Stop OpenOCD\u0026#34; \u0026#34;O\u0026#34; #\u0026#39;embed-openocd-stop :desc \u0026#34;OpenOCD GDB\u0026#34; \u0026#34;g\u0026#34; #\u0026#39;embed-openocd-gdb :desc \u0026#34;OpenOCD flash\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;embed-openocd-flash))) Arduino (package! arduino-mode :recipe (:host github :repo \u0026#34;bookest/arduino-mode\u0026#34;) :pin \u0026#34;3e2bad4569ad26e929e6db2cbcff0d6d36812698\u0026#34;) Bitbake (Yocto) Add support for Yocto Project files.\n(package! bitbake-modes :recipe (:host nil :repo \u0026#34;https://bitbucket.org/olanilsson/bitbake-modes\u0026#34;) :pin \u0026#34;a042118fd2010ef203a11e1de14e7537f8184a78\u0026#34;) (use-package! bitbake-modes :commands (wks-mode mmm-mode bb-sh-mode bb-scc-mode bitbake-mode conf-bitbake-mode bitbake-task-log-mode)) Git \u0026amp; VC Magit (after! code-review (setq code-review-auth-login-marker \u0026#39;forge)) Granular diff-highlights for all hunks (after! magit ;; Disable if it causes performance issues (setq magit-diff-refine-hunk t)) Gravatars (after! magit ;; Show gravatars (setq magit-revision-show-gravatars \u0026#39;(\u0026#34;^Author: \u0026#34; . \u0026#34;^Commit: \u0026#34;))) WIP Company for commit messages (package! company-conventional-commits :recipe `(:local-repo ,(expand-file-name \u0026#34;lisp/company-conventional-commits\u0026#34; doom-user-dir))) (use-package! company-conventional-commits :after (magit company) :config (add-hook \u0026#39;git-commit-setup-hook (lambda () (add-to-list \u0026#39;company-backends \u0026#39;company-conventional-commits)))) Pretty graph (package! magit-pretty-graph :recipe (:host github :repo \u0026#34;georgek/magit-pretty-graph\u0026#34;) :pin \u0026#34;26dc5535a20efe781b172bac73f14a5ebe13efa9\u0026#34;) (use-package! magit-pretty-graph :after magit :init (setq magit-pg-command (concat \u0026#34;git --no-pager log\u0026#34; \u0026#34; --topo-order --decorate=full\u0026#34; \u0026#34; --pretty=format:\\\u0026#34;%H%x00%P%x00%an%x00%ar%x00%s%x00%d\\\u0026#34;\u0026#34; \u0026#34; -n 2000\u0026#34;)) ;; Increase the default 100 limit (map! :localleader :map (magit-mode-map) :desc \u0026#34;Magit pretty graph\u0026#34; \u0026#34;p\u0026#34; (cmd! (magit-pg-repo (magit-toplevel))))) Repo This adds Emacs integration of repo, The Multiple Git Repository Tool. Make sure the repo tool is installed, if not, pacman -S repo on Arch-based distributions, or directly with:\nREPO_PATH=\u0026#34;$HOME/.local/bin/repo\u0026#34; curl \u0026#34;https://storage.googleapis.com/git-repo-downloads/repo\u0026#34; \u0026gt; \u0026#34;${REPO_PATH}\u0026#34; chmod a+x \u0026#34;${REPO_PATH}\u0026#34; (package! repo :pin \u0026#34;e504aa831bfa38ddadce293face28b3c9d9ff9b7\u0026#34;) (use-package! repo :when REPO-P :commands repo-status) Blamer Display Git information (author, date, message\u0026hellip;) for current line\n(package! blamer :recipe (:host github :repo \u0026#34;artawower/blamer.el\u0026#34;) :pin \u0026#34;99b43779341af0d924bfe2a9103993a6b9e3d3b2\u0026#34;) (use-package! blamer :commands (blamer-mode) ;; :hook ((prog-mode . blamer-mode)) :custom (blamer-idle-time 0.3) (blamer-min-offset 60) (blamer-prettify-time-p t) (blamer-entire-formatter \u0026#34; %s\u0026#34;) (blamer-author-formatter \u0026#34; %s \u0026#34;) (blamer-datetime-formatter \u0026#34;[%s], \u0026#34;) (blamer-commit-formatter \u0026#34;“%s”\u0026#34;) :custom-face (blamer-face ((t :foreground \u0026#34;#7a88cf\u0026#34; :background nil :height 125 :italic t)))) Assembly Add some packages for better assembly coding.\n(package! nasm-mode :pin \u0026#34;65ca6546fc395711fac5b3b4299e76c2303d43a8\u0026#34;) (package! haxor-mode :pin \u0026#34;6fa25a8e6b6a59481bc0354c2fe1e0ed53cbdc91\u0026#34;) (package! mips-mode :pin \u0026#34;98795cdc81979821ac35d9f94ce354cd99780c67\u0026#34;) (package! riscv-mode :pin \u0026#34;8e335b9c93de93ed8dd063d702b0f5ad48eef6d7\u0026#34;) (package! x86-lookup :pin \u0026#34;1573d61cc4457737b94624598a891c837fb52c16\u0026#34;) (use-package! nasm-mode :mode \u0026#34;\\\\.[n]*\\\\(asm\\\\|s\\\\)\\\\\u0026#39;\u0026#34;) ;; Get Haxor VM from https://github.com/krzysztof-magosa/haxor (use-package! haxor-mode :mode \u0026#34;\\\\.hax\\\\\u0026#39;\u0026#34;) (use-package! mips-mode :mode \u0026#34;\\\\.mips\\\\\u0026#39;\u0026#34;) (use-package! riscv-mode :mode \u0026#34;\\\\.riscv\\\\\u0026#39;\u0026#34;) (use-package! x86-lookup :commands (x86-lookup) :config (when (modulep! :tools pdf) (setq x86-lookup-browse-pdf-function \u0026#39;x86-lookup-browse-pdf-pdf-tools)) ;; Get manual from https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html (setq x86-lookup-pdf (expand-file-name \u0026#34;x86-lookup/325383-sdm-vol-2abcd.pdf\u0026#34; doom-data-dir))) Disaster (package! disaster :pin \u0026#34;0c13bd244cc43773af81e52ce73a55f199d58a61\u0026#34;) (use-package! disaster :commands (disaster) :init (setq disaster-assembly-mode \u0026#39;nasm-mode) (map! :localleader :map (c++-mode-map c-mode-map fortran-mode) :desc \u0026#34;Disaster\u0026#34; \u0026#34;d\u0026#34; #\u0026#39;disaster)) Devdocs (package! devdocs :recipe (:host github :repo \u0026#34;astoff/devdocs.el\u0026#34; :files (\u0026#34;*.el\u0026#34;)) :pin \u0026#34;61ce83b79dc64e2f99d7f016a09b97e14b331459\u0026#34;) (use-package! devdocs :commands (devdocs-lookup devdocs-install) :config (setq devdocs-data-dir (expand-file-name \u0026#34;devdocs\u0026#34; doom-data-dir))) Systemd For editing systemd unit files.\n(package! systemd :pin \u0026#34;b6ae63a236605b1c5e1069f7d3afe06ae32a7bae\u0026#34;) (package! journalctl-mode :pin \u0026#34;c5bca1a5f42d2fe2a00fdf52fe480137ace971d3\u0026#34;) (use-package! journalctl-mode :commands (journalctl journalctl-boot journalctl-unit journalctl-user-unit) :init (map! :map journalctl-mode-map :nv \u0026#34;J\u0026#34; #\u0026#39;journalctl-next-chunk :nv \u0026#34;K\u0026#34; #\u0026#39;journalctl-previous-chunk)) PKGBUILD (package! pkgbuild-mode :pin \u0026#34;9525be8ecbd3a0d0bc7cc27e6d0f403e111aa067\u0026#34;) (use-package! pkgbuild-mode :commands (pkgbuild-mode) :mode \u0026#34;/PKGBUILD$\u0026#34;) Franca IDL Add support for Franca Interface Definition Language.\n(package! franca-idl :recipe (:host github :repo \u0026#34;zeph1e/franca-idl.el\u0026#34;) :pin \u0026#34;12703ee42533bd851a1d911609020f71eb31204a\u0026#34;) (use-package! franca-idl :commands franca-idl-mode) LaTeX (package! aas :recipe (:host github :repo \u0026#34;ymarco/auto-activating-snippets\u0026#34;) :pin \u0026#34;566944e3b336c29d3ac11cd739a954c9d112f3fb\u0026#34;) (use-package! aas :commands aas-mode) Flycheck + Projectile WIP: Not working atm!\n(package! flycheck-projectile :recipe (:host github :repo \u0026#34;nbfalcon/flycheck-projectile\u0026#34;) :pin \u0026#34;ce6e9e8793a55dace13d5fa13badab2dca3b5ddb\u0026#34;) (use-package! flycheck-projectile :commands flycheck-projectile-list-errors) Graphviz Graphviz is a nice method of visualizing simple graphs, based on th DOT graph description language (*.dot / *.gv files).\n(package! graphviz-dot-mode :pin \u0026#34;6e96a89762760935a7dff6b18393396f6498f976\u0026#34;) (use-package! graphviz-dot-mode :commands graphviz-dot-mode :mode (\u0026#34;\\\\.dot\\\\\u0026#39;\u0026#34; \u0026#34;\\\\.gv\\\\\u0026#39;\u0026#34;) :init (after! org (setcdr (assoc \u0026#34;dot\u0026#34; org-src-lang-modes) \u0026#39;graphviz-dot)) :config (require \u0026#39;company-graphviz-dot)) Modula-II Gaius Mulley is doing a great job, bringing Modula-II support to GCC, he also created a new mode for Modula-II with extended features. The mode is included with the GNU Modula 2 source code, and can be downloaded separately from the Git repository, from here gm2-mode.el. I added (provide 'gm2-mode) to the gm2-mode.el.\n(package! gm2-mode :recipe `(:local-repo ,(expand-file-name \u0026#34;lisp/gm2-mode\u0026#34; doom-user-dir))) Mermaid (package! mermaid-mode :pin \u0026#34;a98a9e733b1da1e6a19e68c1db4367bf46283479\u0026#34;) (package! ob-mermaid :recipe (:host github :repo \u0026#34;arnm/ob-mermaid\u0026#34;) :pin \u0026#34;b4ce25699e3ebff054f523375d1cf5a17bd0dbaf\u0026#34;) (use-package! mermaid-mode :commands mermaid-mode :mode \u0026#34;\\\\.mmd\\\\\u0026#39;\u0026#34;) (use-package! ob-mermaid :after org :init (after! org (add-to-list \u0026#39;org-babel-load-languages \u0026#39;(mermaid . t)))) The V Programming Language (package! v-mode :pin \u0026#34;a701f4cedfff91cf4bcd17c9a2cd16a49f942743\u0026#34;) (use-package! v-mode :mode (\u0026#34;\\\\(\\\\.v?v\\\\|\\\\.vsh\\\\)$\u0026#34; . \u0026#39;v-mode) :config (map! :localleader :map (v-mode-map) :desc \u0026#34;v-format-buffer\u0026#34; \u0026#34;f\u0026#34; #\u0026#39;v-format-buffer :desc \u0026#34;v-menu\u0026#34; \u0026#34;m\u0026#34; #\u0026#39;v-menu)) Inspector (package! inspector :recipe (:host github :repo \u0026#34;mmontone/emacs-inspector\u0026#34;) :pin \u0026#34;f30b735fca1c3979e693c4c76cac85885c07d8ab\u0026#34;) (use-package! inspector :commands (inspect-expression inspect-last-sexp)) Office Org additional packages To avoid problems in the (after! org) section.\n(unpin! org-roam) ;; To avoid problems with org-roam-ui (package! websocket :pin \u0026#34;82b370602fa0158670b1c6c769f223159affce9b\u0026#34;) (package! org-roam-ui :pin \u0026#34;16a8da9e5107833032893bc4c0680b368ac423ac\u0026#34;) (package! org-wild-notifier :pin \u0026#34;9392b06d20b2f88e45a41bea17bb2f10f24fd19c\u0026#34;) (package! org-fragtog :pin \u0026#34;c675563af3f9ab5558cfd5ea460e2a07477b0cfd\u0026#34;) (package! org-appear :pin \u0026#34;60ba267c5da336e75e603f8c7ab3f44e6f4e4dac\u0026#34;) (package! org-super-agenda :pin \u0026#34;f4f528985397c833c870967884b013cf91a1da4a\u0026#34;) (package! doct :pin \u0026#34;506c22f365b75f5423810c4933856802554df464\u0026#34;) (package! citar-org-roam :recipe (:host github :repo \u0026#34;emacs-citar/citar-org-roam\u0026#34;) :pin \u0026#34;29688b89ac3bf78405fa0dce7e17965aa8fe0dff\u0026#34;) (package! org-menu :recipe (:host github :repo \u0026#34;sheijk/org-menu\u0026#34;) :pin \u0026#34;9cd10161c2b50dfef581f3d0441683eeeae6be59\u0026#34;) (package! caldav :recipe (:host github :repo \u0026#34;dengste/org-caldav\u0026#34;) :pin \u0026#34;8569941a0a5a9393ba51afc8923fd7b77b73fa7a\u0026#34;) (package! org-ol-tree :recipe (:host github :repo \u0026#34;Townk/org-ol-tree\u0026#34;) :pin \u0026#34;207c748aa5fea8626be619e8c55bdb1c16118c25\u0026#34;) (package! org-modern :recipe (:host github :repo \u0026#34;minad/org-modern\u0026#34;) :pin \u0026#34;828cf100c62fc9dfb50152c192ac3a968c1b54bc\u0026#34;) (package! org-bib :recipe (:host github :repo \u0026#34;rougier/org-bib-mode\u0026#34;) :pin \u0026#34;fed9910186e5e579c2391fb356f55ae24093b55a\u0026#34;) (package! academic-phrases :recipe (:host github :repo \u0026#34;nashamri/academic-phrases\u0026#34;) :pin \u0026#34;25d9cf67feac6359cb213f061735e2679c84187f\u0026#34;) (package! phscroll :recipe (:host github :repo \u0026#34;misohena/phscroll\u0026#34;) :pin \u0026#34;65e00c89f078997e1a5665d069ad8b1e3b851d49\u0026#34;) Org mode Intro Because this section is fairly expensive to initialize, we\u0026rsquo;ll wrap it in a (after! ...) block.\n(after! org \u0026lt;\u0026lt;org-conf\u0026gt;\u0026gt; ) Behavior Tweaking defaults Org basics (setq org-directory \u0026#34;~/Dropbox/Org/\u0026#34; ; let\u0026#39;s put files here org-use-property-inheritance t ; it\u0026#39;s convenient to have properties inherited org-log-done \u0026#39;time ; having the time an item is done sounds convenient org-list-allow-alphabetical t ; have a. A. a) A) list bullets org-export-in-background nil ; run export processes in external emacs process org-export-async-debug t org-tags-column 0 org-catch-invisible-edits \u0026#39;smart ;; try not to accidently do weird stuff in invisible regions org-export-with-sub-superscripts \u0026#39;{} ;; don\u0026#39;t treat lone _ / ^ as sub/superscripts, require _{} / ^{} org-pretty-entities-include-sub-superscripts nil org-auto-align-tags nil org-special-ctrl-a/e t org-startup-indented t ;; Enable \u0026#39;org-indent-mode\u0026#39; by default, override with \u0026#39;+#startup: noindent\u0026#39; for big files org-insert-heading-respect-content t) Babel I also like the :comments header-argument, so let\u0026rsquo;s make that a default.\n(setq org-babel-default-header-args \u0026#39;((:session . \u0026#34;none\u0026#34;) (:results . \u0026#34;replace\u0026#34;) (:exports . \u0026#34;code\u0026#34;) (:cache . \u0026#34;no\u0026#34;) (:noweb . \u0026#34;no\u0026#34;) (:hlines . \u0026#34;no\u0026#34;) (:tangle . \u0026#34;no\u0026#34;) (:comments . \u0026#34;link\u0026#34;))) Babel is really annoying when it comes to working with Scheme (via Geiser), it keeps asking about which Scheme implementation to use, I tried to set this as a local variable (using ) and .dir-locals.el, but it didn\u0026rsquo;t work. This hack should solve the problem now!\n;; stolen from https://github.com/yohan-pereira/.emacs#babel-config (defun +org-confirm-babel-evaluate (lang body) (not (string= lang \u0026#34;scheme\u0026#34;))) ;; Don\u0026#39;t ask for scheme (setq org-confirm-babel-evaluate #\u0026#39;+org-confirm-babel-evaluate) EVIL There also seem to be a few keybindings which use hjkl, but miss arrow key equivalents.\n(map! :map evil-org-mode-map :after evil-org :n \u0026#34;g \u0026lt;up\u0026gt;\u0026#34; #\u0026#39;org-backward-heading-same-level :n \u0026#34;g \u0026lt;down\u0026gt;\u0026#34; #\u0026#39;org-forward-heading-same-level :n \u0026#34;g \u0026lt;left\u0026gt;\u0026#34; #\u0026#39;org-up-element :n \u0026#34;g \u0026lt;right\u0026gt;\u0026#34; #\u0026#39;org-down-element) TODOs (setq org-todo-keywords \u0026#39;((sequence \u0026#34;IDEA(i)\u0026#34; \u0026#34;TODO(t)\u0026#34; \u0026#34;NEXT(n)\u0026#34; \u0026#34;PROJ(p)\u0026#34; \u0026#34;STRT(s)\u0026#34; \u0026#34;WAIT(w)\u0026#34; \u0026#34;HOLD(h)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;DONE(d)\u0026#34; \u0026#34;KILL(k)\u0026#34;) (sequence \u0026#34;[ ](T)\u0026#34; \u0026#34;[-](S)\u0026#34; \u0026#34;|\u0026#34; \u0026#34;[X](D)\u0026#34;) (sequence \u0026#34;|\u0026#34; \u0026#34;OKAY(o)\u0026#34; \u0026#34;YES(y)\u0026#34; \u0026#34;NO(n)\u0026#34;))) (setq org-todo-keyword-faces \u0026#39;((\u0026#34;IDEA\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;NEXT\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;STRT\u0026#34; . (:foreground \u0026#34;OrangeRed\u0026#34; :weight bold)) (\u0026#34;WAIT\u0026#34; . (:foreground \u0026#34;coral\u0026#34; :weight bold)) (\u0026#34;KILL\u0026#34; . (:foreground \u0026#34;DarkGreen\u0026#34; :weight bold)) (\u0026#34;PROJ\u0026#34; . (:foreground \u0026#34;LimeGreen\u0026#34; :weight bold)) (\u0026#34;HOLD\u0026#34; . (:foreground \u0026#34;orange\u0026#34; :weight bold)))) (defun +log-todo-next-creation-date (\u0026amp;rest ignore) \u0026#34;Log NEXT creation time in the property drawer under the key \u0026#39;ACTIVATED\u0026#39;\u0026#34; (when (and (string= (org-get-todo-state) \u0026#34;NEXT\u0026#34;) (not (org-entry-get nil \u0026#34;ACTIVATED\u0026#34;))) (org-entry-put nil \u0026#34;ACTIVATED\u0026#34; (format-time-string \u0026#34;[%Y-%m-%d]\u0026#34;)))) (add-hook \u0026#39;org-after-todo-state-change-hook #\u0026#39;+log-todo-next-creation-date) Tags (setq org-tag-persistent-alist \u0026#39;((:startgroup . nil) (\u0026#34;home\u0026#34; . ?h) (\u0026#34;research\u0026#34; . ?r) (\u0026#34;work\u0026#34; . ?w) (:endgroup . nil) (:startgroup . nil) (\u0026#34;tool\u0026#34; . ?o) (\u0026#34;dev\u0026#34; . ?d) (\u0026#34;report\u0026#34; . ?p) (:endgroup . nil) (:startgroup . nil) (\u0026#34;easy\u0026#34; . ?e) (\u0026#34;medium\u0026#34; . ?m) (\u0026#34;hard\u0026#34; . ?a) (:endgroup . nil) (\u0026#34;urgent\u0026#34; . ?u) (\u0026#34;key\u0026#34; . ?k) (\u0026#34;bonus\u0026#34; . ?b) (\u0026#34;ignore\u0026#34; . ?i) (\u0026#34;noexport\u0026#34; . ?x))) (setq org-tag-faces \u0026#39;((\u0026#34;home\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;research\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;work\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;tool\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;dev\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;report\u0026#34; . (:foreground \u0026#34;IndianRed1\u0026#34; :weight bold)) (\u0026#34;urgent\u0026#34; . (:foreground \u0026#34;red\u0026#34; :weight bold)) (\u0026#34;key\u0026#34; . (:foreground \u0026#34;red\u0026#34; :weight bold)) (\u0026#34;easy\u0026#34; . (:foreground \u0026#34;green4\u0026#34; :weight bold)) (\u0026#34;medium\u0026#34; . (:foreground \u0026#34;orange\u0026#34; :weight bold)) (\u0026#34;hard\u0026#34; . (:foreground \u0026#34;red\u0026#34; :weight bold)) (\u0026#34;bonus\u0026#34; . (:foreground \u0026#34;goldenrod\u0026#34; :weight bold)) (\u0026#34;ignore\u0026#34; . (:foreground \u0026#34;Gray\u0026#34; :weight bold)) (\u0026#34;noexport\u0026#34; . (:foreground \u0026#34;LimeGreen\u0026#34; :weight bold)))) Agenda Set files for org-agenda\n(setq org-agenda-files (list (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) (expand-file-name \u0026#34;agenda.org\u0026#34; org-directory) (expand-file-name \u0026#34;gcal-agenda.org\u0026#34; org-directory) (expand-file-name \u0026#34;notes.org\u0026#34; org-directory) (expand-file-name \u0026#34;projects.org\u0026#34; org-directory) (expand-file-name \u0026#34;archive.org\u0026#34; org-directory))) Apply some styling on the standard agenda:\n;; Agenda styling (setq org-agenda-block-separator ?─ org-agenda-time-grid \u0026#39;((daily today require-timed) (800 1000 1200 1400 1600 1800 2000) \u0026#34; ┄┄┄┄┄ \u0026#34; \u0026#34;┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄\u0026#34;) org-agenda-current-time-string \u0026#34;⭠ now ─────────────────────────────────────────────────\u0026#34;) Super agenda Configure org-super-agenda\n(use-package! org-super-agenda :defer t :config (org-super-agenda-mode) :init (setq org-agenda-skip-scheduled-if-done t org-agenda-skip-deadline-if-done t org-agenda-include-deadlines t org-agenda-block-separator nil org-agenda-tags-column 100 ;; from testing this seems to be a good value org-agenda-compact-blocks t) (setq org-agenda-custom-commands \u0026#39;((\u0026#34;o\u0026#34; \u0026#34;Overview\u0026#34; ((agenda \u0026#34;\u0026#34; ((org-agenda-span \u0026#39;day) (org-super-agenda-groups \u0026#39;((:name \u0026#34;Today\u0026#34; :time-grid t :date today :todo \u0026#34;TODAY\u0026#34; :scheduled today :order 1))))) (alltodo \u0026#34;\u0026#34; ((org-agenda-overriding-header \u0026#34;\u0026#34;) (org-super-agenda-groups \u0026#39;((:name \u0026#34;Next to do\u0026#34; :todo \u0026#34;NEXT\u0026#34; :order 1) (:name \u0026#34;Important\u0026#34; :tag \u0026#34;Important\u0026#34; :priority \u0026#34;A\u0026#34; :order 6) (:name \u0026#34;Due Today\u0026#34; :deadline today :order 2) (:name \u0026#34;Due Soon\u0026#34; :deadline future :order 8) (:name \u0026#34;Overdue\u0026#34; :deadline past :face error :order 7) (:name \u0026#34;Assignments\u0026#34; :tag \u0026#34;Assignment\u0026#34; :order 10) (:name \u0026#34;Issues\u0026#34; :tag \u0026#34;Issue\u0026#34; :order 12) (:name \u0026#34;Emacs\u0026#34; :tag \u0026#34;Emacs\u0026#34; :order 13) (:name \u0026#34;Projects\u0026#34; :tag \u0026#34;Project\u0026#34; :order 14) (:name \u0026#34;Research\u0026#34; :tag \u0026#34;Research\u0026#34; :order 15) (:name \u0026#34;To read\u0026#34; :tag \u0026#34;Read\u0026#34; :order 30) (:name \u0026#34;Waiting\u0026#34; :todo \u0026#34;WAIT\u0026#34; :order 20) (:name \u0026#34;University\u0026#34; :tag \u0026#34;Univ\u0026#34; :order 32) (:name \u0026#34;Trivial\u0026#34; :priority\u0026lt;= \u0026#34;E\u0026#34; :tag (\u0026#34;Trivial\u0026#34; \u0026#34;Unimportant\u0026#34;) :todo (\u0026#34;SOMEDAY\u0026#34;) :order 90) (:discard (:tag (\u0026#34;Chore\u0026#34; \u0026#34;Routine\u0026#34; \u0026#34;Daily\u0026#34;)))))))))))) Calendar Google calendar (org-gcal) I store my org-gcal configuration privately, it contains something like this:\n(setq org-gcal-client-id \u0026#34;\u0026lt;SOME_ID\u0026gt;.apps.googleusercontent.com\u0026#34; org-gcal-client-secret \u0026#34;\u0026lt;SOME_SECRET\u0026gt;\u0026#34; org-gcal-fetch-file-alist \u0026#39;((\u0026#34;\u0026lt;USERNAME\u0026gt;@gmail.com\u0026#34; . \u0026#34;~/Dropbox/Org/gcal-agenda.org\u0026#34;))) (after! org-gcal (load! \u0026#34;lisp/private/+org-gcal.el\u0026#34;)) TODO CalDAV Need to be configured, see the GitHub repo.\n(use-package! caldav :commands (org-caldav-sync)) Capture Set capture files\n(setq +org-capture-emails-file (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) +org-capture-todo-file (expand-file-name \u0026#34;inbox.org\u0026#34; org-directory) +org-capture-projects-file (expand-file-name \u0026#34;projects.org\u0026#34; org-directory)) Let\u0026rsquo;s set up some org-capture templates, and make them visually nice to access.\n(use-package! doct :commands (doct)) (after! org-capture \u0026lt;\u0026lt;prettify-capture\u0026gt;\u0026gt; (defun +doct-icon-declaration-to-icon (declaration) \u0026#34;Convert :icon declaration to icon\u0026#34; (let ((name (pop declaration)) (set (intern (concat \u0026#34;all-the-icons-\u0026#34; (plist-get declaration :set)))) (face (intern (concat \u0026#34;all-the-icons-\u0026#34; (plist-get declaration :color)))) (v-adjust (or (plist-get declaration :v-adjust) 0.01))) (apply set `(,name :face ,face :v-adjust ,v-adjust)))) (defun +doct-iconify-capture-templates (groups) \u0026#34;Add declaration\u0026#39;s :icon to each template group in GROUPS.\u0026#34; (let ((templates (doct-flatten-lists-in groups))) (setq doct-templates (mapcar (lambda (template) (when-let* ((props (nthcdr (if (= (length template) 4) 2 5) template)) (spec (plist-get (plist-get props :doct) :icon))) (setf (nth 1 template) (concat (+doct-icon-declaration-to-icon spec) \u0026#34;\\t\u0026#34; (nth 1 template)))) template) templates)))) (setq doct-after-conversion-functions \u0026#39;(+doct-iconify-capture-templates)) (defun set-org-capture-templates () (setq org-capture-templates (doct `((\u0026#34;Personal todo\u0026#34; :keys \u0026#34;t\u0026#34; :icon (\u0026#34;checklist\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;green\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Inbox\u0026#34; :type entry :template (\u0026#34;* TODO %?\u0026#34; \u0026#34;%i %a\u0026#34;)) (\u0026#34;Personal note\u0026#34; :keys \u0026#34;n\u0026#34; :icon (\u0026#34;sticky-note-o\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;green\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Inbox\u0026#34; :type entry :template (\u0026#34;* %?\u0026#34; \u0026#34;%i %a\u0026#34;)) (\u0026#34;Email\u0026#34; :keys \u0026#34;e\u0026#34; :icon (\u0026#34;envelope\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Inbox\u0026#34; :type entry :template (\u0026#34;* TODO %^{type|reply to|contact} %\\\\3 %? ✉️\u0026#34; \u0026#34;Send an email %^{urgancy|soon|ASAP|anon|at some point|eventually} to %^{recipiant}\u0026#34; \u0026#34;about %^{topic}\u0026#34; \u0026#34;%U %i %a\u0026#34;)) (\u0026#34;Interesting\u0026#34; :keys \u0026#34;i\u0026#34; :icon (\u0026#34;eye\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;lcyan\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Interesting\u0026#34; :type entry :template (\u0026#34;* [ ] %{desc}%? :%{i-type}:\u0026#34; \u0026#34;%i %a\u0026#34;) :children ((\u0026#34;Webpage\u0026#34; :keys \u0026#34;w\u0026#34; :icon (\u0026#34;globe\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;green\u0026#34;) :desc \u0026#34;%(org-cliplink-capture) \u0026#34; :i-type \u0026#34;read:web\u0026#34;) (\u0026#34;Article\u0026#34; :keys \u0026#34;a\u0026#34; :icon (\u0026#34;file-text\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :desc \u0026#34;\u0026#34; :i-type \u0026#34;read:reaserch\u0026#34;) (\u0026#34;Information\u0026#34; :keys \u0026#34;i\u0026#34; :icon (\u0026#34;info-circle\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;) :desc \u0026#34;\u0026#34; :i-type \u0026#34;read:info\u0026#34;) (\u0026#34;Idea\u0026#34; :keys \u0026#34;I\u0026#34; :icon (\u0026#34;bubble_chart\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;silver\u0026#34;) :desc \u0026#34;\u0026#34; :i-type \u0026#34;idea\u0026#34;))) (\u0026#34;Tasks\u0026#34; :keys \u0026#34;k\u0026#34; :icon (\u0026#34;inbox\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :file +org-capture-todo-file :prepend t :headline \u0026#34;Tasks\u0026#34; :type entry :template (\u0026#34;* TODO %? %^G%{extra}\u0026#34; \u0026#34;%i %a\u0026#34;) :children ((\u0026#34;General Task\u0026#34; :keys \u0026#34;k\u0026#34; :icon (\u0026#34;inbox\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :extra \u0026#34;\u0026#34;) (\u0026#34;Task with deadline\u0026#34; :keys \u0026#34;d\u0026#34; :icon (\u0026#34;timer\u0026#34; :set \u0026#34;material\u0026#34; :color \u0026#34;orange\u0026#34; :v-adjust -0.1) :extra \u0026#34;\\nDEADLINE: %^{Deadline:}t\u0026#34;) (\u0026#34;Scheduled Task\u0026#34; :keys \u0026#34;s\u0026#34; :icon (\u0026#34;calendar\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;orange\u0026#34;) :extra \u0026#34;\\nSCHEDULED: %^{Start time:}t\u0026#34;))) (\u0026#34;Project\u0026#34; :keys \u0026#34;p\u0026#34; :icon (\u0026#34;repo\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;silver\u0026#34;) :prepend t :type entry :headline \u0026#34;Inbox\u0026#34; :template (\u0026#34;* %{time-or-todo} %?\u0026#34; \u0026#34;%i\u0026#34; \u0026#34;%a\u0026#34;) :file \u0026#34;\u0026#34; :custom (:time-or-todo \u0026#34;\u0026#34;) :children ((\u0026#34;Project-local todo\u0026#34; :keys \u0026#34;t\u0026#34; :icon (\u0026#34;checklist\u0026#34; :set \u0026#34;octicon\u0026#34; :color \u0026#34;green\u0026#34;) :time-or-todo \u0026#34;TODO\u0026#34; :file +org-capture-project-todo-file) (\u0026#34;Project-local note\u0026#34; :keys \u0026#34;n\u0026#34; :icon (\u0026#34;sticky-note\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;yellow\u0026#34;) :time-or-todo \u0026#34;%U\u0026#34; :file +org-capture-project-notes-file) (\u0026#34;Project-local changelog\u0026#34; :keys \u0026#34;c\u0026#34; :icon (\u0026#34;list\u0026#34; :set \u0026#34;faicon\u0026#34; :color \u0026#34;blue\u0026#34;) :time-or-todo \u0026#34;%U\u0026#34; :heading \u0026#34;Unreleased\u0026#34; :file +org-capture-project-changelog-file))) (\u0026#34;\\tCentralised project templates\u0026#34; :keys \u0026#34;o\u0026#34; :type entry :prepend t :template (\u0026#34;* %{time-or-todo} %?\u0026#34; \u0026#34;%i\u0026#34; \u0026#34;%a\u0026#34;) :children ((\u0026#34;Project todo\u0026#34; :keys \u0026#34;t\u0026#34; :prepend nil :time-or-todo \u0026#34;TODO\u0026#34; :heading \u0026#34;Tasks\u0026#34; :file +org-capture-central-project-todo-file) (\u0026#34;Project note\u0026#34; :keys \u0026#34;n\u0026#34; :time-or-todo \u0026#34;%U\u0026#34; :heading \u0026#34;Notes\u0026#34; :file +org-capture-central-project-notes-file) (\u0026#34;Project changelog\u0026#34; :keys \u0026#34;c\u0026#34; :time-or-todo \u0026#34;%U\u0026#34; :heading \u0026#34;Unreleased\u0026#34; :file +org-capture-central-project-changelog-file))))))) (set-org-capture-templates) (unless (display-graphic-p) (add-hook \u0026#39;server-after-make-frame-hook (defun org-capture-reinitialise-hook () (when (display-graphic-p) (set-org-capture-templates) (remove-hook \u0026#39;server-after-make-frame-hook #\u0026#39;org-capture-reinitialise-hook)))))) It would also be nice to improve how the capture dialogue looks\n(defun org-capture-select-template-prettier (\u0026amp;optional keys) \u0026#34;Select a capture template, in a prettier way than default Lisp programs can force the template by setting KEYS to a string.\u0026#34; (let ((org-capture-templates (or (org-contextualize-keys (org-capture-upgrade-templates org-capture-templates) org-capture-templates-contexts) \u0026#39;((\u0026#34;t\u0026#34; \u0026#34;Task\u0026#34; entry (file+headline \u0026#34;\u0026#34; \u0026#34;Tasks\u0026#34;) \u0026#34;* TODO %?\\n %u\\n %a\u0026#34;))))) (if keys (or (assoc keys org-capture-templates) (error \u0026#34;No capture template referred to by \\\u0026#34;%s\\\u0026#34; keys\u0026#34; keys)) (org-mks org-capture-templates \u0026#34;Select a capture template\\n━━━━━━━━━━━━━━━━━━━━━━━━━\u0026#34; \u0026#34;Template key: \u0026#34; `((\u0026#34;q\u0026#34; ,(concat (all-the-icons-octicon \u0026#34;stop\u0026#34; :face \u0026#39;all-the-icons-red :v-adjust 0.01) \u0026#34;\\tAbort\u0026#34;))))))) (advice-add \u0026#39;org-capture-select-template :override #\u0026#39;org-capture-select-template-prettier) (defun org-mks-pretty (table title \u0026amp;optional prompt specials) \u0026#34;Select a member of an alist with multiple keys. Prettified. TABLE is the alist which should contain entries where the car is a string. There should be two types of entries. 1. prefix descriptions like (\\\u0026#34;a\\\u0026#34; \\\u0026#34;Description\\\u0026#34;) This indicates that `a\u0026#39; is a prefix key for multi-letter selection, and that there are entries following with keys like \\\u0026#34;ab\\\u0026#34;, \\\u0026#34;ax\\\u0026#34;… 2. Select-able members must have more than two elements, with the first being the string of keys that lead to selecting it, and the second a short description string of the item. The command will then make a temporary buffer listing all entries that can be selected with a single key, and all the single key prefixes. When you press the key for a single-letter entry, it is selected. When you press a prefix key, the commands (and maybe further prefixes) under this key will be shown and offered for selection. TITLE will be placed over the selection in the temporary buffer, PROMPT will be used when prompting for a key. SPECIALS is an alist with (\\\u0026#34;key\\\u0026#34; \\\u0026#34;description\\\u0026#34;) entries. When one of these is selected, only the bare key is returned.\u0026#34; (save-window-excursion (let ((inhibit-quit t) (buffer (org-switch-to-buffer-other-window \u0026#34;*Org Select*\u0026#34;)) (prompt (or prompt \u0026#34;Select: \u0026#34;)) case-fold-search current) (unwind-protect (catch \u0026#39;exit (while t (setq-local evil-normal-state-cursor (list nil)) (erase-buffer) (insert title \u0026#34;\\n\\n\u0026#34;) (let ((des-keys nil) (allowed-keys \u0026#39;(\u0026#34;\\C-g\u0026#34;)) (tab-alternatives \u0026#39;(\u0026#34;\\s\u0026#34; \u0026#34;\\t\u0026#34; \u0026#34;\\r\u0026#34;)) (cursor-type nil)) ;; Populate allowed keys and descriptions keys ;; available with CURRENT selector. (let ((re (format \u0026#34;\\\\`%s\\\\(.\\\\)\\\\\u0026#39;\u0026#34; (if current (regexp-quote current) \u0026#34;\u0026#34;))) (prefix (if current (concat current \u0026#34; \u0026#34;) \u0026#34;\u0026#34;))) (dolist (entry table) (pcase entry ;; Description. (`(,(and key (pred (string-match re))) ,desc) (let ((k (match-string 1 key))) (push k des-keys) ;; Keys ending in tab, space or RET are equivalent. (if (member k tab-alternatives) (push \u0026#34;\\t\u0026#34; allowed-keys) (push k allowed-keys)) (insert (propertize prefix \u0026#39;face \u0026#39;font-lock-comment-face) (propertize k \u0026#39;face \u0026#39;bold) (propertize \u0026#34;›\u0026#34; \u0026#39;face \u0026#39;font-lock-comment-face) \u0026#34; \u0026#34; desc \u0026#34;…\u0026#34; \u0026#34;\\n\u0026#34;))) ;; Usable entry. (`(,(and key (pred (string-match re))) ,desc . ,_) (let ((k (match-string 1 key))) (insert (propertize prefix \u0026#39;face \u0026#39;font-lock-comment-face) (propertize k \u0026#39;face \u0026#39;bold) \u0026#34; \u0026#34; desc \u0026#34;\\n\u0026#34;) (push k allowed-keys))) (_ nil)))) ;; Insert special entries, if any. (when specials (insert \u0026#34;─────────────────────────\\n\u0026#34;) (pcase-dolist (`(,key ,description) specials) (insert (format \u0026#34;%s %s\\n\u0026#34; (propertize key \u0026#39;face \u0026#39;(bold all-the-icons-red)) description)) (push key allowed-keys))) ;; Display UI and let user select an entry or ;; a sublevel prefix. (goto-char (point-min)) (unless (pos-visible-in-window-p (point-max)) (org-fit-window-to-buffer)) (let ((pressed (org--mks-read-key allowed-keys prompt (not (pos-visible-in-window-p (1- (point-max))))))) (setq current (concat current pressed)) (cond ((equal pressed \u0026#34;\\C-g\u0026#34;) (user-error \u0026#34;Abort\u0026#34;)) ;; Selection is a prefix: open a new menu. ((member pressed des-keys)) ;; Selection matches an association: return it. ((let ((entry (assoc current table))) (and entry (throw \u0026#39;exit entry)))) ;; Selection matches a special entry: return the ;; selection prefix. ((assoc current specials) (throw \u0026#39;exit current)) (t (error \u0026#34;No entry available\u0026#34;))))))) (when buffer (kill-buffer buffer)))))) (advice-add \u0026#39;org-mks :override #\u0026#39;org-mks-pretty) The org-capture bin is rather nice, but I\u0026rsquo;d be nicer with a smaller frame, and no modeline.\n(setf (alist-get \u0026#39;height +org-capture-frame-parameters) 15) ;; (alist-get \u0026#39;name +org-capture-frame-parameters) \u0026#34;❖ Capture\u0026#34;) ;; ATM hardcoded in other places, so changing breaks stuff (setq +org-capture-fn (lambda () (interactive) (set-window-parameter nil \u0026#39;mode-line-format \u0026#39;none) (org-capture))) Snippet Helpers I often want to set src-block headers, and it\u0026rsquo;s a pain to:\ntype them out remember what the accepted values are oh, and specifying the same language again and again We can solve this in three steps:\nhaving one-letter snippets, conditioned on (point) being within a src header creating a nice prompt showing accepted values and the current default pre-filling the src-block language with the last language used For header args, the keys I\u0026rsquo;ll use are:\nr for :results e for :exports v for :eval s for :session d for :dir (defun +yas/org-src-header-p () \u0026#34;Determine whether `point\u0026#39; is within a src-block header or header-args.\u0026#34; (pcase (org-element-type (org-element-context)) (\u0026#39;src-block (\u0026lt; (point) ; before code part of the src-block (save-excursion (goto-char (org-element-property :begin (org-element-context))) (forward-line 1) (point)))) (\u0026#39;inline-src-block (\u0026lt; (point) ; before code part of the inline-src-block (save-excursion (goto-char (org-element-property :begin (org-element-context))) (search-forward \u0026#34;]{\u0026#34;) (point)))) (\u0026#39;keyword (string-match-p \u0026#34;^header-args\u0026#34; (org-element-property :value (org-element-context)))))) Now let\u0026rsquo;s write a function we can reference in YASnippets to produce a nice interactive way to specify header arguments.\n(defun +yas/org-prompt-header-arg (arg question values) \u0026#34;Prompt the user to set ARG header property to one of VALUES with QUESTION. The default value is identified and indicated. If either default is selected, or no selection is made: nil is returned.\u0026#34; (let* ((src-block-p (not (looking-back \u0026#34;^#\\\\+property:[ \\t]+header-args:.*\u0026#34; (line-beginning-position)))) (default (or (cdr (assoc arg (if src-block-p (nth 2 (org-babel-get-src-block-info t)) (org-babel-merge-params org-babel-default-header-args (let ((lang-headers (intern (concat \u0026#34;org-babel-default-header-args:\u0026#34; (+yas/org-src-lang))))) (when (boundp lang-headers) (eval lang-headers t))))))) \u0026#34;\u0026#34;)) default-value) (setq values (mapcar (lambda (value) (if (string-match-p (regexp-quote value) default) (setq default-value (concat value \u0026#34; \u0026#34; (propertize \u0026#34;(default)\u0026#34; \u0026#39;face \u0026#39;font-lock-doc-face))) value)) values)) (let ((selection (consult--read question values :default default-value))) (unless (or (string-match-p \u0026#34;(default)$\u0026#34; selection) (string= \u0026#34;\u0026#34; selection)) selection)))) Finally, we fetch the language information for new source blocks.\nSince we\u0026rsquo;re getting this info, we might as well go a step further and also provide the ability to determine the most popular language in the buffer that doesn\u0026rsquo;t have any header-args set for it (with #+properties).\n(defun +yas/org-src-lang () \u0026#34;Try to find the current language of the src/header at `point\u0026#39;. Return nil otherwise.\u0026#34; (let ((context (org-element-context))) (pcase (org-element-type context) (\u0026#39;src-block (org-element-property :language context)) (\u0026#39;inline-src-block (org-element-property :language context)) (\u0026#39;keyword (when (string-match \u0026#34;^header-args:\\\\([^ ]+\\\\)\u0026#34; (org-element-property :value context)) (match-string 1 (org-element-property :value context))))))) (defun +yas/org-last-src-lang () \u0026#34;Return the language of the last src-block, if it exists.\u0026#34; (save-excursion (beginning-of-line) (when (re-search-backward \u0026#34;^[ \\t]*#\\\\+begin_src\u0026#34; nil t) (org-element-property :language (org-element-context))))) (defun +yas/org-most-common-no-property-lang () \u0026#34;Find the lang with the most source blocks that has no global header-args, else nil.\u0026#34; (let (src-langs header-langs) (save-excursion (goto-char (point-min)) (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+begin_src\u0026#34; nil t) (push (+yas/org-src-lang) src-langs)) (goto-char (point-min)) (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+property: +header-args\u0026#34; nil t) (push (+yas/org-src-lang) header-langs))) (setq src-langs (mapcar #\u0026#39;car ;; sort alist by frequency (desc.) (sort ;; generate alist with form (value . frequency) (cl-loop for (n . m) in (seq-group-by #\u0026#39;identity src-langs) collect (cons n (length m))) (lambda (a b) (\u0026gt; (cdr a) (cdr b)))))) (car (cl-set-difference src-langs header-langs :test #\u0026#39;string=)))) Translate capital keywords to lower case Everyone used to use #+CAPITAL keywords. Then people realised that #+lowercase is actually both marginally easier and visually nicer, so now the capital version is just used in the manual.\nOrg is standardized on lower case. Uppercase is used in the manual as a poor man\u0026rsquo;s bold, and supported for historical reasons. \u0026mdash; Nicolas Goaziou\n(defun +org-syntax-convert-keyword-case-to-lower () \u0026#34;Convert all #+KEYWORDS to #+keywords.\u0026#34; (interactive) (save-excursion (goto-char (point-min)) (let ((count 0) (case-fold-search nil)) (while (re-search-forward \u0026#34;^[ \\t]*#\\\\+[A-Z_]+\u0026#34; nil t) (unless (s-matches-p \u0026#34;RESULTS\u0026#34; (match-string 0)) (replace-match (downcase (match-string 0)) t) (setq count (1+ count)))) (message \u0026#34;Replaced %d occurances\u0026#34; count)))) Org notifier Add support for org-wild-notifier.\n(use-package! org-wild-notifier :hook (org-load . org-wild-notifier-mode) :config (setq org-wild-notifier-alert-time \u0026#39;(60 30))) Org menu (use-package! org-menu :commands (org-menu) :init (map! :localleader :map org-mode-map :desc \u0026#34;Org menu\u0026#34; \u0026#34;M\u0026#34; #\u0026#39;org-menu)) LSP in src blocks (when (and (modulep! :tools lsp) (not (modulep! :tools lsp +eglot))) (cl-defmacro +lsp-org-babel-enable (lang) \u0026#34;Support LANG in org source code block.\u0026#34; ;; (setq centaur-lsp \u0026#39;lsp-mode) (cl-check-type lang stringp) (let* ((edit-pre (intern (format \u0026#34;org-babel-edit-prep:%s\u0026#34; lang))) (intern-pre (intern (format \u0026#34;lsp--%s\u0026#34; (symbol-name edit-pre))))) `(progn (defun ,intern-pre (info) (let ((file-name (-\u0026gt;\u0026gt; info caddr (alist-get :file)))) (unless file-name (setq file-name (make-temp-file \u0026#34;babel-lsp-\u0026#34;))) (setq buffer-file-name file-name) (lsp-deferred))) (put \u0026#39;,intern-pre \u0026#39;function-documentation (format \u0026#34;Enable lsp-mode in the buffer of org source block (%s).\u0026#34; (upcase ,lang))) (if (fboundp \u0026#39;,edit-pre) (advice-add \u0026#39;,edit-pre :after \u0026#39;,intern-pre) (progn (defun ,edit-pre (info) (,intern-pre info)) (put \u0026#39;,edit-pre \u0026#39;function-documentation (format \u0026#34;Prepare local buffer environment for org source block (%s).\u0026#34; (upcase ,lang)))))))) (defvar +org-babel-lang-list \u0026#39;(\u0026#34;go\u0026#34; \u0026#34;python\u0026#34; \u0026#34;ipython\u0026#34; \u0026#34;bash\u0026#34; \u0026#34;sh\u0026#34;)) (dolist (lang +org-babel-lang-list) (eval `(+lsp-org-babel-enable ,lang)))) Custom links Sub-figures This defines a new link type subfig to enable exporting sub-figures to LaTeX, taken form \u0026ldquo;Export subfigures to LaTeX (and HTML)\u0026rdquo;.\n(org-link-set-parameters \u0026#34;subfig\u0026#34; :follow (lambda (file) (find-file file)) :face \u0026#39;(:foreground \u0026#34;chocolate\u0026#34; :weight bold :underline t) :display \u0026#39;full :export (lambda (file desc backend) (when (eq backend \u0026#39;latex) (if (string-match \u0026#34;\u0026gt;(\\\\(.+\\\\))\u0026#34; desc) (concat \u0026#34;\\\\begin{subfigure}[b]\u0026#34; \u0026#34;\\\\caption{\u0026#34; (replace-regexp-in-string \u0026#34;\\s+\u0026gt;(.+)\u0026#34; \u0026#34;\u0026#34; desc) \u0026#34;}\u0026#34; \u0026#34;\\\\includegraphics\u0026#34; \u0026#34;[\u0026#34; (match-string 1 desc) \u0026#34;]\u0026#34; \u0026#34;{\u0026#34; file \u0026#34;}\u0026#34; \u0026#34;\\\\end{subfigure}\u0026#34;) (format \u0026#34;\\\\begin{subfigure}\\\\includegraphics{%s}\\\\end{subfigure}\u0026#34; desc file))))) Example of usage:\n#+caption: Lorem impsum dolor #+attr_latex: :options \\centering #+begin_figure [[subfig:img1.jpg][Caption of img1 \u0026gt;(width=.3\\textwidth)]] [[subfig:img2.jpg][Caption of img2 \u0026gt;(width=.3\\textwidth)]] [[subfig:img3.jpg][Caption of img3 \u0026gt;(width=.6\\textwidth)]] #+end_figure LaTeX inline markup Needs to make a ?, with this hack you can write [[latex:textsc][Some text]].\n(org-add-link-type \u0026#34;latex\u0026#34; nil (lambda (path desc format) (cond ((eq format \u0026#39;html) (format \u0026#34;\u0026lt;span class=\\\u0026#34;%s\\\u0026#34;\u0026gt;%s\u0026lt;/span\u0026gt;\u0026#34; path desc)) ((eq format \u0026#39;latex) (format \u0026#34;\\\\%s{%s}\u0026#34; path desc))))) Visuals Here I try to do two things: improve the styling of the various documents, via font changes etc., and also propagate colours from the current theme.\nFont display Headings Let\u0026rsquo;s make the title and the headings a bit bigger:\n(custom-set-faces! \u0026#39;(org-document-title :height 1.2)) (custom-set-faces! \u0026#39;(outline-1 :weight extra-bold :height 1.25) \u0026#39;(outline-2 :weight bold :height 1.15) \u0026#39;(outline-3 :weight bold :height 1.12) \u0026#39;(outline-4 :weight semi-bold :height 1.09) \u0026#39;(outline-5 :weight semi-bold :height 1.06) \u0026#39;(outline-6 :weight semi-bold :height 1.03) \u0026#39;(outline-8 :weight semi-bold) \u0026#39;(outline-9 :weight semi-bold)) Deadlines It seems reasonable to have deadlines in the error face when they\u0026rsquo;re passed.\n(setq org-agenda-deadline-faces \u0026#39;((1.001 . error) (1.000 . org-warning) (0.500 . org-upcoming-deadline) (0.000 . org-upcoming-distant-deadline))) Font styling We can then have quote blocks stand out a bit more by making them italic.\n(setq org-fontify-quote-and-verse-blocks t) While org-hide-emphasis-markers is very nice, it can sometimes make edits which occur at the border a bit more fiddley. We can improve this situation without sacrificing visual amenities with the org-appear package.\n(use-package! org-appear :hook (org-mode . org-appear-mode) :config (setq org-appear-autoemphasis t org-appear-autosubmarkers t org-appear-autolinks nil) ;; for proper first-time setup, `org-appear--set-elements\u0026#39; ;; needs to be run after other hooks have acted. (run-at-time nil nil #\u0026#39;org-appear--set-elements)) Inline blocks (setq org-inline-src-prettify-results \u0026#39;(\u0026#34;⟨\u0026#34; . \u0026#34;⟩\u0026#34;) doom-themes-org-fontify-special-tags nil) Org Modern (use-package! org-modern :hook (org-mode . org-modern-mode) :config (setq org-modern-star \u0026#39;(\u0026#34;◉\u0026#34; \u0026#34;○\u0026#34; \u0026#34;◈\u0026#34; \u0026#34;◇\u0026#34; \u0026#34;✳\u0026#34; \u0026#34;◆\u0026#34; \u0026#34;✸\u0026#34; \u0026#34;▶\u0026#34;) org-modern-table-vertical 2 org-modern-table-horizontal 4 org-modern-list \u0026#39;((43 . \u0026#34;➤\u0026#34;) (45 . \u0026#34;–\u0026#34;) (42 . \u0026#34;•\u0026#34;)) org-modern-footnote (cons nil (cadr org-script-display)) org-modern-priority t org-modern-block t org-modern-block-fringe nil org-modern-horizontal-rule t org-modern-keyword \u0026#39;((t . t) (\u0026#34;title\u0026#34; . \u0026#34;𝙏\u0026#34;) (\u0026#34;subtitle\u0026#34; . \u0026#34;𝙩\u0026#34;) (\u0026#34;author\u0026#34; . \u0026#34;𝘼\u0026#34;) (\u0026#34;email\u0026#34; . \u0026#34;@\u0026#34;) (\u0026#34;date\u0026#34; . \u0026#34;𝘿\u0026#34;) (\u0026#34;lastmod\u0026#34; . \u0026#34;✎\u0026#34;) (\u0026#34;property\u0026#34; . \u0026#34;☸\u0026#34;) (\u0026#34;options\u0026#34; . \u0026#34;⌥\u0026#34;) (\u0026#34;startup\u0026#34; . \u0026#34;⏻\u0026#34;) (\u0026#34;macro\u0026#34; . \u0026#34;𝓜\u0026#34;) (\u0026#34;bind\u0026#34; . #(\u0026#34;\u0026#34; 0 1 (display (raise -0.1)))) (\u0026#34;bibliography\u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;print_bibliography\u0026#34; . #(\u0026#34;\u0026#34; 0 1 (display (raise -0.1)))) (\u0026#34;cite_export\u0026#34; . \u0026#34;⮭\u0026#34;) (\u0026#34;print_glossary\u0026#34; . #(\u0026#34;ᴬᶻ\u0026#34; 0 1 (display (raise -0.1)))) (\u0026#34;glossary_sources\u0026#34; . #(\u0026#34;\u0026#34; 0 1 (display (raise -0.14)))) (\u0026#34;export_file_name\u0026#34; . \u0026#34;⇒\u0026#34;) (\u0026#34;include\u0026#34; . \u0026#34;⇤\u0026#34;) (\u0026#34;setupfile\u0026#34; . \u0026#34;⇐\u0026#34;) (\u0026#34;html_head\u0026#34; . \u0026#34;🅷\u0026#34;) (\u0026#34;html\u0026#34; . \u0026#34;🅗\u0026#34;) (\u0026#34;latex_class\u0026#34; . \u0026#34;🄻\u0026#34;) (\u0026#34;latex_class_options\u0026#34; . #(\u0026#34;🄻\u0026#34; 1 2 (display (raise -0.14)))) (\u0026#34;latex_header\u0026#34; . \u0026#34;🅻\u0026#34;) (\u0026#34;latex_header_extra\u0026#34; . \u0026#34;🅻⁺\u0026#34;) (\u0026#34;latex\u0026#34; . \u0026#34;🅛\u0026#34;) (\u0026#34;beamer_theme\u0026#34; . \u0026#34;🄱\u0026#34;) (\u0026#34;beamer_color_theme\u0026#34; . #(\u0026#34;🄱\u0026#34; 1 2 (display (raise -0.12)))) (\u0026#34;beamer_font_theme\u0026#34; . \u0026#34;🄱𝐀\u0026#34;) (\u0026#34;beamer_header\u0026#34; . \u0026#34;🅱\u0026#34;) (\u0026#34;beamer\u0026#34; . \u0026#34;🅑\u0026#34;) (\u0026#34;attr_latex\u0026#34; . \u0026#34;🄛\u0026#34;) (\u0026#34;attr_html\u0026#34; . \u0026#34;🄗\u0026#34;) (\u0026#34;attr_org\u0026#34; . \u0026#34;⒪\u0026#34;) (\u0026#34;name\u0026#34; . \u0026#34;⁍\u0026#34;) (\u0026#34;header\u0026#34; . \u0026#34;›\u0026#34;) (\u0026#34;caption\u0026#34; . \u0026#34;☰\u0026#34;) (\u0026#34;RESULTS\u0026#34; . \u0026#34;🠶\u0026#34;) (\u0026#34;language\u0026#34; . \u0026#34;𝙇\u0026#34;) (\u0026#34;hugo_base_dir\u0026#34; . \u0026#34;𝐇\u0026#34;) (\u0026#34;latex_compiler\u0026#34; . \u0026#34;⟾\u0026#34;) (\u0026#34;results\u0026#34; . \u0026#34;🠶\u0026#34;) (\u0026#34;filetags\u0026#34; . \u0026#34;#\u0026#34;) (\u0026#34;created\u0026#34; . \u0026#34;⏱\u0026#34;) (\u0026#34;export_select_tags\u0026#34; . \u0026#34;✔\u0026#34;) (\u0026#34;export_exclude_tags\u0026#34; . \u0026#34;❌\u0026#34;))) ;; Change faces (custom-set-faces! \u0026#39;(org-modern-tag :inherit (region org-modern-label))) (custom-set-faces! \u0026#39;(org-modern-statistics :inherit org-checkbox-statistics-todo))) Not let\u0026rsquo;s remove the overlap between the substitutions we set here and those that Doom applies via :ui ligatures and :lang org.\n(when (modulep! :ui ligatures) (defadvice! +org-init-appearance-h--no-ligatures-a () :after #\u0026#39;+org-init-appearance-h (set-ligatures! \u0026#39;org-mode :name nil :src_block nil :src_block_end nil :quote nil :quote_end nil))) We’ll bind this to O on the org-mode localleader, and manually apply a PR recognising the pgtk window system.\n(use-package! org-ol-tree :commands org-ol-tree :config (setq org-ol-tree-ui-icon-set (if (and (display-graphic-p) (fboundp \u0026#39;all-the-icons-material)) \u0026#39;all-the-icons \u0026#39;unicode)) (org-ol-tree-ui--update-icon-set)) (map! :localleader :map org-mode-map :desc \u0026#34;Outline\u0026#34; \u0026#34;O\u0026#34; #\u0026#39;org-ol-tree) Image previews (defvar +org-responsive-image-percentage 0.4) (defvar +org-responsive-image-width-limits \u0026#39;(400 . 700)) ;; \u0026#39;(min-width . max-width) (defun +org--responsive-image-h () (when (eq major-mode \u0026#39;org-mode) (setq org-image-actual-width (max (car +org-responsive-image-width-limits) (min (cdr +org-responsive-image-width-limits) (truncate (* (window-pixel-width) +org-responsive-image-percentage))))))) (add-hook \u0026#39;window-configuration-change-hook #\u0026#39;+org--responsive-image-h) List bullet sequence I think it makes sense to have list bullets change with depth\n(setq org-list-demote-modify-bullet \u0026#39;((\u0026#34;+\u0026#34; . \u0026#34;-\u0026#34;) (\u0026#34;-\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;*\u0026#34; . \u0026#34;+\u0026#34;) (\u0026#34;1.\u0026#34; . \u0026#34;a.\u0026#34;))) Symbols ;; Org styling, hide markup etc. (setq org-hide-emphasis-markers t org-pretty-entities t org-ellipsis \u0026#34; ↩\u0026#34; org-hide-leading-stars t) ;; org-priority-highest ?A ;; org-priority-lowest ?E ;; org-priority-faces ;; \u0026#39;((?A . \u0026#39;all-the-icons-red) ;; (?B . \u0026#39;all-the-icons-orange) ;; (?C . \u0026#39;all-the-icons-yellow) ;; (?D . \u0026#39;all-the-icons-green) ;; (?E . \u0026#39;all-the-icons-blue))) LaTeX fragments Prettier highlighting First off, we want those fragments to look good.\n(setq org-highlight-latex-and-related \u0026#39;(native script entities)) (require \u0026#39;org-src) (add-to-list \u0026#39;org-src-block-faces \u0026#39;(\u0026#34;latex\u0026#34; (:inherit default :extend t))) Prettier rendering Since we can, instead of making the background color match the default face, let\u0026rsquo;s make it transparent.\n(setq org-format-latex-options (plist-put org-format-latex-options :background \u0026#34;Transparent\u0026#34;)) ;; Can be dvipng, dvisvgm, imagemagick (setq org-preview-latex-default-process \u0026#39;dvisvgm) ;; Define a function to set the format latex scale (to be reused in hooks) (defun +org-format-latex-set-scale (scale) (setq-local org-format-latex-options (plist-put org-format-latex-options :scale scale))) ;; Set the default scale (+org-format-latex-set-scale 1.4) Better equation numbering Numbered equations all have (1) as the number for fragments with vanilla org-mode. This code (from scimax) injects the correct numbers into the previews, so they look good.\nThis hack is not properly working right now!, it seems to work only with align blocks. NEEDS INVESTIGATION.\n(defun +parse-the-fun (str) \u0026#34;Parse the LaTeX environment STR. Return an AST with newlines counts in each level.\u0026#34; (let (ast) (with-temp-buffer (insert str) (goto-char (point-min)) (while (re-search-forward (rx \u0026#34;\\\\\u0026#34; (group (or \u0026#34;\\\\\u0026#34; \u0026#34;begin\u0026#34; \u0026#34;end\u0026#34; \u0026#34;nonumber\u0026#34;)) (zero-or-one \u0026#34;{\u0026#34; (group (zero-or-more not-newline)) \u0026#34;}\u0026#34;)) nil t) (let ((cmd (match-string 1)) (env (match-string 2))) (cond ((string= cmd \u0026#34;begin\u0026#34;) (push (list :env (intern env)) ast)) ((string= cmd \u0026#34;\\\\\u0026#34;) (let ((curr (pop ast))) (push (plist-put curr :newline (1+ (or (plist-get curr :newline) 0))) ast))) ((string= cmd \u0026#34;nonumber\u0026#34;) (let ((curr (pop ast))) (push (plist-put curr :nonumber (1+ (or (plist-get curr :nonumber) 0))) ast))) ((string= cmd \u0026#34;end\u0026#34;) (let ((child (pop ast)) (parent (pop ast))) (push (plist-put parent :childs (cons child (plist-get parent :childs))) ast))))))) (plist-get (car ast) :childs))) (defun +scimax-org-renumber-environment (orig-func \u0026amp;rest args) \u0026#34;A function to inject numbers in LaTeX fragment previews.\u0026#34; (let ((results \u0026#39;()) (counter -1)) (setq results (cl-loop for (begin . env) in (org-element-map (org-element-parse-buffer) \u0026#39;latex-environment (lambda (env) (cons (org-element-property :begin env) (org-element-property :value env)))) collect (cond ((and (string-match \u0026#34;\\\\\\\\begin{equation}\u0026#34; env) (not (string-match \u0026#34;\\\\\\\\tag{\u0026#34; env))) (cl-incf counter) (cons begin counter)) ((string-match \u0026#34;\\\\\\\\begin{align}\u0026#34; env) (cl-incf counter) (let ((p (car (+parse-the-fun env)))) ;; Parse the `env\u0026#39;, count new lines in the align env as equations, unless (cl-incf counter (- (or (plist-get p :newline) 0) (or (plist-get p :nonumber) 0)))) (cons begin counter)) (t (cons begin nil))))) (when-let ((number (cdr (assoc (point) results)))) (setf (car args) (concat (format \u0026#34;\\\\setcounter{equation}{%s}\\n\u0026#34; number) (car args))))) (apply orig-func args)) (defun +scimax-toggle-latex-equation-numbering (\u0026amp;optional enable) \u0026#34;Toggle whether LaTeX fragments are numbered.\u0026#34; (interactive) (if (or enable (not (get \u0026#39;+scimax-org-renumber-environment \u0026#39;enabled))) (progn (advice-add \u0026#39;org-create-formula-image :around #\u0026#39;+scimax-org-renumber-environment) (put \u0026#39;+scimax-org-renumber-environment \u0026#39;enabled t) (message \u0026#34;LaTeX numbering enabled.\u0026#34;)) (advice-remove \u0026#39;org-create-formula-image #\u0026#39;+scimax-org-renumber-environment) (put \u0026#39;+scimax-org-renumber-environment \u0026#39;enabled nil) (message \u0026#34;LaTeX numbering disabled.\u0026#34;))) (defun +scimax-org-inject-latex-fragment (orig-func \u0026amp;rest args) \u0026#34;Advice function to inject latex code before and/or after the equation in a latex fragment. You can use this to set \\\\mathversion{bold} for example to make it bolder. The way it works is by defining :latex-fragment-pre-body and/or :latex-fragment-post-body in the variable `org-format-latex-options\u0026#39;. These strings will then be injected before and after the code for the fragment before it is made into an image.\u0026#34; (setf (car args) (concat (or (plist-get org-format-latex-options :latex-fragment-pre-body) \u0026#34;\u0026#34;) (car args) (or (plist-get org-format-latex-options :latex-fragment-post-body) \u0026#34;\u0026#34;))) (apply orig-func args)) (defun +scimax-toggle-inject-latex () \u0026#34;Toggle whether you can insert latex in fragments.\u0026#34; (interactive) (if (not (get \u0026#39;+scimax-org-inject-latex-fragment \u0026#39;enabled)) (progn (advice-add \u0026#39;org-create-formula-image :around #\u0026#39;+scimax-org-inject-latex-fragment) (put \u0026#39;+scimax-org-inject-latex-fragment \u0026#39;enabled t) (message \u0026#34;Inject latex enabled\u0026#34;)) (advice-remove \u0026#39;org-create-formula-image #\u0026#39;+scimax-org-inject-latex-fragment) (put \u0026#39;+scimax-org-inject-latex-fragment \u0026#39;enabled nil) (message \u0026#34;Inject latex disabled\u0026#34;))) ;; Enable renumbering by default (+scimax-toggle-latex-equation-numbering t) Fragtog Hook org-fragtog-mode to org-mode.\n(use-package! org-fragtog :hook (org-mode . org-fragtog-mode)) Org plot We can use some variables in org-plot to use the current doom theme colors.\n(after! org-plot (defun org-plot/generate-theme (_type) \u0026#34;Use the current Doom theme colours to generate a GnuPlot preamble.\u0026#34; (format \u0026#34; fgt = \\\u0026#34;textcolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground text fgat = \\\u0026#34;textcolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground alt text fgl = \\\u0026#34;linecolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground line fgal = \\\u0026#34;linecolor rgb \u0026#39;%s\u0026#39;\\\u0026#34; # foreground alt line # foreground colors set border lc rgb \u0026#39;%s\u0026#39; # change text colors of tics set xtics @fgt set ytics @fgt # change text colors of labels set title @fgt set xlabel @fgt set ylabel @fgt # change a text color of key set key @fgt # line styles set linetype 1 lw 2 lc rgb \u0026#39;%s\u0026#39; # red set linetype 2 lw 2 lc rgb \u0026#39;%s\u0026#39; # blue set linetype 3 lw 2 lc rgb \u0026#39;%s\u0026#39; # green set linetype 4 lw 2 lc rgb \u0026#39;%s\u0026#39; # magenta set linetype 5 lw 2 lc rgb \u0026#39;%s\u0026#39; # orange set linetype 6 lw 2 lc rgb \u0026#39;%s\u0026#39; # yellow set linetype 7 lw 2 lc rgb \u0026#39;%s\u0026#39; # teal set linetype 8 lw 2 lc rgb \u0026#39;%s\u0026#39; # violet # palette set palette maxcolors 8 set palette defined ( 0 \u0026#39;%s\u0026#39;,\\ 1 \u0026#39;%s\u0026#39;,\\ 2 \u0026#39;%s\u0026#39;,\\ 3 \u0026#39;%s\u0026#39;,\\ 4 \u0026#39;%s\u0026#39;,\\ 5 \u0026#39;%s\u0026#39;,\\ 6 \u0026#39;%s\u0026#39;,\\ 7 \u0026#39;%s\u0026#39; ) \u0026#34; (doom-color \u0026#39;fg) (doom-color \u0026#39;fg-alt) (doom-color \u0026#39;fg) (doom-color \u0026#39;fg-alt) (doom-color \u0026#39;fg) ;; colours (doom-color \u0026#39;red) (doom-color \u0026#39;blue) (doom-color \u0026#39;green) (doom-color \u0026#39;magenta) (doom-color \u0026#39;orange) (doom-color \u0026#39;yellow) (doom-color \u0026#39;teal) (doom-color \u0026#39;violet) ;; duplicated (doom-color \u0026#39;red) (doom-color \u0026#39;blue) (doom-color \u0026#39;green) (doom-color \u0026#39;magenta) (doom-color \u0026#39;orange) (doom-color \u0026#39;yellow) (doom-color \u0026#39;teal) (doom-color \u0026#39;violet))) (defun org-plot/gnuplot-term-properties (_type) (format \u0026#34;background rgb \u0026#39;%s\u0026#39; size 1050,650\u0026#34; (doom-color \u0026#39;bg))) (setq org-plot/gnuplot-script-preamble #\u0026#39;org-plot/generate-theme org-plot/gnuplot-term-extra #\u0026#39;org-plot/gnuplot-term-properties)) Large tables Use Partial Horizontal Scroll to display long tables without breaking them.\n(use-package! org-phscroll :hook (org-mode . org-phscroll-mode)) Bibliography BibTeX (setq bibtex-completion-bibliography +my/biblio-libraries-list bibtex-completion-library-path +my/biblio-storage-list bibtex-completion-notes-path +my/biblio-notes-path bibtex-completion-notes-template-multiple-files \u0026#34;* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \\n\\nSee [[cite:\u0026amp;${=key=}]]\\n\u0026#34; bibtex-completion-additional-search-fields \u0026#39;(keywords) bibtex-completion-display-formats \u0026#39;((article . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}\u0026#34;) (inbook . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}\u0026#34;) (incollection . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\u0026#34;) (inproceedings . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}\u0026#34;) (t . \u0026#34;${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}\u0026#34;)) bibtex-completion-pdf-open-function (lambda (fpath) (call-process \u0026#34;open\u0026#34; nil 0 nil fpath))) Org-bib A mode to work with annotated bibliography in Org-Mode. See the repo for an example.\n(use-package! org-bib :commands (org-bib-mode)) Org-cite (after! oc (setq org-cite-csl-styles-dir +my/biblio-styles-path) ;; org-cite-global-bibliography +my/biblio-libraries-list) (defun +org-ref-to-org-cite () \u0026#34;Simple conversion of org-ref citations to org-cite syntax.\u0026#34; (interactive) (save-excursion (goto-char (point-min)) (while (re-search-forward \u0026#34;\\\\[cite\\\\(.*\\\\):\\\\([^]]*\\\\)\\\\]\u0026#34; nil t) (let* ((old (substring (match-string 0) 1 (1- (length (match-string 0))))) (new (s-replace \u0026#34;\u0026amp;\u0026#34; \u0026#34;@\u0026#34; old))) (message \u0026#34;Replaced citation %s with %s\u0026#34; old new) (replace-match new)))))) Citar (after! citar (setq citar-library-paths +my/biblio-storage-list citar-notes-paths (list +my/biblio-notes-path) citar-bibliography +my/biblio-libraries-list citar-symbol-separator \u0026#34; \u0026#34;) (when (display-graphic-p) (setq citar-symbols `((file ,(all-the-icons-octicon \u0026#34;file-pdf\u0026#34; :face \u0026#39;error) . \u0026#34; \u0026#34;) (note ,(all-the-icons-octicon \u0026#34;file-text\u0026#34; :face \u0026#39;warning) . \u0026#34; \u0026#34;) (link ,(all-the-icons-octicon \u0026#34;link-external\u0026#34; :face \u0026#39;org-link) . \u0026#34; \u0026#34;))))) (use-package! citar-org-roam :after citar org-roam :no-require :config (citar-org-roam-mode) :init ;; Modified form: https://jethrokuan.github.io/org-roam-guide/ (defun +org-roam-node-from-cite (entry-key) (interactive (list (citar-select-ref))) (let ((title (citar-format--entry \u0026#34;${author editor} (${date urldate}) :: ${title}\u0026#34; (citar-get-entry entry-key)))) (org-roam-capture- :templates \u0026#39;((\u0026#34;r\u0026#34; \u0026#34;reference\u0026#34; plain \u0026#34;%?\u0026#34; :if-new (file+head \u0026#34;references/${citekey}.org\u0026#34; \u0026#34;:properties: :roam_refs: [cite:@${citekey}] 🔚 #+title: ${title}\\n\u0026#34;) :immediate-finish t :unnarrowed t)) :info (list :citekey entry-key) :node (org-roam-node-create :title title) :props \u0026#39;(:finalize find-file))))) Exporting General settings By default, Org only exports the first three levels of headings as headings, the rest is considered as paragraphs. Let\u0026rsquo;s increase this to 5 levels.\n(setq org-export-headline-levels 5) Let\u0026rsquo;s make use of the :ignore: tag from ox-extra, which provides a way to ignore exporting a heading, while exporting the content residing under it (different from :noexport:).\n(require \u0026#39;ox-extra) (ox-extras-activate \u0026#39;(ignore-headlines)) (setq org-export-creator-string (format \u0026#34;Made with Emacs %s and Org %s\u0026#34; emacs-version (org-release))) LaTeX export Compiling ;; `org-latex-compilers\u0026#39; contains a list of possible values for the `%latex\u0026#39; argument. (setq org-latex-pdf-process \u0026#39;(\u0026#34;latexmk -shell-escape -pdf -quiet -f -%latex -interaction=nonstopmode -output-directory=%o %f\u0026#34;)) Org LaTeX packages ;; \u0026#39;svg\u0026#39; package depends on inkscape, imagemagik and ghostscript (when (+all (mapcar \u0026#39;executable-find \u0026#39;(\u0026#34;inkscape\u0026#34; \u0026#34;magick\u0026#34; \u0026#34;gs\u0026#34;))) (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;\u0026#34; \u0026#34;svg\u0026#34;))) (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;svgnames\u0026#34; \u0026#34;xcolor\u0026#34;)) ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;\u0026#34; \u0026#34;fontspec\u0026#34;)) ;; for xelatex ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;utf8\u0026#34; \u0026#34;inputenc\u0026#34;)) Export PDFs with syntax highlighting This is for code syntax highlighting in export. You need to use -shell-escape with latex, and install the python-pygments package.\n;; Should be configured per document, as a local variable ;; (setq org-latex-listings \u0026#39;minted) ;; (add-to-list \u0026#39;org-latex-packages-alist \u0026#39;(\u0026#34;\u0026#34; \u0026#34;minted\u0026#34;)) ;; Default `minted` options, can be overwritten in file/dir locals (setq org-latex-minted-options \u0026#39;((\u0026#34;frame\u0026#34; \u0026#34;lines\u0026#34;) (\u0026#34;fontsize\u0026#34; \u0026#34;\\\\footnotesize\u0026#34;) (\u0026#34;tabsize\u0026#34; \u0026#34;2\u0026#34;) (\u0026#34;breaklines\u0026#34; \u0026#34;true\u0026#34;) (\u0026#34;breakanywhere\u0026#34; \u0026#34;true\u0026#34;) ;; break anywhere, no just on spaces (\u0026#34;style\u0026#34; \u0026#34;default\u0026#34;) (\u0026#34;bgcolor\u0026#34; \u0026#34;GhostWhite\u0026#34;) (\u0026#34;linenos\u0026#34; \u0026#34;true\u0026#34;))) ;; Link some org-mode blocks languages to lexers supported by minted ;; via (pygmentize), you can see supported lexers by running this command ;; in a terminal: `pygmentize -L lexers\u0026#39; (dolist (pair \u0026#39;((ipython \u0026#34;python\u0026#34;) (jupyter \u0026#34;python\u0026#34;) (scheme \u0026#34;scheme\u0026#34;) (lisp-data \u0026#34;lisp\u0026#34;) (conf-unix \u0026#34;unixconfig\u0026#34;) (conf-space \u0026#34;unixconfig\u0026#34;) (authinfo \u0026#34;unixconfig\u0026#34;) (gdb-script \u0026#34;unixconfig\u0026#34;) (conf-toml \u0026#34;yaml\u0026#34;) (conf \u0026#34;ini\u0026#34;) (gitconfig \u0026#34;ini\u0026#34;) (systemd \u0026#34;ini\u0026#34;))) (unless (member pair org-latex-minted-langs) (add-to-list \u0026#39;org-latex-minted-langs pair))) Class templates (after! ox-latex (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;scr-article\u0026#34; \u0026#34;\\\\documentclass{scrartcl}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;lettre\u0026#34; \u0026#34;\\\\documentclass{lettre}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;blank\u0026#34; \u0026#34;[NO-DEFAULT-PACKAGES]\\n[NO-PACKAGES]\\n[EXTRA]\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;IEEEtran\u0026#34; \u0026#34;\\\\documentclass{IEEEtran}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;ieeeconf\u0026#34; \u0026#34;\\\\documentclass{ieeeconf}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;sagej\u0026#34; \u0026#34;\\\\documentclass{sagej}\u0026#34; (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;) (\u0026#34;\\\\subparagraph{%s}\u0026#34; . \u0026#34;\\\\subparagraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;thesis\u0026#34; \u0026#34;\\\\documentclass[11pt]{book}\u0026#34; (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;))) (add-to-list \u0026#39;org-latex-classes \u0026#39;(\u0026#34;thesis-fr\u0026#34; \u0026#34;\\\\documentclass[french,12pt,a4paper]{book}\u0026#34; (\u0026#34;\\\\chapter{%s}\u0026#34; . \u0026#34;\\\\chapter*{%s}\u0026#34;) (\u0026#34;\\\\section{%s}\u0026#34; . \u0026#34;\\\\section*{%s}\u0026#34;) (\u0026#34;\\\\subsection{%s}\u0026#34; . \u0026#34;\\\\subsection*{%s}\u0026#34;) (\u0026#34;\\\\subsubsection{%s}\u0026#34; . \u0026#34;\\\\subsubsection*{%s}\u0026#34;) (\u0026#34;\\\\paragraph{%s}\u0026#34; . \u0026#34;\\\\paragraph*{%s}\u0026#34;)))) (setq org-latex-default-class \u0026#34;article\u0026#34;) ;; org-latex-tables-booktabs t ;; org-latex-reference-command \u0026#34;\\\\cref{%s}\u0026#34;) Export multi-files Org documents Let\u0026rsquo;s say we have a multi-files document, with main.org as the entry point. Supposing a document with a structure like this:\nFigure 1: Example of a multi-files document structure\nFiles intro.org, chap1.org, \u0026hellip; are included in main.org using the Org command . In such a setup, we will spend most of our time writing in a chapter files, and not the main.org, where when want to export the document, we would need to open the top-level file main.org before exporting.\nA quick solution is to admit the following convention:\nIf a file named main.org is present beside any other Org file, it should be considered as the entry point; and whenever we export to PDF (from any of the Org files like: intro.org, chap1.org, \u0026hellip;), we automatically jump to the main.org, and run the export there.\nThis can be achieved by adding an Emacs-Lisp advice around the (org-latex-export-to-pdf) to switch to main.org (if it exists) before running the export.\nYou can also set the variable +org-export-to-pdf-main-file to the main file, in .dir-locals.el or as a file local variable.\n(defvar +org-export-to-pdf-main-file nil \u0026#34;The main (entry point) Org file for a multi-files document.\u0026#34;) (advice-add \u0026#39;org-latex-export-to-pdf :around (lambda (orig-fn \u0026amp;rest orig-args) (message \u0026#34;PDF exported to: %s.\u0026#34; (let ((main-file (or (bound-and-true-p +org-export-to-pdf-main-file) \u0026#34;main.org\u0026#34;))) (if (file-exists-p (expand-file-name main-file)) (with-current-buffer (find-file-noselect main-file) (apply orig-fn orig-args)) (apply orig-fn orig-args)))))) Hugo Update files with last modified date, when #+lastmod: is available\n(setq time-stamp-active t time-stamp-start \u0026#34;#\\\\+lastmod:[ \\t]*\u0026#34; time-stamp-end \u0026#34;$\u0026#34; time-stamp-format \u0026#34;%04Y-%02m-%02d\u0026#34;) (add-hook \u0026#39;before-save-hook \u0026#39;time-stamp nil) (setq org-hugo-auto-set-lastmod t) Text editing Plain text It\u0026rsquo;s nice to see ANSI color codes displayed. However, until Emacs 28 it\u0026rsquo;s not possible to do this without modifying the buffer, so let\u0026rsquo;s condition this block on that.\n(after! text-mode (add-hook! \u0026#39;text-mode-hook (unless (derived-mode-p \u0026#39;org-mode) ;; Apply ANSI color codes (with-silent-modifications (ansi-color-apply-on-region (point-min) (point-max) t))))) Academic phrases When writing your academic paper, you might get stuck trying to find the right phrase that captures your intention. This package tries to alleviate that problem by presenting you with a list of phrases organized by the topic or by the paper section that you are writing. This package has around 600 phrases so far.\nThis is based on the book titled \u0026ldquo;English for Writing Research - Papers Useful Phrases\u0026rdquo;.\n(use-package! academic-phrases :commands (academic-phrases academic-phrases-by-section)) French apostrophes (defun +helper--in-buffer-replace (old new) \u0026#34;Replace OLD with NEW in the current buffer.\u0026#34; (save-excursion (goto-char (point-min)) (let ((case-fold-search nil) (cnt 0)) (while (re-search-forward old nil t) (replace-match new) (setq cnt (1+ cnt))) cnt))) (defun +helper-clear-frenchy-ponctuations () \u0026#34;Replace french apostrophes (’) by regular quotes (\u0026#39;).\u0026#34; (interactive) (let ((chars \u0026#39;((\u0026#34; \u0026#34; . \u0026#34;\u0026#34;) (\u0026#34;’\u0026#34; . \u0026#34;\u0026#39;\u0026#34;))) (cnt 0)) (dolist (pair chars) (setq cnt (+ cnt (+helper--in-buffer-replace (car pair) (cdr pair))))) (message \u0026#34;Replaced %d matche(s).\u0026#34; cnt))) Yanking multi-lines paragraphs (defun +helper-paragraphized-yank () \u0026#34;Copy, then remove newlines and Org styling (/*_~).\u0026#34; (interactive) (copy-region-as-kill nil nil t) (with-temp-buffer (yank) ;; Remove newlines, and Org styling (/*_~) (goto-char (point-min)) (let ((case-fold-search nil)) (while (re-search-forward \u0026#34;[\\n/*_~]\u0026#34; nil t) (replace-match (if (s-matches-p (match-string 0) \u0026#34;\\n\u0026#34;) \u0026#34; \u0026#34; \u0026#34;\u0026#34;) t))) (kill-region (point-min) (point-max)))) (map! :localleader :map (org-mode-map markdown-mode-map latex-mode-map text-mode-map) :desc \u0026#34;Paragraphized yank\u0026#34; \u0026#34;y\u0026#34; #\u0026#39;+helper-paragraphized-yank) System configuration Mime types Org mode files Org mode isn\u0026rsquo;t recognized as its own mime type by default, but that can easily be changed with the following file. For system-wide changes try /usr/share/mime/packages/org.xml.\n\u0026lt;mime-info xmlns=\u0026#39;http://www.freedesktop.org/standards/shared-mime-info\u0026#39;\u0026gt; \u0026lt;mime-type type=\u0026#34;text/org\u0026#34;\u0026gt; \u0026lt;comment\u0026gt;Emacs Org-mode File\u0026lt;/comment\u0026gt; \u0026lt;glob pattern=\u0026#34;*.org\u0026#34;/\u0026gt; \u0026lt;alias type=\u0026#34;text/org\u0026#34;/\u0026gt; \u0026lt;/mime-type\u0026gt; \u0026lt;/mime-info\u0026gt; What\u0026rsquo;s nice is that Papirus now has an icon for text/org. One simply needs to refresh their mime database:\nupdate-mime-database ~/.local/share/mime Then set Emacs as the default editor:\nxdg-mime default emacs-client.desktop text/org Registering org-protocol:// The recommended method of registering a protocol is by registering a desktop application, which seems reasonable.\n[Desktop Entry] Name=Emacs Org-Protocol Exec=emacsclient %u Icon=/home/hacko/.doom.d/assets/org-mode.svg Type=Application Terminal=false MimeType=x-scheme-handler/org-protocol To associate org-protocol:// links with the desktop file:\nxdg-mime default org-protocol.desktop x-scheme-handler/org-protocol Configuring Chrome/Brave As specified in the official documentation, we would like to invoke the org-protocol:// without confirmation. To do this, we need to add this system-wide configuration.\nread -p \u0026#34;Do you want to set Chrome/Brave to show the \u0026#39;Always open ...\u0026#39; checkbox, to be used with the \u0026#39;org-protocol://\u0026#39; registration? [Y | N]: \u0026#34; INSTALL_CONFIRM if [[ \u0026#34;$INSTALL_CONFIRM\u0026#34; == \u0026#34;Y\u0026#34; ]] then sudo mkdir -p /etc/opt/chrome/policies/managed/ sudo tee /etc/opt/chrome/policies/managed/external_protocol_dialog.json \u0026gt; /dev/null \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; { \u0026#34;ExternalProtocolDialogShowAlwaysOpenCheckbox\u0026#34;: true } EOF sudo chmod 644 /etc/opt/chrome/policies/managed/external_protocol_dialog.json fi Then add a bookmarklet in your browser with this code:\njavascript:location.href = \u0026#39;org-protocol://roam-ref?template=r\u0026amp;ref=\u0026#39; + encodeURIComponent(location.href) + \u0026#39;\u0026amp;title=\u0026#39; + encodeURIComponent(document.title) + \u0026#39;\u0026amp;body=\u0026#39; + encodeURIComponent(window.getSelection()) Git Git diffs Based on this gist and this article.\n*.tex diff=tex *.bib diff=bibtex *.{c,h,c++,h++,cc,hh,cpp,hpp} diff=cpp *.m diff=matlab *.py diff=python *.rb diff=ruby *.php diff=php *.pl diff=perl *.{html,xhtml} diff=html *.f diff=fortran *.{el,lisp,scm} diff=lisp *.r diff=rstats *.texi* diff=texinfo *.org diff=org *.rs diff=rust *.odt diff=odt *.odp diff=libreoffice *.ods diff=libreoffice *.doc diff=doc *.xls diff=xls *.ppt diff=ppt *.docx diff=docx *.xlsx diff=xlsx *.pptx diff=pptx *.rtf diff=rtf *.{png,jpg,jpeg,gif} diff=exif *.pdf diff=pdf *.djvu diff=djvu *.epub diff=pandoc *.chm diff=tika *.mhtml? diff=tika *.{class,jar} diff=tika *.{rar,7z,zip,apk} diff=tika Then adding some regular expressions for it to ~/.config/git/config, with some tools to view diffs on binary files.\n# ====== TEXT FORMATS ====== [diff \u0026#34;org\u0026#34;] xfuncname = \u0026#34;^(\\\\*+ +.*)$\u0026#34; [diff \u0026#34;lisp\u0026#34;] xfuncname = \u0026#34;^(\\\\(.*)$\u0026#34; [diff \u0026#34;rstats\u0026#34;] xfuncname = \u0026#34;^([a-zA-z.]+ \u0026lt;- function.*)$\u0026#34; [diff \u0026#34;texinfo\u0026#34;] # from http://git.savannah.gnu.org/gitweb/?p=coreutils.git;a=blob;f=.gitattributes;h=c3b2926c78c939d94358cc63d051a70d38cfea5d;hb=HEAD xfuncname = \u0026#34;^@node[ \\t][ \\t]*\\\\([^,][^,]*\\\\)\u0026#34; [diff \u0026#34;rust\u0026#34;] xfuncname = \u0026#34;^[ \\t]*(pub|)[ \\t]*((fn|struct|enum|impl|trait|mod)[^;]*)$\u0026#34; # ====== BINARY FORMATS ====== [diff \u0026#34;pdf\u0026#34;] binary = true # textconv = pdfinfo # textconv = sh -c \u0026#39;pdftotext \u0026#34;$@\u0026#34; -\u0026#39; # sudo apt install pdftotext textconv = sh -c \u0026#39;pdftotext -layout \u0026#34;$0\u0026#34; -enc UTF-8 -nopgbrk -q -\u0026#39; cachetextconv = true [diff \u0026#34;djvu\u0026#34;] binary = true # textconv = pdfinfo textconv = djvutxt # yay -S djvulibre cachetextconv = true [diff \u0026#34;odt\u0026#34;] textconv = odt2txt # textconv = pandoc --standalone --from=odt --to=plain binary = true cachetextconv = true [diff \u0026#34;doc\u0026#34;] # textconv = wvText textconv = catdoc # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;xls\u0026#34;] # textconv = in2csv # textconv = xlscat -a UTF-8 # textconv = soffice --headless --convert-to csv textconv = xls2csv # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;ppt\u0026#34;] textconv = catppt # yay -S catdoc binary = true cachetextconv = true [diff \u0026#34;docx\u0026#34;] textconv = pandoc --standalone --from=docx --to=plain # textconv = sh -c \u0026#39;docx2txt.pl \u0026#34;$0\u0026#34; -\u0026#39; binary = true cachetextconv = true [diff \u0026#34;xlsx\u0026#34;] textconv = xlsx2csv # pip install xlsx2csv # textconv = in2csv # textconv = soffice --headless --convert-to csv binary = true cachetextconv = true [diff \u0026#34;pptx\u0026#34;] # pip install --user pptx2md (currently not wotking with Python 3.10) # textconv = sh -c \u0026#39;pptx2md --disable_image --disable_wmf -i \u0026#34;$0\u0026#34; -o ~/.cache/git/presentation.md \u0026gt;/dev/null \u0026amp;\u0026amp; cat ~/.cache/git/presentation.md\u0026#39; # Alternative hack, convert PPTX to PPT, then use the catppt tool textconv = sh -c \u0026#39;soffice --headless --convert-to ppt --outdir /tmp \u0026#34;$0\u0026#34; \u0026amp;\u0026amp; TMP_FILENAME=$(basename -- \u0026#34;$0\u0026#34;) \u0026amp;\u0026amp; catppt \u0026#34;/tmp/${TMP_FILENAME%.*}.ppt\u0026#34;\u0026#39; binary = true cachetextconv = true [diff \u0026#34;rtf\u0026#34;] textconv = unrtf --text # yay -S unrtf binary = true cachetextconv = true [diff \u0026#34;epub\u0026#34;] textconv = pandoc --standalone --from=epub --to=plain binary = true cachetextconv = true [diff \u0026#34;tika\u0026#34;] textconv = tika --config=~/.local/share/tika/tika-conf.xml --text binary = true cachetextconv = true [diff \u0026#34;libreoffice\u0026#34;] textconv = soffice --cat binary = true cachetextconv = true [diff \u0026#34;exif\u0026#34;] binary = true textconv = exiftool # sudo apt install perl-image-exiftool Apache Tika App wrapper Apache Tika is a content detection and analysis framework. It detects and extracts metadata and text from over a thousand different file types. We will be using the Tika App in command-line mode to show some meaningful diff information for some binary files.\nFirst, let\u0026rsquo;s add a custom script to run tika-app:\n#!/bin/sh APACHE_TIKA_JAR=\u0026#34;$HOME/.local/share/tika/tika-app.jar\u0026#34; if [ -f \u0026#34;${APACHE_TIKA_JAR}\u0026#34; ] then exec java -Dfile.encoding=UTF-8 -jar \u0026#34;${APACHE_TIKA_JAR}\u0026#34; \u0026#34;$@\u0026#34; 2\u0026gt;/dev/null else echo \u0026#34;JAR file not found at ${APACHE_TIKA_JAR}\u0026#34; fi Add tika\u0026rsquo;s installation instructions to the setup.sh file.\nupdate_apache_tika () { TIKA_JAR_PATH=\u0026#34;$HOME/.local/share/tika\u0026#34; if [ ! -d \u0026#34;${TIKA_JAR_PATH}\u0026#34; ] then mkdir -p \u0026#34;${TIKA_JAR_PATH}\u0026#34; fi TIKA_BASE_URL=https://archive.apache.org/dist/tika/ TIKA_JAR_LINK=\u0026#34;${TIKA_JAR_PATH}/tika-app.jar\u0026#34; echo -n \u0026#34;Checking for new Apache Tika App version... \u0026#34; # Get the lastest version TIKA_VERSION=$( curl -s \u0026#34;${TIKA_BASE_URL}\u0026#34; | # Get the page pandoc -f html -t plain | # Convert HTML page to plain text. awk \u0026#39;/([0-9]+\\.)+[0-1]\\// {print substr($1, 0, length($1)-1)}\u0026#39; | # Get the versions directories (pattern: X.X.X/) sort -rV | # Sort versions, the newest first head -n 1 # Get the first (newest) version ) if [ -z \u0026#34;${TIKA_VERSION}\u0026#34; ] then echo \u0026#34;Failed, check your internet connection.\u0026#34; exit 1 fi echo \u0026#34;Lastest version is ${TIKA_VERSION}\u0026#34; TIKA_JAR=\u0026#34;${TIKA_JAR_PATH}/tika-app-${TIKA_VERSION}.jar\u0026#34; TIKA_JAR_URL=\u0026#34;${TIKA_BASE_URL}${TIKA_VERSION}/tika-app-${TIKA_VERSION}.jar\u0026#34; if [ ! -f \u0026#34;${TIKA_JAR}\u0026#34; ] then echo \u0026#34;New version available!\u0026#34; read -p \u0026#34;Do you want to download Apache Tika App v${TIKA_VERSION}? [Y | N]: \u0026#34; INSTALL_CONFIRM if [[ \u0026#34;$INSTALL_CONFIRM\u0026#34; == \u0026#34;Y\u0026#34; ]] then curl -o \u0026#34;${TIKA_JAR}\u0026#34; \u0026#34;${TIKA_JAR_URL}\u0026#34; \u0026amp;\u0026amp; echo \u0026#34;Apache Tika App v${TIKA_VERSION} downloaded successfully\u0026#34; fi else echo \u0026#34;Apache Tika App is up-to-date, version ${TIKA_VERSION} already downloaded to \u0026#39;${TIKA_JAR}\u0026#39;\u0026#34; fi # Check the existance of the symbolic link if [ -L \u0026#34;${TIKA_JAR_LINK}\u0026#34; ] then unlink \u0026#34;${TIKA_JAR_LINK}\u0026#34; fi # Create a symbolic link to the installed version ln -s \u0026#34;${TIKA_JAR}\u0026#34; \u0026#34;${TIKA_JAR_LINK}\u0026#34; } update_apache_tika; When it detects that Tesseract is installed, Tika App will try to extract text from some file types. For some reason, it tries to use Tesseract with some compressed files like *.bz2, *.apk\u0026hellip; etc. I would like to disable this feature by exporting an XML config file which will be used when launching the Tika App (using --config=\u0026lt;tika-config.xml\u0026gt;).\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;parsers\u0026gt; \u0026lt;parser class=\u0026#34;org.apache.tika.parser.DefaultParser\u0026#34;\u0026gt; \u0026lt;parser-exclude class=\u0026#34;org.apache.tika.parser.ocr.TesseractOCRParser\u0026#34;/\u0026gt; \u0026lt;/parser\u0026gt; \u0026lt;/parsers\u0026gt; \u0026lt;/properties\u0026gt; Emacs\u0026rsquo; Systemd daemon Let\u0026rsquo;s define a Systemd service to launch Emacs server automatically.\n[Unit] Description=Emacs server daemon Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/ [Service] Type=forking ExecStart=sh -c \u0026#39;emacs --daemon \u0026amp;\u0026amp; emacsclient -c --eval \u0026#34;(delete-frame)\u0026#34;\u0026#39; ExecStop=emacsclient --no-wait --eval \u0026#34;(progn (setq kill-emacs-hook nil) (kill-emacs))\u0026#34; Restart=on-failure [Install] WantedBy=default.target Which is then enabled by:\nsystemctl --user enable emacs.service For some reason if a frame isn\u0026rsquo;t opened early in the initialization process, the daemon doesn\u0026rsquo;t seem to like opening frames later \u0026mdash; hence the \u0026amp;\u0026amp; emacsclient -c --eval \u0026quot;(delete-frame)\u0026quot; part of the ExecStart value.\nEmacs client Desktop integration It can now be nice to use this as a \u0026lsquo;default app\u0026rsquo; for opening files. If we add an appropriate desktop entry, and enable it in the desktop environment.\n[Desktop Entry] Name=Emacs (Client) GenericName=Text Editor Comment=A flexible platform for end-user applications MimeType=text/english;text/plain;text/org;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++; Exec=emacsclient -create-frame --frame-parameters=\u0026#34;\u0026#39;(fullscreen . maximized)\u0026#34; --alternate-editor=\u0026#34;/usr/bin/emacs -mm\u0026#34; --no-wait %F Icon=emacs Type=Application Terminal=false Categories=TextEditor;Utility; StartupWMClass=Emacs Keywords=Text;Editor; X-KDE-StartupNotify=false [Desktop Entry] Name=Emacs GenericName=Text Editor Comment=A flexible platform for end-user applications MimeType=text/english;text/plain;text/org;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++; Exec=emacs -mm %F Icon=emacs Type=Application Terminal=false Categories=TextEditor;Utility; StartupWMClass=Emacs Keywords=Text;Editor; X-KDE-StartupNotify=false Command-line wrapper A wrapper around emacsclient:\nAccepting stdin by putting it in a temporary file and immediately opening it. Guessing that the tty is a good idea when $DISPLAY is unset (relevant with SSH sessions, among other things). With a whiff of 24-bit color support, sets TERM variable to a terminfo that (probably) announces 24-bit color support. Changes GUI emacsclient instances to be non-blocking by default (--no-wait), and instead take a flag to suppress this behavior (-w). I would use sh, but using arrays for argument manipulation is just too convenient, so I\u0026rsquo;ll raise the requirement to bash. Since arrays are the only \u0026rsquo;extra\u0026rsquo; compared to sh, other shells like ksh etc. should work too.\n#!/usr/bin/env bash force_tty=false force_wait=false stdin_mode=\u0026#34;\u0026#34; args=() usage () { echo -e \u0026#34;Usage: e [-t] [-m MODE] [OPTIONS] FILE [-] Emacs client convenience wrapper. Options: -h, --help Show this message -t, -nw, --tty Force terminal mode -w, --wait Don\u0026#39;t supply --no-wait to graphical emacsclient - Take stdin (when last argument) -m MODE, --mode MODE Mode to open stdin with -mm, --maximized Start Emacs client in maximized window Run emacsclient --help to see help for the emacsclient.\u0026#34; } while : do case \u0026#34;$1\u0026#34; in -t | -nw | --tty) force_tty=true shift ;; -w | --wait) force_wait=true shift ;; -m | --mode) stdin_mode=\u0026#34; ($2-mode)\u0026#34; shift 2 ;; -mm | --maximized) args+=(\u0026#34;--frame-parameters=\u0026#39;(fullscreen . maximized)\u0026#34;) shift ;; -h | --help) usage exit 0 ;; --*=*) set -- \u0026#34;$@\u0026#34; \u0026#34;${1%%=*}\u0026#34; \u0026#34;${1#*=}\u0026#34; shift ;; *) [ \u0026#34;$#\u0026#34; = 0 ] \u0026amp;\u0026amp; break args+=(\u0026#34;$1\u0026#34;) shift ;; esac done if [ ! \u0026#34;${#args[*]}\u0026#34; = 0 ] \u0026amp;\u0026amp; [ \u0026#34;${args[-1]}\u0026#34; = \u0026#34;-\u0026#34; ] then unset \u0026#39;args[-1]\u0026#39; TMP=\u0026#34;$(mktemp /tmp/emacsstdin-XXX)\u0026#34; cat \u0026gt; \u0026#34;$TMP\u0026#34; args+=(--eval \u0026#34;(let ((b (generate-new-buffer \\\u0026#34;*stdin*\\\u0026#34;))) (switch-to-buffer b) (insert-file-contents \\\u0026#34;$TMP\\\u0026#34;) (delete-file \\\u0026#34;$TMP\\\u0026#34;)${stdin_mode})\u0026#34;) fi if [ -z \u0026#34;$DISPLAY\u0026#34; ] || $force_tty then # detect terminals with sneaky 24-bit support if { [ \u0026#34;$COLORTERM\u0026#34; = truecolor ] || [ \u0026#34;$COLORTERM\u0026#34; = 24bit ]; } \\ \u0026amp;\u0026amp; [ \u0026#34;$(tput colors 2\u0026gt;/dev/null)\u0026#34; -lt 257 ] then if echo \u0026#34;$TERM\u0026#34; | grep -q \u0026#34;^\\w\\+-[0-9]\u0026#34; then termstub=\u0026#34;${TERM%%-*}\u0026#34; else termstub=\u0026#34;${TERM#*-}\u0026#34; fi if infocmp \u0026#34;$termstub-direct\u0026#34; \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 then TERM=\u0026#34;$termstub-direct\u0026#34; else TERM=\u0026#34;xterm-direct\u0026#34; fi # should be fairly safe fi emacsclient --tty -create-frame --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; \u0026#34;${args[@]}\u0026#34; else if ! $force_wait then args+=(--no-wait) fi emacsclient -create-frame --alternate-editor=\u0026#34;/usr/bin/emacs\u0026#34; \u0026#34;${args[@]}\u0026#34; fi Useful aliases Now, to set an alias to use e with magit, and then for maximum laziness we can set aliases for the terminal-forced variants.\n# Aliases to run emacs+magit alias magit=\u0026#39;e --eval \u0026#34;(progn (magit-status) (delete-other-windows))\u0026#34;\u0026#39; alias magitt=\u0026#39;e -t --eval \u0026#34;(progn (magit-status) (delete-other-windows))\u0026#34;\u0026#39; # Aliases to run emacs+mu4e alias emu=\u0026#39;e --eval \u0026#34;(progn (=mu4e) (delete-other-windows))\u0026#34;\u0026#39; alias emut=\u0026#39;e -t --eval \u0026#34;(progn (=mu4e) (delete-other-windows))\u0026#34;\u0026#39; And this to launch Emacs in terminal mode et, I use this as a default $EDITOR\n#!/usr/bin/env bash e -t \u0026#34;$@\u0026#34; And ev for use with $VISUAL:\n#!/usr/bin/env bash e -w \u0026#34;$@\u0026#34; export EDITOR=\u0026#34;$HOME/.local/bin/et\u0026#34; # export VISUAL=$HOME/.local/bin/ev AppImage Install/update the appimageupdatetool.AppImage tool:\nupdate_appimageupdatetool () { TOOL_NAME=appimageupdatetool MACHINE_ARCH=$(uname -m) APPIMAGE_UPDATE_TOOL_PATH=\u0026#34;$HOME/.local/bin/${TOOL_NAME}\u0026#34; APPIMAGE_UPDATE_TOOL_URL=\u0026#34;https://github.com/AppImage/AppImageUpdate/releases/download/continuous/${TOOL_NAME}-${MACHINE_ARCH}.AppImage\u0026#34; if [ -f \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; ] \u0026amp;\u0026amp; \u0026#34;$APPIMAGE_UPDATE_TOOL_PATH\u0026#34; -j \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; 2\u0026amp;\u0026gt;/dev/null then echo \u0026#34;${TOOL_NAME} already up to date\u0026#34; else if [ -f \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; ] then echo \u0026#34;Update available, downloading latest ${MACHINE_ARCH} version to ${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; mv \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; else echo \u0026#34;${TOOL_NAME} not found, downloading latest ${MACHINE_ARCH} version to ${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; fi wget -O \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; \u0026#34;${APPIMAGE_UPDATE_TOOL_URL}\u0026#34; \u0026amp;\u0026amp; # 2\u0026amp;\u0026gt;/dev/null echo \u0026#34;Downloaded ${TOOL_NAME}-${MACHINE_ARCH}.AppImage\u0026#34; \u0026amp;\u0026amp; [ -f \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; ] \u0026amp;\u0026amp; rm \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}.backup\u0026#34; chmod a+x \u0026#34;${APPIMAGE_UPDATE_TOOL_PATH}\u0026#34; fi } update_appimageupdatetool; Oh-my-Zsh Path Path to your oh-my-zsh installation.\nexport ZSH=\u0026#34;$HOME/.oh-my-zsh\u0026#34; Themes and customization: Set name of the theme to load, if set to \u0026quot;random\u0026quot;, it will load a random theme each time oh-my-zsh is loaded, in which case, to know which specific one was loaded, run: echo $RANDOM_THEME See github.com/ohmyzsh/ohmyzsh/wiki/Themes.\n# Typewritten customizations TYPEWRITTEN_RELATIVE_PATH=\u0026#34;adaptive\u0026#34; TYPEWRITTEN_CURSOR=\u0026#34;underscore\u0026#34; ZSH_THEME=\u0026#34;typewritten/typewritten\u0026#34; # Set list of themes to pick from when loading at random # Setting this variable when ZSH_THEME=random will cause zsh to load # a theme from this variable instead of looking in $ZSH/themes/ # If set to an empty array, this variable will have no effect. # ZSH_THEME_RANDOM_CANDIDATES=( \u0026#34;robbyrussell\u0026#34; \u0026#34;agnoster\u0026#34; ) Behavior # Uncomment the following line to use case-sensitive completion. # CASE_SENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to use hyphen-insensitive completion. # Case-sensitive completion must be off. _ and - will be interchangeable. # HYPHEN_INSENSITIVE=\u0026#34;true\u0026#34; # Uncomment the following line to disable bi-weekly auto-update checks. # DISABLE_AUTO_UPDATE=\u0026#34;true\u0026#34; # Uncomment the following line to automatically update without prompting. DISABLE_UPDATE_PROMPT=\u0026#34;true\u0026#34; # Uncomment the following line to change how often to auto-update (in days). export UPDATE_ZSH_DAYS=3 # Uncomment the following line if pasting URLs and other text is messed up. # DISABLE_MAGIC_FUNCTIONS=\u0026#34;true\u0026#34; # Uncomment the following line to disable colors in ls. # DISABLE_LS_COLORS=\u0026#34;true\u0026#34; # Uncomment the following line to disable auto-setting terminal title. # DISABLE_AUTO_TITLE=\u0026#34;true\u0026#34; # Uncomment the following line to enable command auto-correction. # ENABLE_CORRECTION=\u0026#34;true\u0026#34; # Uncomment the following line to display red dots whilst waiting for completion. # COMPLETION_WAITING_DOTS=\u0026#34;true\u0026#34; # Uncomment the following line if you want to disable marking untracked files # under VCS as dirty. This makes repository status check for large repositories # much, much faster. # DISABLE_UNTRACKED_FILES_DIRTY=\u0026#34;true\u0026#34; # Uncomment the following line if you want to change the command execution time # stamp shown in the history command output. # You can set one of the optional three formats: # \u0026#34;mm/dd/yyyy\u0026#34;|\u0026#34;dd.mm.yyyy\u0026#34;|\u0026#34;yyyy-mm-dd\u0026#34; # or set a custom format using the strftime function format specifications, # see \u0026#39;man strftime\u0026#39; for details. # HIST_STAMPS=\u0026#34;mm/dd/yyyy\u0026#34; Plugins # Would you like to use another custom folder than $ZSH/custom? ZSH_CUSTOM=$HOME/.config/my_ohmyzsh_customizations # Which plugins would you like to load? # Standard plugins can be found in $ZSH/plugins/ # Custom plugins may be added to $ZSH_CUSTOM/plugins/ # Example format: plugins=(rails git textmate ruby lighthouse) # Add wisely, as too many plugins slow down shell startup. plugins=( zsh-autosuggestions zsh-navigation-tools zsh-interactive-cd archlinux ssh-agent sudo docker systemd tmux python pip rust repo git cp rsync ripgrep fzf fd z ) Bootstrap Oh-my-Zsh source $ZSH/oh-my-zsh.sh Aliases # Aliases alias zshconfig=\u0026#34;vim ~/.zshrc\u0026#34; alias ohmyzsh=\u0026#34;ranger $ZSH\u0026#34; Zsh user configuration pbcopy and pbpaste I like to define MacOS-like commands (pbcopy and pbpaste) to copy and paste in terminal (from stdin, to stdout). The pbcopy and pbpaste are defined using either xclip or xsel, you would need to install these tools, otherwise we wouldn\u0026rsquo;t define the aliases.\n# Define aliases to \u0026#39;pbcopy\u0026#39; and \u0026#39;pbpaste\u0026#39; if command -v xclip \u0026amp;\u0026gt; /dev/null then # Define aliases using xclip alias pbcopy=\u0026#39;xclip -selection clipboard\u0026#39; alias pbpaste=\u0026#39;xclip -selection clipboard -o\u0026#39; elif command -v xsel \u0026amp;\u0026gt; /dev/null then # Define aliases using xsel alias pbcopy=\u0026#39;xsel --clipboard --input\u0026#39; alias pbpaste=\u0026#39;xsel --clipboard --output\u0026#39; fi netpaste Define a netpaste command to paste to a Pastebin server.\nalias netpaste=\u0026#39;curl -F file=@- 0x0.st\u0026#39; # OR \u0026#39;curl -F f:1=\u0026lt;- ix.io \u0026#39; Sudo GUI! And then define gsuon and gsuoff aliases to run graphical apps from terminal with root permissions, this requires xhost.\n# To run GUI apps from terminal with root permissions if command -v xhost \u0026amp;\u0026gt; /dev/null then alias gsuon=\u0026#39;xhost si:localuser:root\u0026#39; alias gsuoff=\u0026#39;xhost -si:localuser:root\u0026#39; fi Neovim Use Neovim instead of VIM to provide vi and vim commands.\n# NeoVim if command -v nvim \u0026amp;\u0026gt; /dev/null then alias vim=\u0026#34;nvim\u0026#34; alias vi=\u0026#34;nvim\u0026#34; fi ESP-IDF Add some aliases to work with the ESP-IDF framework.\nif [ -d \u0026#34;$HOME/Softwares/src/esp-idf/\u0026#34; ] then alias esp-prepare-env=\u0026#39;source $HOME/Softwares/src/esp-idf/export.sh\u0026#39; alias esp-update=\u0026#39;echo \u0026#34;Updating ESP-IDF framework...\u0026#34; \u0026amp;\u0026amp; cd $HOME/src/esp-idf \u0026amp;\u0026amp; git pull --all \u0026amp;\u0026amp; echo \u0026#34;Updated successfully\u0026#34;\u0026#39; else alias esp-prepare-env=\u0026#39;echo \u0026#34;esp-idf repo not found. You can clone the esp-idf repo using git clone https://github.com/espressif/esp-idf.git\u0026#34;\u0026#39; alias esp-update=esp-prepare-env fi CLI wttrin client Define an alias to get weather information for my city:\nexport WTTRIN_CITY=Orsay alias wttrin=\u0026#39;curl wttr.in/$WTTRIN_CITY\u0026#39; alias wttrin2=\u0026#39;curl v2.wttr.in/$WTTRIN_CITY\u0026#39; Minicom Enable Meta key and colors in minicom:\nexport MINICOM=\u0026#39;-m -c on\u0026#39; Rust Define Rust sources path, and add packages installed from cargo to the PATH.\nexport RUST_SRC_PATH=$HOME/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/ export PATH=$PATH:$HOME/.cargo/bin I\u0026rsquo;m using the AUR package clang-format-static-bin, which provide multiple versions of Clang-format, I use it with some work projects requiring a specific version of Clang-format.\nClang-format export PATH=$PATH:/opt/clang-format-static CMake Add my manually installed libraries to CMake and PATH.\nexport CMAKE_PREFIX_PATH=$HOME/Softwares/src/install export PATH=$PATH:$HOME/Softwares/src/install/bin Node Set NPM installation path to local:\nNPM_PACKAGES=\u0026#34;${HOME}/.npm-packages\u0026#34; # Export NPM bin path export PATH=\u0026#34;$PATH:$NPM_PACKAGES/bin\u0026#34; # Preserve MANPATH if you already defined it somewhere in your config. # Otherwise, fall back to `manpath` so we can inherit from `/etc/manpath`. export MANPATH=\u0026#34;${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man\u0026#34; # Tell Node about these packages export NODE_PATH=\u0026#34;$NPM_PACKAGES/lib/node_modules:$NODE_PATH\u0026#34; Tell NPM to use this directory for its global package installs by adding this in ~/.npmrc:\nprefix = ~/.npm-packages Some useful stuff (fzf, opam, Doom Emacs\u0026hellip;)\ntmux I like to use tmux by default, even on my local sessions, I like to start a tmux in a default session on the first time I launch a terminal, and then, attach any other terminal to this default session:\n# If not running inside Emacs (via vterm/eshell...) if [ -z $INSIDE_EMACS ] then if command -v tmux \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; [ -z \u0026#34;$TMUX\u0026#34; ] then tmux attach -t default || tmux new -s default fi fi Other stuff # You may need to manually set your language environment # export LANG=en_US.UTF-8 # Preferred editor for local and remote sessions # if [[ -n $SSH_CONNECTION ]]; then # export EDITOR=\u0026#39;vim\u0026#39; # else # export EDITOR=\u0026#39;mvim\u0026#39; # fi # Compilation flags # export ARCHFLAGS=\u0026#34;-arch x86_64\u0026#34; # FZF [ -f ~/.fzf.zsh ] \u0026amp;\u0026amp; source ~/.fzf.zsh # OPAM configuration [[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh \u0026gt; /dev/null 2\u0026gt; /dev/null # Add ~/.config/emacs/bin to path (for DOOM Emacs stuff) export PATH=$PATH:$HOME/.config/emacs/bin export TEXMFHOME=$HOME/.texmf Define some environment variables.\nexport DS_DIR=~/PhD/datasets-no/experiment_images/ export DSO_BIN_DIR=~/PhD/workspace-no/vo/orig/dso/build/release/bin export DSO_RES_DIR=~/PhD/workspace-no/vo/orig/dso_results Load my bitwarden-cli session, exported to BW_SESSION.\nsource ~/.bitwarden-session Rust format For Rust code base, the file $HOME/.rustfmt.toml contains the global format settings, I like to set it to:\n# Rust edition 2018 edition = \u0026#34;2018\u0026#34; # Use Unix style newlines, with 2 spaces tabulation. newline_style = \u0026#34;Unix\u0026#34; tab_spaces = 2 hard_tabs = false # Make one line functions in a single line fn_single_line = true # Format strings format_strings = true # Increase the max line width max_width = 120 # Merge nested imports merge_imports = true # Enum and Struct alignement enum_discrim_align_threshold = 20 struct_field_align_threshold = 20 # Reorder impl items: type \u0026gt; const \u0026gt; macros \u0026gt; methods. reorder_impl_items = true # Comments and documentation formating wrap_comments = true normalize_comments = true normalize_doc_attributes = true format_code_in_doc_comments = true report_fixme = \u0026#34;Always\u0026#34; todo = \u0026#34;Always\u0026#34; eCryptfs Unlock and mount script #!/bin/sh -e # This script mounts a user\u0026#39;s confidential private folder # # Original by Michael Halcrow, IBM # Extracted to a stand-alone script by Dustin Kirkland \u0026lt;kirkland@ubuntu.com\u0026gt; # Modified by: Abdelhak Bougouffa \u0026lt;abougouffa@fedoraproject.org\u0026gt; # # This script: # * interactively prompts for a user\u0026#39;s wrapping passphrase (defaults to their # login passphrase) # * checks it for validity # * unwraps a users mount passphrase with their supplied wrapping passphrase # * inserts the mount passphrase into the keyring # * and mounts a user\u0026#39;s encrypted private folder PRIVATE_DIR=\u0026#34;Private\u0026#34; PW_ATTEMPTS=3 MESSAGE=`gettext \u0026#34;Enter your login passphrase:\u0026#34;` if [ -f $HOME/.ecryptfs/wrapping-independent ] then # use a wrapping passphrase different from the login passphrase MESSAGE=`gettext \u0026#34;Enter your wrapping passphrase:\u0026#34;` fi WRAPPED_PASSPHRASE_FILE=\u0026#34;$HOME/.ecryptfs/wrapped-passphrase\u0026#34; MOUNT_PASSPHRASE_SIG_FILE=\u0026#34;$HOME/.ecryptfs/$PRIVATE_DIR.sig\u0026#34; # First, silently try to perform the mount, which would succeed if the appropriate # key is available in the keyring if /sbin/mount.ecryptfs_private \u0026gt;/dev/null 2\u0026gt;\u0026amp;1 then exit 0 fi # Otherwise, interactively prompt for the user\u0026#39;s password if [ -f \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; -a -f \u0026#34;$MOUNT_PASSPHRASE_SIG_FILE\u0026#34; ] then tries=0 while [ $tries -lt $PW_ATTEMPTS ] do LOGINPASS=`zenity --password --title \u0026#34;eCryptFS: $MESSAGE\u0026#34;` if [ $(wc -l \u0026lt; \u0026#34;$MOUNT_PASSPHRASE_SIG_FILE\u0026#34;) = \u0026#34;1\u0026#34; ] then # No filename encryption; only insert fek if printf \u0026#34;%s\\0\u0026#34; \u0026#34;$LOGINPASS\u0026#34; | ecryptfs-unwrap-passphrase \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; - | ecryptfs-add-passphrase - then break else zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Error: Your passphrase is incorrect\u0026#34; tries=$(($tries + 1)) continue fi else if printf \u0026#34;%s\\0\u0026#34; \u0026#34;$LOGINPASS\u0026#34; | ecryptfs-insert-wrapped-passphrase-into-keyring \u0026#34;$WRAPPED_PASSPHRASE_FILE\u0026#34; - then break else zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Error: Your passphrase is incorrect\u0026#34; tries=$(($tries + 1)) continue fi fi done if [ $tries -ge $PW_ATTEMPTS ] then zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Too many incorrect password attempts, exiting\u0026#34; exit 1 fi /sbin/mount.ecryptfs_private else zenity --error --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Encrypted private directory is not setup properly\u0026#34; exit 1 fi if grep -qs \u0026#34;$HOME/.Private $PWD ecryptfs \u0026#34; /proc/mounts 2\u0026gt;/dev/null; then zenity --info --title \u0026#34;eCryptfs\u0026#34; --text \u0026#34;Your private directory has been mounted.\u0026#34; fi dolphin \u0026#34;$HOME/Private\u0026#34; exit 0 Desktop integration [Desktop Entry] Type=Application Version=1.0 Name=eCryptfs Unlock Private Directory Icon=unlock Exec=/home/hacko/.ecryptfs/ecryptfs-mount-private-gui Terminal=False GDB Early init I like to disable the initial message (containing copyright info and other stuff), the right way to do this is either by starting gdb with -q option, or (since GDB v11 I think), by setting in ~/.gdbearlyinit.\n# GDB early init file # Abdelhak Bougouffa (c) 2022 # Disable showing the initial message set startup-quietly Init GDB loads $HOME/.gdbinit at startup, I like to define some default options in this file, this is a WIP, but it won\u0026rsquo;t evolve too much, as it is recommended to keep the .gdbinit clean and simple. For the moment, it does just enable pretty printing, and defines the c and n commands to wrap continue and next with a post refresh, which is helpful with the annoying TUI when the program outputs to the stdout.\n# GDB init file # Abdelhak Bougouffa (c) 2022 # Save history set history save on set history filename ~/.gdb_history set history remove-duplicates 2048 # When debugging my apps, debug information of system libraries # aren\u0026#39;t that important set debuginfod enabled off # Set pretty print set print pretty on # I hate stepping into system libraries when I\u0026#39;m debugging my # crappy stuff, so lets add system headers to skipped files skip pending on python import os # Add paths here, they will be explored recursivly LIB_PATHS = [\u0026#34;/usr/include\u0026#34; \u0026#34;/usr/local/include\u0026#34;] for lib_path in LIB_PATHS: for root, dirs, files in os.walk(lib_path): for file in files: cmd = f\u0026#34;skip file {os.path.join(root, file)}\u0026#34; gdb.execute(cmd, True, to_string=True) end skip enable skip pending on guile \u0026lt;\u0026lt;gdb-init-guile\u0026gt;\u0026gt; end skip enable # This fixes the annoying ncurses TUI gliches and saves typing C-l each time to refresh the screen define cc continue refresh end define nn next refresh end GnuPG I add this to my ~/.gnupg/gpg-agent.conf, to set the time-to-live to one day.\n# Do not ask me about entered passwords for 24h (during the same session) default-cache-ttl 86400 max-cache-ttl 86400 # As I\u0026#39;m using KDE, use Qt based pinentry tool instead of default GTK+ pinentry-program /usr/bin/pinentry-qt # Allow pinentry in Emacs minibuffer (combined with epg-pinentry-mode) allow-loopback-pinentry allow-emacs-pinentry OCR This #!/bin/bash IMG=$(mktemp -u --suffix=\u0026#34;.png\u0026#34;) scrot -s \u0026#34;$IMG\u0026#34; -q 100 mogrify -modulate 100,0 -resize 400% \u0026#34;$IMG\u0026#34; tesseract \u0026#34;$IMG\u0026#34; - -l eng 2\u0026gt; /dev/null | xsel -ib Slack This script is called at system startup.\n#!/bin/bash WEEK_DAY=$(date +%u) HOUR=$(date +%H) SLACK=$(which slack) if [ ! \u0026#34;$WEEK_DAY\u0026#34; == \u0026#34;6\u0026#34; ] \u0026amp;\u0026amp; [ ! \u0026#34;$WEEK_DAY\u0026#34; == \u0026#34;7\u0026#34; ] \u0026amp;\u0026amp; [ \u0026#34;$HOUR\u0026#34; -gt 7 ] \u0026amp;\u0026amp; [ \u0026#34;$HOUR\u0026#34; -lt 20 ] ; then $SLACK -u %U else echo \u0026#34;It is not work time!\u0026#34; fi Arch Linux packages Here, we install Arch packages\ncheck_and_install_pkg() { PKG_NAME=\u0026#34;$1\u0026#34; if ! pacman -Qiq \u0026#34;${PKG_NAME}\u0026#34; \u0026amp;\u0026gt;/dev/null; then echo \u0026#34;Package ${PKG_NAME} is missing, installing it using yay\u0026#34; yay -S \u0026#34;${PKG_NAME}\u0026#34; fi } PKGS_LIST=( git ripgrep fd gnupg fzf the_silver_searcher ttf-ibm-plex ttf-fira-code ttf-roboto-mono ttf-overpass ttf-lato ttf-input ttf-cascadia-code ttf-jetbrains-mono ttf-fantasque-sans-mono ttc-iosevka ttf-iosevka-nerd ttc-iosevka-slab ttc-iosevka-curly ttc-iosevka-curly-slab ttc-iosevka-etoile ttc-iosevka-ss09 ccls cppcheck clang gcc gdb lldb valgrind rr openocd sbcl cmucl clisp chez-scheme mit-scheme chibi-scheme chicken vls vlang rustup semgrep-bin mu isync msmtp xsel xorg-xhost mpc mpv mpd vlc yt-dlp maxima fricas octave scilab-bin graphviz jupyterlab jupyter-notebook r djvulibre catdoc unrtf perl-image-exiftool wkhtmltopdf chezmoi neovim repo ecryptfs-utils pandoc hugo inkscape imagemagick aspell aspell-en aspell-fr aspell-ar grammalecte language-tool ltex-ls-bin libvterm brave zotero bitwarden-cli binutils poppler ffmpegthumbnailer mediainfo imagemagick tar unzip ) for PKG in \u0026#34;${PKGS_LIST[@]}\u0026#34;; do check_and_install_pkg \u0026#34;$PKG\u0026#34; done KDE Plasma On KDE, there is a good support for HiDPI displays, however, I faced annoying small icons in some contexts (for example, a right click on desktop). This can be fixed by setting PLASMA_USE_QT_SCALING=1 before starting KDE Plasma. KDE sources the files with .sh extension found on ~/.config/plasma-workspace/env, so let\u0026rsquo;s create ours.\nexport PLASMA_USE_QT_SCALING=1 ","date":"September 26, 2022","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/config/","summary":"This repository How to install Emacs stuff Intro My private Doom modules This file Doom configuration files Pseudo early-init Useful functions Fixes Check for external tools Doom modules (init.el) File skeleton Input (:input) General (:config) Completion (:completion) User interface (:ui) Editor (:editor) Emacs builtin stuff (:emacs) Terminals (:term) Checkers (:checkers) Tools (:tools) Operating system (:os) Language support (:lang) Email (:email) Apps (:app) Private Additional packages (packages.el) General Emacs settings User information Common variables Secrets Better defaults File deletion Window Split defaults Messages buffer Undo and auto-save Auto-save Undo Visual undo (vundo) Editing Emacs sources Frame Focus created frame Browsers Emacs daemon Initialization Tweaks Save recent files Package configuration User interface Font Theme Doom Modus themes Ef (εὖ) themes Lambda themes Mode line Clock Battery Mode line customization Set transparency Dashboard Custom splash image Dashboard Which key Window title SVG tag and svg-lib Focus Scrolling All the icons Tabs Zen (writeroom) mode Highlight indent guides Editing File templates Scratch buffer Mouse buttons Very large files Evil Aggressive indent YASnippet Completion \u0026amp; IDE Company Tweak company-box Treemacs Projectile Tramp Eros-eval dir-locals.","tags":null,"title":"Doom Emacs Configuration"},{"categories":[],"contents":" Prepare your device In your Android phone, enter recovery mode and enable ADB (usually, you need a custom recovery like TWRP, OrangeFox or LineageOS\u0026#39; recovery… etc). On a Linux machine, forward a local TCP port to a remote port on the Android device (let say local 6789, remote 9876). adb forward tcp:6789 tcp:9876 adb shell Netcat your file Once connected to the device\u0026#39;s shell, start netcat in listen mode on port 9876, and redirect stdout to the partition block device:\nnc -l -p 9876 \u0026gt; /dev/block/sda16 Now on the Linux shell, dd the partition backup file and redirect the output to netcat:\ndd if=/path/to/backup.img | nc localhost 6789 \u0026amp; See progress information Using dd, you can check for the progress using the user defined signal USR1, you can see the progress information by sending a USR1 signal to the dd process (knowing it\u0026#39;s PID):\nkill -USR1 [PID] That\u0026#39;s it!\n","date":"January 23, 2022","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/push-partition-android/","summary":"Prepare your device In your Android phone, enter recovery mode and enable ADB (usually, you need a custom recovery like TWRP, OrangeFox or LineageOS\u0026#39; recovery… etc). On a Linux machine, forward a local TCP port to a remote port on the Android device (let say local 6789, remote 9876). adb forward tcp:6789 tcp:9876 adb shell Netcat your file Once connected to the device\u0026#39;s shell, start netcat in listen mode on port 9876, and redirect stdout to the partition block device:","tags":[],"title":"Push partition image to an Android phone"},{"categories":[],"contents":" Sometimes; when working with partimage, someone can create a backup of a 1TB partition which contains -for example- only 10GB of data; in this case, when we want to restore it, partimage will fail if the restore disk does not have enough space (1TB in this case).\nI faced this problem and here the trick I used to restore the backup image to a smaller disk image.\nCreate an image file Create an image file with the right size (with seek, we don\u0026#39;t need to actually have the whole space):\n# Make sure that the seek=[SIZE] is sufficient dd if=/dev/zero of=disk_image.img bs=1 count=1 seek=1TB Use image file as loopback Make the image looks like a disk, by making it as a loopback device.\nsudo losetup /dev/loop0 disk_image.img Restore! Restore the backup image to the loopback device.\nsudo partimage restore /dev/loop0 backup.partimage.000 Done! Done, now you can mount /dev/loop0 or delete the loopback device and mount the `disk_image.img` directly!\nsudo losetup -d /dev/loop0 # delete loopback device mount disk_image.img /mount/point This was a trick that I want to share!\n","date":"April 16, 2020","hero":"/images/default-hero.jpg","permalink":"https://abdelhakbougouffa.pro/posts/restore-partimage-small-disk/","summary":"Sometimes; when working with partimage, someone can create a backup of a 1TB partition which contains -for example- only 10GB of data; in this case, when we want to restore it, partimage will fail if the restore disk does not have enough space (1TB in this case).\nI faced this problem and here the trick I used to restore the backup image to a smaller disk image.\nCreate an image file Create an image file with the right size (with seek, we don\u0026#39;t need to actually have the whole space):","tags":[],"title":"Restore a partimage to a smaller disk"}]